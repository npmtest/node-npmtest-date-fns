{"/home/travis/build/npmtest/node-npmtest-date-fns/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_date_fns */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/lib.npmtest_date_fns.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/lib.npmtest_date_fns.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":53}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":59}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_date_fns */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_date_fns = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_date_fns = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":52}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":66},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-date-fns && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_date_fns */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_date_fns","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_date_fns.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_date_fns.rollup.js'] =","            local.assetsDict['/assets.npmtest_date_fns.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_date_fns.__dirname + '/lib.npmtest_date_fns.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":156,"column":1}}},"branchMap":{},"code":["module.exports = {","  addDays: require('./add_days/index.js'),","  addHours: require('./add_hours/index.js'),","  addISOYears: require('./add_iso_years/index.js'),","  addMilliseconds: require('./add_milliseconds/index.js'),","  addMinutes: require('./add_minutes/index.js'),","  addMonths: require('./add_months/index.js'),","  addQuarters: require('./add_quarters/index.js'),","  addSeconds: require('./add_seconds/index.js'),","  addWeeks: require('./add_weeks/index.js'),","  addYears: require('./add_years/index.js'),","  areRangesOverlapping: require('./are_ranges_overlapping/index.js'),","  closestIndexTo: require('./closest_index_to/index.js'),","  closestTo: require('./closest_to/index.js'),","  compareAsc: require('./compare_asc/index.js'),","  compareDesc: require('./compare_desc/index.js'),","  differenceInCalendarDays: require('./difference_in_calendar_days/index.js'),","  differenceInCalendarISOWeeks: require('./difference_in_calendar_iso_weeks/index.js'),","  differenceInCalendarISOYears: require('./difference_in_calendar_iso_years/index.js'),","  differenceInCalendarMonths: require('./difference_in_calendar_months/index.js'),","  differenceInCalendarQuarters: require('./difference_in_calendar_quarters/index.js'),","  differenceInCalendarWeeks: require('./difference_in_calendar_weeks/index.js'),","  differenceInCalendarYears: require('./difference_in_calendar_years/index.js'),","  differenceInDays: require('./difference_in_days/index.js'),","  differenceInHours: require('./difference_in_hours/index.js'),","  differenceInISOYears: require('./difference_in_iso_years/index.js'),","  differenceInMilliseconds: require('./difference_in_milliseconds/index.js'),","  differenceInMinutes: require('./difference_in_minutes/index.js'),","  differenceInMonths: require('./difference_in_months/index.js'),","  differenceInQuarters: require('./difference_in_quarters/index.js'),","  differenceInSeconds: require('./difference_in_seconds/index.js'),","  differenceInWeeks: require('./difference_in_weeks/index.js'),","  differenceInYears: require('./difference_in_years/index.js'),","  distanceInWords: require('./distance_in_words/index.js'),","  distanceInWordsStrict: require('./distance_in_words_strict/index.js'),","  distanceInWordsToNow: require('./distance_in_words_to_now/index.js'),","  eachDay: require('./each_day/index.js'),","  endOfDay: require('./end_of_day/index.js'),","  endOfHour: require('./end_of_hour/index.js'),","  endOfISOWeek: require('./end_of_iso_week/index.js'),","  endOfISOYear: require('./end_of_iso_year/index.js'),","  endOfMinute: require('./end_of_minute/index.js'),","  endOfMonth: require('./end_of_month/index.js'),","  endOfQuarter: require('./end_of_quarter/index.js'),","  endOfSecond: require('./end_of_second/index.js'),","  endOfToday: require('./end_of_today/index.js'),","  endOfTomorrow: require('./end_of_tomorrow/index.js'),","  endOfWeek: require('./end_of_week/index.js'),","  endOfYear: require('./end_of_year/index.js'),","  endOfYesterday: require('./end_of_yesterday/index.js'),","  format: require('./format/index.js'),","  getDate: require('./get_date/index.js'),","  getDay: require('./get_day/index.js'),","  getDayOfYear: require('./get_day_of_year/index.js'),","  getDaysInMonth: require('./get_days_in_month/index.js'),","  getDaysInYear: require('./get_days_in_year/index.js'),","  getHours: require('./get_hours/index.js'),","  getISODay: require('./get_iso_day/index.js'),","  getISOWeek: require('./get_iso_week/index.js'),","  getISOWeeksInYear: require('./get_iso_weeks_in_year/index.js'),","  getISOYear: require('./get_iso_year/index.js'),","  getMilliseconds: require('./get_milliseconds/index.js'),","  getMinutes: require('./get_minutes/index.js'),","  getMonth: require('./get_month/index.js'),","  getOverlappingDaysInRanges: require('./get_overlapping_days_in_ranges/index.js'),","  getQuarter: require('./get_quarter/index.js'),","  getSeconds: require('./get_seconds/index.js'),","  getTime: require('./get_time/index.js'),","  getYear: require('./get_year/index.js'),","  isAfter: require('./is_after/index.js'),","  isBefore: require('./is_before/index.js'),","  isDate: require('./is_date/index.js'),","  isEqual: require('./is_equal/index.js'),","  isFirstDayOfMonth: require('./is_first_day_of_month/index.js'),","  isFriday: require('./is_friday/index.js'),","  isFuture: require('./is_future/index.js'),","  isLastDayOfMonth: require('./is_last_day_of_month/index.js'),","  isLeapYear: require('./is_leap_year/index.js'),","  isMonday: require('./is_monday/index.js'),","  isPast: require('./is_past/index.js'),","  isSameDay: require('./is_same_day/index.js'),","  isSameHour: require('./is_same_hour/index.js'),","  isSameISOWeek: require('./is_same_iso_week/index.js'),","  isSameISOYear: require('./is_same_iso_year/index.js'),","  isSameMinute: require('./is_same_minute/index.js'),","  isSameMonth: require('./is_same_month/index.js'),","  isSameQuarter: require('./is_same_quarter/index.js'),","  isSameSecond: require('./is_same_second/index.js'),","  isSameWeek: require('./is_same_week/index.js'),","  isSameYear: require('./is_same_year/index.js'),","  isSaturday: require('./is_saturday/index.js'),","  isSunday: require('./is_sunday/index.js'),","  isThisHour: require('./is_this_hour/index.js'),","  isThisISOWeek: require('./is_this_iso_week/index.js'),","  isThisISOYear: require('./is_this_iso_year/index.js'),","  isThisMinute: require('./is_this_minute/index.js'),","  isThisMonth: require('./is_this_month/index.js'),","  isThisQuarter: require('./is_this_quarter/index.js'),","  isThisSecond: require('./is_this_second/index.js'),","  isThisWeek: require('./is_this_week/index.js'),","  isThisYear: require('./is_this_year/index.js'),","  isThursday: require('./is_thursday/index.js'),","  isToday: require('./is_today/index.js'),","  isTomorrow: require('./is_tomorrow/index.js'),","  isTuesday: require('./is_tuesday/index.js'),","  isValid: require('./is_valid/index.js'),","  isWednesday: require('./is_wednesday/index.js'),","  isWeekend: require('./is_weekend/index.js'),","  isWithinRange: require('./is_within_range/index.js'),","  isYesterday: require('./is_yesterday/index.js'),","  lastDayOfISOWeek: require('./last_day_of_iso_week/index.js'),","  lastDayOfISOYear: require('./last_day_of_iso_year/index.js'),","  lastDayOfMonth: require('./last_day_of_month/index.js'),","  lastDayOfQuarter: require('./last_day_of_quarter/index.js'),","  lastDayOfWeek: require('./last_day_of_week/index.js'),","  lastDayOfYear: require('./last_day_of_year/index.js'),","  max: require('./max/index.js'),","  min: require('./min/index.js'),","  parse: require('./parse/index.js'),","  setDate: require('./set_date/index.js'),","  setDay: require('./set_day/index.js'),","  setDayOfYear: require('./set_day_of_year/index.js'),","  setHours: require('./set_hours/index.js'),","  setISODay: require('./set_iso_day/index.js'),","  setISOWeek: require('./set_iso_week/index.js'),","  setISOYear: require('./set_iso_year/index.js'),","  setMilliseconds: require('./set_milliseconds/index.js'),","  setMinutes: require('./set_minutes/index.js'),","  setMonth: require('./set_month/index.js'),","  setQuarter: require('./set_quarter/index.js'),","  setSeconds: require('./set_seconds/index.js'),","  setYear: require('./set_year/index.js'),","  startOfDay: require('./start_of_day/index.js'),","  startOfHour: require('./start_of_hour/index.js'),","  startOfISOWeek: require('./start_of_iso_week/index.js'),","  startOfISOYear: require('./start_of_iso_year/index.js'),","  startOfMinute: require('./start_of_minute/index.js'),","  startOfMonth: require('./start_of_month/index.js'),","  startOfQuarter: require('./start_of_quarter/index.js'),","  startOfSecond: require('./start_of_second/index.js'),","  startOfToday: require('./start_of_today/index.js'),","  startOfTomorrow: require('./start_of_tomorrow/index.js'),","  startOfWeek: require('./start_of_week/index.js'),","  startOfYear: require('./start_of_year/index.js'),","  startOfYesterday: require('./start_of_yesterday/index.js'),","  subDays: require('./sub_days/index.js'),","  subHours: require('./sub_hours/index.js'),","  subISOYears: require('./sub_iso_years/index.js'),","  subMilliseconds: require('./sub_milliseconds/index.js'),","  subMinutes: require('./sub_minutes/index.js'),","  subMonths: require('./sub_months/index.js'),","  subQuarters: require('./sub_quarters/index.js'),","  subSeconds: require('./sub_seconds/index.js'),","  subWeeks: require('./sub_weeks/index.js'),","  subYears: require('./sub_years/index.js')","}",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_days/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_days/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addDays","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":34}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":39}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Day Helpers"," * @summary Add the specified number of days to the given date."," *"," * @description"," * Add the specified number of days to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of days to be added"," * @returns {Date} the new date with the days added"," *"," * @example"," * // Add 10 days to 1 September 2014:"," * var result = addDays(new Date(2014, 8, 1), 10)"," * //=> Thu Sep 11 2014 00:00:00"," */","function addDays (dirtyDate, dirtyAmount) {","  var date = parse(dirtyDate)","  var amount = Number(dirtyAmount)","  date.setDate(date.getDate() + amount)","  return date","}","","module.exports = addDays",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/parse/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/parse/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":1,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"parse","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":40}}},"2":{"name":"splitDateString","line":123,"loc":{"start":{"line":123,"column":0},"end":{"line":123,"column":38}}},"3":{"name":"parseYear","line":149,"loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":50}}},"4":{"name":"parseDate","line":181,"loc":{"start":{"line":181,"column":0},"end":{"line":181,"column":38}}},"5":{"name":"parseTime","line":246,"loc":{"start":{"line":246,"column":0},"end":{"line":246,"column":32}}},"6":{"name":"parseTimezone","line":282,"loc":{"start":{"line":282,"column":0},"end":{"line":282,"column":40}}},"7":{"name":"dayOfISOYear","line":309,"loc":{"start":{"line":309,"column":0},"end":{"line":309,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":43}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":33}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":29}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":30}},"8":{"start":{"line":12,"column":0},"end":{"line":16,"column":1}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":31}},"10":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"11":{"start":{"line":26,"column":0},"end":{"line":26,"column":31}},"12":{"start":{"line":27,"column":0},"end":{"line":27,"column":33}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":43}},"14":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}},"15":{"start":{"line":30,"column":0},"end":{"line":30,"column":44}},"16":{"start":{"line":33,"column":0},"end":{"line":33,"column":40}},"17":{"start":{"line":34,"column":0},"end":{"line":34,"column":51}},"18":{"start":{"line":35,"column":0},"end":{"line":35,"column":62}},"19":{"start":{"line":38,"column":0},"end":{"line":38,"column":37}},"20":{"start":{"line":39,"column":0},"end":{"line":39,"column":33}},"21":{"start":{"line":40,"column":0},"end":{"line":40,"column":44}},"22":{"start":{"line":41,"column":0},"end":{"line":41,"column":55}},"23":{"start":{"line":76,"column":0},"end":{"line":121,"column":1}},"24":{"start":{"line":77,"column":2},"end":{"line":82,"column":3}},"25":{"start":{"line":79,"column":4},"end":{"line":79,"column":39}},"26":{"start":{"line":80,"column":9},"end":{"line":82,"column":3}},"27":{"start":{"line":81,"column":4},"end":{"line":81,"column":29}},"28":{"start":{"line":84,"column":2},"end":{"line":84,"column":34}},"29":{"start":{"line":85,"column":2},"end":{"line":85,"column":49}},"30":{"start":{"line":86,"column":2},"end":{"line":90,"column":3}},"31":{"start":{"line":87,"column":4},"end":{"line":87,"column":48}},"32":{"start":{"line":89,"column":4},"end":{"line":89,"column":47}},"33":{"start":{"line":92,"column":2},"end":{"line":92,"column":45}},"34":{"start":{"line":94,"column":2},"end":{"line":94,"column":69}},"35":{"start":{"line":95,"column":2},"end":{"line":95,"column":33}},"36":{"start":{"line":96,"column":2},"end":{"line":96,"column":53}},"37":{"start":{"line":98,"column":2},"end":{"line":98,"column":44}},"38":{"start":{"line":100,"column":2},"end":{"line":120,"column":3}},"39":{"start":{"line":101,"column":4},"end":{"line":101,"column":34}},"40":{"start":{"line":102,"column":4},"end":{"line":102,"column":16}},"41":{"start":{"line":103,"column":4},"end":{"line":103,"column":14}},"42":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"43":{"start":{"line":106,"column":6},"end":{"line":106,"column":40}},"44":{"start":{"line":109,"column":4},"end":{"line":115,"column":5}},"45":{"start":{"line":110,"column":6},"end":{"line":110,"column":50}},"46":{"start":{"line":113,"column":6},"end":{"line":113,"column":61}},"47":{"start":{"line":114,"column":6},"end":{"line":114,"column":95}},"48":{"start":{"line":117,"column":4},"end":{"line":117,"column":71}},"49":{"start":{"line":119,"column":4},"end":{"line":119,"column":29}},"50":{"start":{"line":123,"column":0},"end":{"line":147,"column":1}},"51":{"start":{"line":124,"column":2},"end":{"line":124,"column":22}},"52":{"start":{"line":125,"column":2},"end":{"line":125,"column":59}},"53":{"start":{"line":126,"column":2},"end":{"line":126,"column":16}},"54":{"start":{"line":128,"column":2},"end":{"line":134,"column":3}},"55":{"start":{"line":129,"column":4},"end":{"line":129,"column":27}},"56":{"start":{"line":130,"column":4},"end":{"line":130,"column":25}},"57":{"start":{"line":132,"column":4},"end":{"line":132,"column":31}},"58":{"start":{"line":133,"column":4},"end":{"line":133,"column":25}},"59":{"start":{"line":136,"column":2},"end":{"line":144,"column":3}},"60":{"start":{"line":137,"column":4},"end":{"line":137,"column":51}},"61":{"start":{"line":138,"column":4},"end":{"line":143,"column":5}},"62":{"start":{"line":139,"column":6},"end":{"line":139,"column":57}},"63":{"start":{"line":140,"column":6},"end":{"line":140,"column":37}},"64":{"start":{"line":142,"column":6},"end":{"line":142,"column":35}},"65":{"start":{"line":146,"column":2},"end":{"line":146,"column":20}},"66":{"start":{"line":149,"column":0},"end":{"line":179,"column":1}},"67":{"start":{"line":150,"column":2},"end":{"line":150,"column":54}},"68":{"start":{"line":151,"column":2},"end":{"line":151,"column":58}},"69":{"start":{"line":153,"column":2},"end":{"line":153,"column":11}},"70":{"start":{"line":156,"column":2},"end":{"line":156,"column":77}},"71":{"start":{"line":157,"column":2},"end":{"line":163,"column":3}},"72":{"start":{"line":158,"column":4},"end":{"line":158,"column":29}},"73":{"start":{"line":159,"column":4},"end":{"line":162,"column":5}},"74":{"start":{"line":166,"column":2},"end":{"line":166,"column":73}},"75":{"start":{"line":167,"column":2},"end":{"line":173,"column":3}},"76":{"start":{"line":168,"column":4},"end":{"line":168,"column":32}},"77":{"start":{"line":169,"column":4},"end":{"line":172,"column":5}},"78":{"start":{"line":176,"column":2},"end":{"line":178,"column":3}},"79":{"start":{"line":181,"column":0},"end":{"line":244,"column":1}},"80":{"start":{"line":183,"column":2},"end":{"line":185,"column":3}},"81":{"start":{"line":184,"column":4},"end":{"line":184,"column":15}},"82":{"start":{"line":187,"column":2},"end":{"line":187,"column":11}},"83":{"start":{"line":188,"column":2},"end":{"line":188,"column":10}},"84":{"start":{"line":189,"column":2},"end":{"line":189,"column":11}},"85":{"start":{"line":190,"column":2},"end":{"line":190,"column":10}},"86":{"start":{"line":193,"column":2},"end":{"line":197,"column":3}},"87":{"start":{"line":194,"column":4},"end":{"line":194,"column":22}},"88":{"start":{"line":195,"column":4},"end":{"line":195,"column":29}},"89":{"start":{"line":196,"column":4},"end":{"line":196,"column":15}},"90":{"start":{"line":200,"column":2},"end":{"line":200,"column":39}},"91":{"start":{"line":201,"column":2},"end":{"line":206,"column":3}},"92":{"start":{"line":202,"column":4},"end":{"line":202,"column":22}},"93":{"start":{"line":203,"column":4},"end":{"line":203,"column":38}},"94":{"start":{"line":204,"column":4},"end":{"line":204,"column":36}},"95":{"start":{"line":205,"column":4},"end":{"line":205,"column":15}},"96":{"start":{"line":209,"column":2},"end":{"line":209,"column":40}},"97":{"start":{"line":210,"column":2},"end":{"line":215,"column":3}},"98":{"start":{"line":211,"column":4},"end":{"line":211,"column":22}},"99":{"start":{"line":212,"column":4},"end":{"line":212,"column":42}},"100":{"start":{"line":213,"column":4},"end":{"line":213,"column":43}},"101":{"start":{"line":214,"column":4},"end":{"line":214,"column":15}},"102":{"start":{"line":218,"column":2},"end":{"line":218,"column":41}},"103":{"start":{"line":219,"column":2},"end":{"line":225,"column":3}},"104":{"start":{"line":220,"column":4},"end":{"line":220,"column":22}},"105":{"start":{"line":221,"column":4},"end":{"line":221,"column":38}},"106":{"start":{"line":222,"column":4},"end":{"line":222,"column":36}},"107":{"start":{"line":223,"column":4},"end":{"line":223,"column":41}},"108":{"start":{"line":224,"column":4},"end":{"line":224,"column":15}},"109":{"start":{"line":228,"column":2},"end":{"line":228,"column":40}},"110":{"start":{"line":229,"column":2},"end":{"line":232,"column":3}},"111":{"start":{"line":230,"column":4},"end":{"line":230,"column":37}},"112":{"start":{"line":231,"column":4},"end":{"line":231,"column":35}},"113":{"start":{"line":235,"column":2},"end":{"line":235,"column":41}},"114":{"start":{"line":236,"column":2},"end":{"line":240,"column":3}},"115":{"start":{"line":237,"column":4},"end":{"line":237,"column":37}},"116":{"start":{"line":238,"column":4},"end":{"line":238,"column":46}},"117":{"start":{"line":239,"column":4},"end":{"line":239,"column":46}},"118":{"start":{"line":243,"column":2},"end":{"line":243,"column":13}},"119":{"start":{"line":246,"column":0},"end":{"line":280,"column":1}},"120":{"start":{"line":247,"column":2},"end":{"line":247,"column":11}},"121":{"start":{"line":248,"column":2},"end":{"line":248,"column":11}},"122":{"start":{"line":249,"column":2},"end":{"line":249,"column":13}},"123":{"start":{"line":252,"column":2},"end":{"line":252,"column":39}},"124":{"start":{"line":253,"column":2},"end":{"line":256,"column":3}},"125":{"start":{"line":254,"column":4},"end":{"line":254,"column":50}},"126":{"start":{"line":255,"column":4},"end":{"line":255,"column":46}},"127":{"start":{"line":259,"column":2},"end":{"line":259,"column":41}},"128":{"start":{"line":260,"column":2},"end":{"line":265,"column":3}},"129":{"start":{"line":261,"column":4},"end":{"line":261,"column":34}},"130":{"start":{"line":262,"column":4},"end":{"line":262,"column":52}},"131":{"start":{"line":263,"column":4},"end":{"line":264,"column":38}},"132":{"start":{"line":268,"column":2},"end":{"line":268,"column":43}},"133":{"start":{"line":269,"column":2},"end":{"line":276,"column":3}},"134":{"start":{"line":270,"column":4},"end":{"line":270,"column":34}},"135":{"start":{"line":271,"column":4},"end":{"line":271,"column":36}},"136":{"start":{"line":272,"column":4},"end":{"line":272,"column":56}},"137":{"start":{"line":273,"column":4},"end":{"line":275,"column":20}},"138":{"start":{"line":279,"column":2},"end":{"line":279,"column":13}},"139":{"start":{"line":282,"column":0},"end":{"line":307,"column":1}},"140":{"start":{"line":283,"column":2},"end":{"line":283,"column":11}},"141":{"start":{"line":284,"column":2},"end":{"line":284,"column":20}},"142":{"start":{"line":287,"column":2},"end":{"line":287,"column":50}},"143":{"start":{"line":288,"column":2},"end":{"line":290,"column":3}},"144":{"start":{"line":289,"column":4},"end":{"line":289,"column":12}},"145":{"start":{"line":293,"column":2},"end":{"line":293,"column":51}},"146":{"start":{"line":294,"column":2},"end":{"line":297,"column":3}},"147":{"start":{"line":295,"column":4},"end":{"line":295,"column":48}},"148":{"start":{"line":296,"column":4},"end":{"line":296,"column":64}},"149":{"start":{"line":300,"column":2},"end":{"line":300,"column":53}},"150":{"start":{"line":301,"column":2},"end":{"line":304,"column":3}},"151":{"start":{"line":302,"column":4},"end":{"line":302,"column":73}},"152":{"start":{"line":303,"column":4},"end":{"line":303,"column":64}},"153":{"start":{"line":306,"column":2},"end":{"line":306,"column":10}},"154":{"start":{"line":309,"column":0},"end":{"line":318,"column":1}},"155":{"start":{"line":310,"column":2},"end":{"line":310,"column":18}},"156":{"start":{"line":311,"column":2},"end":{"line":311,"column":16}},"157":{"start":{"line":312,"column":2},"end":{"line":312,"column":24}},"158":{"start":{"line":313,"column":2},"end":{"line":313,"column":36}},"159":{"start":{"line":314,"column":2},"end":{"line":314,"column":48}},"160":{"start":{"line":315,"column":2},"end":{"line":315,"column":52}},"161":{"start":{"line":316,"column":2},"end":{"line":316,"column":43}},"162":{"start":{"line":317,"column":2},"end":{"line":317,"column":13}},"163":{"start":{"line":320,"column":0},"end":{"line":320,"column":22}}},"branchMap":{"1":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":2},"end":{"line":77,"column":2}},{"start":{"line":77,"column":2},"end":{"line":77,"column":2}}]},"2":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":9},"end":{"line":80,"column":9}},{"start":{"line":80,"column":9},"end":{"line":80,"column":9}}]},"3":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":16},"end":{"line":84,"column":28}},{"start":{"line":84,"column":32},"end":{"line":84,"column":34}}]},"4":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":2},"end":{"line":86,"column":2}},{"start":{"line":86,"column":2},"end":{"line":86,"column":2}}]},"5":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":2},"end":{"line":100,"column":2}},{"start":{"line":100,"column":2},"end":{"line":100,"column":2}}]},"6":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"7":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":109,"column":4}},{"start":{"line":109,"column":4},"end":{"line":109,"column":4}}]},"8":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":2},"end":{"line":128,"column":2}},{"start":{"line":128,"column":2},"end":{"line":128,"column":2}}]},"9":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":2},"end":{"line":136,"column":2}},{"start":{"line":136,"column":2},"end":{"line":136,"column":2}}]},"10":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":4},"end":{"line":138,"column":4}},{"start":{"line":138,"column":4},"end":{"line":138,"column":4}}]},"11":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":10},"end":{"line":156,"column":41}},{"start":{"line":156,"column":45},"end":{"line":156,"column":77}}]},"12":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":2},"end":{"line":157,"column":2}},{"start":{"line":157,"column":2},"end":{"line":157,"column":2}}]},"13":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":10},"end":{"line":166,"column":39}},{"start":{"line":166,"column":43},"end":{"line":166,"column":73}}]},"14":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":2},"end":{"line":167,"column":2}},{"start":{"line":167,"column":2},"end":{"line":167,"column":2}}]},"15":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":2},"end":{"line":183,"column":2}},{"start":{"line":183,"column":2},"end":{"line":183,"column":2}}]},"16":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":2},"end":{"line":193,"column":2}},{"start":{"line":193,"column":2},"end":{"line":193,"column":2}}]},"17":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":2},"end":{"line":201,"column":2}},{"start":{"line":201,"column":2},"end":{"line":201,"column":2}}]},"18":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":2},"end":{"line":210,"column":2}},{"start":{"line":210,"column":2},"end":{"line":210,"column":2}}]},"19":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":2},"end":{"line":219,"column":2}},{"start":{"line":219,"column":2},"end":{"line":219,"column":2}}]},"20":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":2},"end":{"line":229,"column":2}},{"start":{"line":229,"column":2},"end":{"line":229,"column":2}}]},"21":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":2},"end":{"line":236,"column":2}},{"start":{"line":236,"column":2},"end":{"line":236,"column":2}}]},"22":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":2},"end":{"line":253,"column":2}},{"start":{"line":253,"column":2},"end":{"line":253,"column":2}}]},"23":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":2},"end":{"line":260,"column":2}},{"start":{"line":260,"column":2},"end":{"line":260,"column":2}}]},"24":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":2},"end":{"line":269,"column":2}},{"start":{"line":269,"column":2},"end":{"line":269,"column":2}}]},"25":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":2},"end":{"line":288,"column":2}},{"start":{"line":288,"column":2},"end":{"line":288,"column":2}}]},"26":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":2},"end":{"line":294,"column":2}},{"start":{"line":294,"column":2},"end":{"line":294,"column":2}}]},"27":{"line":296,"type":"cond-expr","locations":[{"start":{"line":296,"column":32},"end":{"line":296,"column":47}},{"start":{"line":296,"column":50},"end":{"line":296,"column":64}}]},"28":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":2},"end":{"line":301,"column":2}},{"start":{"line":301,"column":2},"end":{"line":301,"column":2}}]},"29":{"line":303,"type":"cond-expr","locations":[{"start":{"line":303,"column":32},"end":{"line":303,"column":47}},{"start":{"line":303,"column":50},"end":{"line":303,"column":64}}]},"30":{"line":310,"type":"binary-expr","locations":[{"start":{"line":310,"column":9},"end":{"line":310,"column":13}},{"start":{"line":310,"column":17},"end":{"line":310,"column":18}}]},"31":{"line":311,"type":"binary-expr","locations":[{"start":{"line":311,"column":8},"end":{"line":311,"column":11}},{"start":{"line":311,"column":15},"end":{"line":311,"column":16}}]},"32":{"line":314,"type":"binary-expr","locations":[{"start":{"line":314,"column":27},"end":{"line":314,"column":43}},{"start":{"line":314,"column":47},"end":{"line":314,"column":48}}]}},"code":["var isDate = require('../is_date/index.js')","","var MILLISECONDS_IN_HOUR = 3600000","var MILLISECONDS_IN_MINUTE = 60000","var DEFAULT_ADDITIONAL_DIGITS = 2","","var parseTokenDateTimeDelimeter = /[T ]/","var parseTokenPlainTime = /:/","","// year tokens","var parseTokenYY = /^(\\d{2})$/","var parseTokensYYY = [","  /^([+-]\\d{2})$/, // 0 additional digits","  /^([+-]\\d{3})$/, // 1 additional digit","  /^([+-]\\d{4})$/ // 2 additional digits","]","","var parseTokenYYYY = /^(\\d{4})/","var parseTokensYYYYY = [","  /^([+-]\\d{4})/, // 0 additional digits","  /^([+-]\\d{5})/, // 1 additional digit","  /^([+-]\\d{6})/ // 2 additional digits","]","","// date tokens","var parseTokenMM = /^-(\\d{2})$/","var parseTokenDDD = /^-?(\\d{3})$/","var parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/","var parseTokenWww = /^-?W(\\d{2})$/","var parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/","","// time tokens","var parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/","var parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/","var parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/","","// timezone tokens","var parseTokenTimezone = /([Z+-].*)$/","var parseTokenTimezoneZ = /^(Z)$/","var parseTokenTimezoneHH = /^([+-])(\\d{2})$/","var parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/","","/**"," * @category Common Helpers"," * @summary Convert the given argument to an instance of Date."," *"," * @description"," * Convert the given argument to an instance of Date."," *"," * If the argument is an instance of Date, the function returns its clone."," *"," * If the argument is a number, it is treated as a timestamp."," *"," * If an argument is a string, the function tries to parse it."," * Function accepts complete ISO 8601 formats as well as partial implementations."," * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601"," *"," * If all above fails, the function passes the given argument to Date constructor."," *"," * @param {Date|String|Number} argument - the value to convert"," * @param {Object} [options] - the object with options"," * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format"," * @returns {Date} the parsed date in the local time zone"," *"," * @example"," * // Convert string '2014-02-11T11:30:30' to date:"," * var result = parse('2014-02-11T11:30:30')"," * //=> Tue Feb 11 2014 11:30:30"," *"," * @example"," * // Parse string '+02014101',"," * // if the additional number of digits in the extended year format is 1:"," * var result = parse('+02014101', {additionalDigits: 1})"," * //=> Fri Apr 11 2014 00:00:00"," */","function parse (argument, dirtyOptions) {","  if (isDate(argument)) {","    // Prevent the date to lose the milliseconds when passed to new Date() in IE10","    return new Date(argument.getTime())","  } else if (typeof argument !== 'string') {","    return new Date(argument)","  }","","  var options = dirtyOptions || {}","  var additionalDigits = options.additionalDigits","  if (additionalDigits == null) {","    additionalDigits = DEFAULT_ADDITIONAL_DIGITS","  } else {","    additionalDigits = Number(additionalDigits)","  }","","  var dateStrings = splitDateString(argument)","","  var parseYearResult = parseYear(dateStrings.date, additionalDigits)","  var year = parseYearResult.year","  var restDateString = parseYearResult.restDateString","","  var date = parseDate(restDateString, year)","","  if (date) {","    var timestamp = date.getTime()","    var time = 0","    var offset","","    if (dateStrings.time) {","      time = parseTime(dateStrings.time)","    }","","    if (dateStrings.timezone) {","      offset = parseTimezone(dateStrings.timezone)","    } else {","      // get offset accurate to hour in timezones that change offset","      offset = new Date(timestamp + time).getTimezoneOffset()","      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset()","    }","","    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)","  } else {","    return new Date(argument)","  }","}","","function splitDateString (dateString) {","  var dateStrings = {}","  var array = dateString.split(parseTokenDateTimeDelimeter)","  var timeString","","  if (parseTokenPlainTime.test(array[0])) {","    dateStrings.date = null","    timeString = array[0]","  } else {","    dateStrings.date = array[0]","    timeString = array[1]","  }","","  if (timeString) {","    var token = parseTokenTimezone.exec(timeString)","    if (token) {","      dateStrings.time = timeString.replace(token[1], '')","      dateStrings.timezone = token[1]","    } else {","      dateStrings.time = timeString","    }","  }","","  return dateStrings","}","","function parseYear (dateString, additionalDigits) {","  var parseTokenYYY = parseTokensYYY[additionalDigits]","  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]","","  var token","","  // YYYY or ±YYYYY","  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)","  if (token) {","    var yearString = token[1]","    return {","      year: parseInt(yearString, 10),","      restDateString: dateString.slice(yearString.length)","    }","  }","","  // YY or ±YYY","  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)","  if (token) {","    var centuryString = token[1]","    return {","      year: parseInt(centuryString, 10) * 100,","      restDateString: dateString.slice(centuryString.length)","    }","  }","","  // Invalid ISO-formatted year","  return {","    year: null","  }","}","","function parseDate (dateString, year) {","  // Invalid ISO-formatted year","  if (year === null) {","    return null","  }","","  var token","  var date","  var month","  var week","","  // YYYY","  if (dateString.length === 0) {","    date = new Date(0)","    date.setUTCFullYear(year)","    return date","  }","","  // YYYY-MM","  token = parseTokenMM.exec(dateString)","  if (token) {","    date = new Date(0)","    month = parseInt(token[1], 10) - 1","    date.setUTCFullYear(year, month)","    return date","  }","","  // YYYY-DDD or YYYYDDD","  token = parseTokenDDD.exec(dateString)","  if (token) {","    date = new Date(0)","    var dayOfYear = parseInt(token[1], 10)","    date.setUTCFullYear(year, 0, dayOfYear)","    return date","  }","","  // YYYY-MM-DD or YYYYMMDD","  token = parseTokenMMDD.exec(dateString)","  if (token) {","    date = new Date(0)","    month = parseInt(token[1], 10) - 1","    var day = parseInt(token[2], 10)","    date.setUTCFullYear(year, month, day)","    return date","  }","","  // YYYY-Www or YYYYWww","  token = parseTokenWww.exec(dateString)","  if (token) {","    week = parseInt(token[1], 10) - 1","    return dayOfISOYear(year, week)","  }","","  // YYYY-Www-D or YYYYWwwD","  token = parseTokenWwwD.exec(dateString)","  if (token) {","    week = parseInt(token[1], 10) - 1","    var dayOfWeek = parseInt(token[2], 10) - 1","    return dayOfISOYear(year, week, dayOfWeek)","  }","","  // Invalid ISO-formatted date","  return null","}","","function parseTime (timeString) {","  var token","  var hours","  var minutes","","  // hh","  token = parseTokenHH.exec(timeString)","  if (token) {","    hours = parseFloat(token[1].replace(',', '.'))","    return (hours % 24) * MILLISECONDS_IN_HOUR","  }","","  // hh:mm or hhmm","  token = parseTokenHHMM.exec(timeString)","  if (token) {","    hours = parseInt(token[1], 10)","    minutes = parseFloat(token[2].replace(',', '.'))","    return (hours % 24) * MILLISECONDS_IN_HOUR +","      minutes * MILLISECONDS_IN_MINUTE","  }","","  // hh:mm:ss or hhmmss","  token = parseTokenHHMMSS.exec(timeString)","  if (token) {","    hours = parseInt(token[1], 10)","    minutes = parseInt(token[2], 10)","    var seconds = parseFloat(token[3].replace(',', '.'))","    return (hours % 24) * MILLISECONDS_IN_HOUR +","      minutes * MILLISECONDS_IN_MINUTE +","      seconds * 1000","  }","","  // Invalid ISO-formatted time","  return null","}","","function parseTimezone (timezoneString) {","  var token","  var absoluteOffset","","  // Z","  token = parseTokenTimezoneZ.exec(timezoneString)","  if (token) {","    return 0","  }","","  // ±hh","  token = parseTokenTimezoneHH.exec(timezoneString)","  if (token) {","    absoluteOffset = parseInt(token[2], 10) * 60","    return (token[1] === '+') ? -absoluteOffset : absoluteOffset","  }","","  // ±hh:mm or ±hhmm","  token = parseTokenTimezoneHHMM.exec(timezoneString)","  if (token) {","    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)","    return (token[1] === '+') ? -absoluteOffset : absoluteOffset","  }","","  return 0","}","","function dayOfISOYear (isoYear, week, day) {","  week = week || 0","  day = day || 0","  var date = new Date(0)","  date.setUTCFullYear(isoYear, 0, 4)","  var fourthOfJanuaryDay = date.getUTCDay() || 7","  var diff = week * 7 + day + 1 - fourthOfJanuaryDay","  date.setUTCDate(date.getUTCDate() + diff)","  return date","}","","module.exports = parse",""],"l":{"1":1,"3":1,"4":1,"5":1,"7":1,"8":1,"11":1,"12":1,"18":1,"19":1,"26":1,"27":1,"28":1,"29":1,"30":1,"33":1,"34":1,"35":1,"38":1,"39":1,"40":1,"41":1,"76":1,"77":0,"79":0,"80":0,"81":0,"84":0,"85":0,"86":0,"87":0,"89":0,"92":0,"94":0,"95":0,"96":0,"98":0,"100":0,"101":0,"102":0,"103":0,"105":0,"106":0,"109":0,"110":0,"113":0,"114":0,"117":0,"119":0,"123":1,"124":0,"125":0,"126":0,"128":0,"129":0,"130":0,"132":0,"133":0,"136":0,"137":0,"138":0,"139":0,"140":0,"142":0,"146":0,"149":1,"150":0,"151":0,"153":0,"156":0,"157":0,"158":0,"159":0,"166":0,"167":0,"168":0,"169":0,"176":0,"181":1,"183":0,"184":0,"187":0,"188":0,"189":0,"190":0,"193":0,"194":0,"195":0,"196":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"228":0,"229":0,"230":0,"231":0,"235":0,"236":0,"237":0,"238":0,"239":0,"243":0,"246":1,"247":0,"248":0,"249":0,"252":0,"253":0,"254":0,"255":0,"259":0,"260":0,"261":0,"262":0,"263":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"279":0,"282":1,"283":0,"284":0,"287":0,"288":0,"289":0,"293":0,"294":0,"295":0,"296":0,"300":0,"301":0,"302":0,"303":0,"306":0,"309":1,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"320":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_date/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_date/index.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isDate","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":27}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":18,"column":1}},"2":{"start":{"line":17,"column":2},"end":{"line":17,"column":33}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":23}}},"branchMap":{},"code":["/**"," * @category Common Helpers"," * @summary Is the given argument an instance of Date?"," *"," * @description"," * Is the given argument an instance of Date?"," *"," * @param {*} argument - the argument to check"," * @returns {Boolean} the given argument is an instance of Date"," *"," * @example"," * // Is 'mayonnaise' a Date?"," * var result = isDate('mayonnaise')"," * //=> false"," */","function isDate (argument) {","  return argument instanceof Date","}","","module.exports = isDate",""],"l":{"16":1,"17":0,"20":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_hours/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_hours/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addHours","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":21,"column":0},"end":{"line":24,"column":1}},"4":{"start":{"line":22,"column":2},"end":{"line":22,"column":34}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":66}},"6":{"start":{"line":26,"column":0},"end":{"line":26,"column":25}}},"branchMap":{},"code":["var addMilliseconds = require('../add_milliseconds/index.js')","","var MILLISECONDS_IN_HOUR = 3600000","","/**"," * @category Hour Helpers"," * @summary Add the specified number of hours to the given date."," *"," * @description"," * Add the specified number of hours to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of hours to be added"," * @returns {Date} the new date with the hours added"," *"," * @example"," * // Add 2 hours to 10 July 2014 23:00:00:"," * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)"," * //=> Fri Jul 11 2014 01:00:00"," */","function addHours (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR)","}","","module.exports = addHours",""],"l":{"1":1,"3":1,"21":1,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_milliseconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_milliseconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addMilliseconds","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":50}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":44}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":34}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":37}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":32}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Millisecond Helpers"," * @summary Add the specified number of milliseconds to the given date."," *"," * @description"," * Add the specified number of milliseconds to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of milliseconds to be added"," * @returns {Date} the new date with the milliseconds added"," *"," * @example"," * // Add 750 milliseconds to 10 July 2014 12:45:30.000:"," * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)"," * //=> Thu Jul 10 2014 12:45:30.750"," */","function addMilliseconds (dirtyDate, dirtyAmount) {","  var timestamp = parse(dirtyDate).getTime()","  var amount = Number(dirtyAmount)","  return new Date(timestamp + amount)","}","","module.exports = addMilliseconds",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_iso_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_iso_years/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addISOYears","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":52}},"3":{"start":{"line":22,"column":0},"end":{"line":25,"column":1}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":34}},"5":{"start":{"line":24,"column":2},"end":{"line":24,"column":62}},"6":{"start":{"line":27,"column":0},"end":{"line":27,"column":28}}},"branchMap":{},"code":["var getISOYear = require('../get_iso_year/index.js')","var setISOYear = require('../set_iso_year/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Add the specified number of ISO week-numbering years to the given date."," *"," * @description"," * Add the specified number of ISO week-numbering years to the given date."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of ISO week-numbering years to be added"," * @returns {Date} the new date with the ISO week-numbering years added"," *"," * @example"," * // Add 5 ISO week-numbering years to 2 July 2010:"," * var result = addISOYears(new Date(2010, 6, 2), 5)"," * //=> Fri Jun 26 2015 00:00:00"," */","function addISOYears (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return setISOYear(dirtyDate, getISOYear(dirtyDate) + amount)","}","","module.exports = addISOYears",""],"l":{"1":1,"2":1,"22":1,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_year/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"getISOYear","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":22,"column":0},"end":{"line":43,"column":1}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":29}},"5":{"start":{"line":24,"column":2},"end":{"line":24,"column":31}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":45}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":55}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":48}},"9":{"start":{"line":29,"column":2},"end":{"line":29,"column":65}},"10":{"start":{"line":31,"column":2},"end":{"line":31,"column":45}},"11":{"start":{"line":32,"column":2},"end":{"line":32,"column":51}},"12":{"start":{"line":33,"column":2},"end":{"line":33,"column":48}},"13":{"start":{"line":34,"column":2},"end":{"line":34,"column":65}},"14":{"start":{"line":36,"column":2},"end":{"line":42,"column":3}},"15":{"start":{"line":37,"column":4},"end":{"line":37,"column":19}},"16":{"start":{"line":38,"column":9},"end":{"line":42,"column":3}},"17":{"start":{"line":39,"column":4},"end":{"line":39,"column":15}},"18":{"start":{"line":41,"column":4},"end":{"line":41,"column":19}},"19":{"start":{"line":45,"column":0},"end":{"line":45,"column":27}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":2},"end":{"line":36,"column":2}},{"start":{"line":36,"column":2},"end":{"line":36,"column":2}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":9},"end":{"line":38,"column":9}},{"start":{"line":38,"column":9},"end":{"line":38,"column":9}}]}},"code":["var parse = require('../parse/index.js')","var startOfISOWeek = require('../start_of_iso_week/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Get the ISO week-numbering year of the given date."," *"," * @description"," * Get the ISO week-numbering year of the given date,"," * which always starts 3 days before the year's first Thursday."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the ISO week-numbering year"," *"," * @example"," * // Which ISO-week numbering year is 2 January 2005?"," * var result = getISOYear(new Date(2005, 0, 2))"," * //=> 2004"," */","function getISOYear (dirtyDate) {","  var date = parse(dirtyDate)","  var year = date.getFullYear()","","  var fourthOfJanuaryOfNextYear = new Date(0)","  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)","  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)","  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear)","","  var fourthOfJanuaryOfThisYear = new Date(0)","  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4)","  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0)","  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear)","","  if (date.getTime() >= startOfNextYear.getTime()) {","    return year + 1","  } else if (date.getTime() >= startOfThisYear.getTime()) {","    return year","  } else {","    return year - 1","  }","}","","module.exports = getISOYear",""],"l":{"1":1,"2":1,"22":1,"23":0,"24":0,"26":0,"27":0,"28":0,"29":0,"31":0,"32":0,"33":0,"34":0,"36":0,"37":0,"38":0,"39":0,"41":0,"45":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_iso_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_iso_week/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfISOWeek","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":54}},"2":{"start":{"line":21,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":22,"column":2},"end":{"line":22,"column":50}},"4":{"start":{"line":25,"column":0},"end":{"line":25,"column":31}}},"branchMap":{},"code":["var startOfWeek = require('../start_of_week/index.js')","","/**"," * @category ISO Week Helpers"," * @summary Return the start of an ISO week for the given date."," *"," * @description"," * Return the start of an ISO week for the given date."," * The result will be in the local timezone."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of an ISO week"," *"," * @example"," * // The start of an ISO week for 2 September 2014 11:55:00:"," * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Mon Sep 01 2014 00:00:00"," */","function startOfISOWeek (dirtyDate) {","  return startOfWeek(dirtyDate, {weekStartsOn: 1})","}","","module.exports = startOfISOWeek",""],"l":{"1":1,"21":1,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_week/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"startOfWeek","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":47}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":26,"column":0},"end":{"line":36,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":27,"column":80}},"4":{"start":{"line":29,"column":2},"end":{"line":29,"column":29}},"5":{"start":{"line":30,"column":2},"end":{"line":30,"column":25}},"6":{"start":{"line":31,"column":2},"end":{"line":31,"column":62}},"7":{"start":{"line":33,"column":2},"end":{"line":33,"column":37}},"8":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"9":{"start":{"line":35,"column":2},"end":{"line":35,"column":13}},"10":{"start":{"line":38,"column":0},"end":{"line":38,"column":28}}},"branchMap":{"1":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":37},"end":{"line":27,"column":75}},{"start":{"line":27,"column":79},"end":{"line":27,"column":80}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":37},"end":{"line":27,"column":70}},{"start":{"line":27,"column":74},"end":{"line":27,"column":75}}]},"3":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":35},"end":{"line":31,"column":36}},{"start":{"line":31,"column":39},"end":{"line":31,"column":40}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Week Helpers"," * @summary Return the start of a week for the given date."," *"," * @description"," * Return the start of a week for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @param {Object} [options] - the object with options"," * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)"," * @returns {Date} the start of a week"," *"," * @example"," * // The start of a week for 2 September 2014 11:55:00:"," * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Sun Aug 31 2014 00:00:00"," *"," * @example"," * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:"," * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})"," * //=> Mon Sep 01 2014 00:00:00"," */","function startOfWeek (dirtyDate, dirtyOptions) {","  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0","","  var date = parse(dirtyDate)","  var day = date.getDay()","  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn","","  date.setDate(date.getDate() - diff)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = startOfWeek",""],"l":{"1":1,"26":1,"27":0,"29":0,"30":0,"31":0,"33":0,"34":0,"35":0,"38":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_iso_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_iso_year/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setISOYear","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":81}},"4":{"start":{"line":24,"column":0},"end":{"line":34,"column":1}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":29}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":36}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":65}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":35}},"9":{"start":{"line":29,"column":2},"end":{"line":29,"column":44}},"10":{"start":{"line":30,"column":2},"end":{"line":30,"column":38}},"11":{"start":{"line":31,"column":2},"end":{"line":31,"column":40}},"12":{"start":{"line":32,"column":2},"end":{"line":32,"column":37}},"13":{"start":{"line":33,"column":2},"end":{"line":33,"column":13}},"14":{"start":{"line":36,"column":0},"end":{"line":36,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var startOfISOYear = require('../start_of_iso_year/index.js')","var differenceInCalendarDays = require('../difference_in_calendar_days/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Set the ISO week-numbering year to the given date."," *"," * @description"," * Set the ISO week-numbering year to the given date,"," * saving the week number and the weekday number."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} isoYear - the ISO week-numbering year of the new date"," * @returns {Date} the new date with the ISO week-numbering year setted"," *"," * @example"," * // Set ISO week-numbering year 2007 to 29 December 2008:"," * var result = setISOYear(new Date(2008, 11, 29), 2007)"," * //=> Mon Jan 01 2007 00:00:00"," */","function setISOYear (dirtyDate, dirtyISOYear) {","  var date = parse(dirtyDate)","  var isoYear = Number(dirtyISOYear)","  var diff = differenceInCalendarDays(date, startOfISOYear(date))","  var fourthOfJanuary = new Date(0)","  fourthOfJanuary.setFullYear(isoYear, 0, 4)","  fourthOfJanuary.setHours(0, 0, 0, 0)","  date = startOfISOYear(fourthOfJanuary)","  date.setDate(date.getDate() + diff)","  return date","}","","module.exports = setISOYear",""],"l":{"1":1,"2":1,"3":1,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"36":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_iso_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_iso_year/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfISOYear","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":23,"column":0},"end":{"line":30,"column":1}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":34}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":35}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":41}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":38}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":44}},"9":{"start":{"line":29,"column":2},"end":{"line":29,"column":13}},"10":{"start":{"line":32,"column":0},"end":{"line":32,"column":31}}},"branchMap":{},"code":["var getISOYear = require('../get_iso_year/index.js')","var startOfISOWeek = require('../start_of_iso_week/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Return the start of an ISO week-numbering year for the given date."," *"," * @description"," * Return the start of an ISO week-numbering year,"," * which always starts 3 days before the year's first Thursday."," * The result will be in the local timezone."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of an ISO year"," *"," * @example"," * // The start of an ISO week-numbering year for 2 July 2005:"," * var result = startOfISOYear(new Date(2005, 6, 2))"," * //=> Mon Jan 03 2005 00:00:00"," */","function startOfISOYear (dirtyDate) {","  var year = getISOYear(dirtyDate)","  var fourthOfJanuary = new Date(0)","  fourthOfJanuary.setFullYear(year, 0, 4)","  fourthOfJanuary.setHours(0, 0, 0, 0)","  var date = startOfISOWeek(fourthOfJanuary)","  return date","}","","module.exports = startOfISOYear",""],"l":{"1":1,"2":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"32":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_days/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_days/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInCalendarDays","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":66}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}},"4":{"start":{"line":26,"column":0},"end":{"line":39,"column":1}},"5":{"start":{"line":27,"column":2},"end":{"line":27,"column":48}},"6":{"start":{"line":28,"column":2},"end":{"line":28,"column":50}},"7":{"start":{"line":30,"column":2},"end":{"line":31,"column":63}},"8":{"start":{"line":32,"column":2},"end":{"line":33,"column":64}},"9":{"start":{"line":38,"column":2},"end":{"line":38,"column":75}},"10":{"start":{"line":41,"column":0},"end":{"line":41,"column":41}}},"branchMap":{},"code":["var startOfDay = require('../start_of_day/index.js')","","var MILLISECONDS_IN_MINUTE = 60000","var MILLISECONDS_IN_DAY = 86400000","","/**"," * @category Day Helpers"," * @summary Get the number of calendar days between the given dates."," *"," * @description"," * Get the number of calendar days between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of calendar days"," *"," * @example"," * // How many calendar days are between"," * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?"," * var result = differenceInCalendarDays("," *   new Date(2012, 6, 2, 0, 0),"," *   new Date(2011, 6, 2, 23, 0)"," * )"," * //=> 366"," */","function differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {","  var startOfDayLeft = startOfDay(dirtyDateLeft)","  var startOfDayRight = startOfDay(dirtyDateRight)","","  var timestampLeft = startOfDayLeft.getTime() -","    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE","  var timestampRight = startOfDayRight.getTime() -","    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE","","  // Round the number of days to the nearest integer","  // because the number of milliseconds in a day is not constant","  // (e.g. it's different in the day of the daylight saving time clock shift)","  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)","}","","module.exports = differenceInCalendarDays",""],"l":{"1":1,"3":1,"4":1,"26":1,"27":0,"28":0,"30":0,"32":0,"38":0,"41":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_day/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfDay","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":27}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Day Helpers"," * @summary Return the start of a day for the given date."," *"," * @description"," * Return the start of a day for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of a day"," *"," * @example"," * // The start of a day for 2 September 2014 11:55:00:"," * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Tue Sep 02 2014 00:00:00"," */","function startOfDay (dirtyDate) {","  var date = parse(dirtyDate)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = startOfDay",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_minutes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_minutes/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addMinutes","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":45}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":21,"column":0},"end":{"line":24,"column":1}},"4":{"start":{"line":22,"column":2},"end":{"line":22,"column":34}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":68}},"6":{"start":{"line":26,"column":0},"end":{"line":26,"column":27}}},"branchMap":{},"code":["var addMilliseconds = require('../add_milliseconds/index.js')","","var MILLISECONDS_IN_MINUTE = 60000","","/**"," * @category Minute Helpers"," * @summary Add the specified number of minutes to the given date."," *"," * @description"," * Add the specified number of minutes to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of minutes to be added"," * @returns {Date} the new date with the minutes added"," *"," * @example"," * // Add 30 minutes to 10 July 2014 12:00:00:"," * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)"," * //=> Thu Jul 10 2014 12:30:00"," */","function addMinutes (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE)","}","","module.exports = addMinutes",""],"l":{"1":1,"3":1,"21":1,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_months/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_months/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addMonths","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":44}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":20,"column":0},"end":{"line":32,"column":1}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":34}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":45}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":40}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":71}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":43}},"10":{"start":{"line":27,"column":2},"end":{"line":27,"column":56}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":68}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":13}},"13":{"start":{"line":34,"column":0},"end":{"line":34,"column":26}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var getDaysInMonth = require('../get_days_in_month/index.js')","","/**"," * @category Month Helpers"," * @summary Add the specified number of months to the given date."," *"," * @description"," * Add the specified number of months to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of months to be added"," * @returns {Date} the new date with the months added"," *"," * @example"," * // Add 5 months to 1 September 2014:"," * var result = addMonths(new Date(2014, 8, 1), 5)"," * //=> Sun Feb 01 2015 00:00:00"," */","function addMonths (dirtyDate, dirtyAmount) {","  var date = parse(dirtyDate)","  var amount = Number(dirtyAmount)","  var desiredMonth = date.getMonth() + amount","  var dateWithDesiredMonth = new Date(0)","  dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1)","  dateWithDesiredMonth.setHours(0, 0, 0, 0)","  var daysInMonth = getDaysInMonth(dateWithDesiredMonth)","  // Set the last day of the new month","  // if the original date was the last day of the longer month","  date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()))","  return date","}","","module.exports = addMonths",""],"l":{"1":1,"2":1,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"30":0,"31":0,"34":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_days_in_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_days_in_month/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getDaysInMonth","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":36}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":31}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":34}},"6":{"start":{"line":22,"column":2},"end":{"line":22,"column":34}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":53}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":37}},"9":{"start":{"line":25,"column":2},"end":{"line":25,"column":33}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":31}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Get the number of days in a month of the given date."," *"," * @description"," * Get the number of days in a month of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the number of days in a month"," *"," * @example"," * // How many days are in February 2000?"," * var result = getDaysInMonth(new Date(2000, 1))"," * //=> 29"," */","function getDaysInMonth (dirtyDate) {","  var date = parse(dirtyDate)","  var year = date.getFullYear()","  var monthIndex = date.getMonth()","  var lastDayOfMonth = new Date(0)","  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0)","  lastDayOfMonth.setHours(0, 0, 0, 0)","  return lastDayOfMonth.getDate()","}","","module.exports = getDaysInMonth",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_quarters/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_quarters/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addQuarters","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":49}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":25}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":37}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":28}}},"branchMap":{},"code":["var addMonths = require('../add_months/index.js')","","/**"," * @category Quarter Helpers"," * @summary Add the specified number of year quarters to the given date."," *"," * @description"," * Add the specified number of year quarters to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of quarters to be added"," * @returns {Date} the new date with the quarters added"," *"," * @example"," * // Add 1 quarter to 1 September 2014:"," * var result = addQuarters(new Date(2014, 8, 1), 1)"," * //=> Mon Dec 01 2014 00:00:00"," */","function addQuarters (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  var months = amount * 3","  return addMonths(dirtyDate, months)","}","","module.exports = addQuarters",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_seconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_seconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addSeconds","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":45}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":50}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{},"code":["var addMilliseconds = require('../add_milliseconds/index.js')","","/**"," * @category Second Helpers"," * @summary Add the specified number of seconds to the given date."," *"," * @description"," * Add the specified number of seconds to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of seconds to be added"," * @returns {Date} the new date with the seconds added"," *"," * @example"," * // Add 30 seconds to 10 July 2014 12:45:00:"," * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)"," * //=> Thu Jul 10 2014 12:45:30"," */","function addSeconds (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addMilliseconds(dirtyDate, amount * 1000)","}","","module.exports = addSeconds",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_weeks/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_weeks/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addWeeks","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":23}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":33}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":25}}},"branchMap":{},"code":["var addDays = require('../add_days/index.js')","","/**"," * @category Week Helpers"," * @summary Add the specified number of weeks to the given date."," *"," * @description"," * Add the specified number of week to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of weeks to be added"," * @returns {Date} the new date with the weeks added"," *"," * @example"," * // Add 4 weeks to 1 September 2014:"," * var result = addWeeks(new Date(2014, 8, 1), 4)"," * //=> Mon Sep 29 2014 00:00:00"," */","function addWeeks (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  var days = amount * 7","  return addDays(dirtyDate, days)","}","","module.exports = addWeeks",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/add_years/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addYears","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":49}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":42}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":25}}},"branchMap":{},"code":["var addMonths = require('../add_months/index.js')","","/**"," * @category Year Helpers"," * @summary Add the specified number of years to the given date."," *"," * @description"," * Add the specified number of years to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of years to be added"," * @returns {Date} the new date with the years added"," *"," * @example"," * // Add 5 years to 1 September 2014:"," * var result = addYears(new Date(2014, 8, 1), 5)"," * //=> Sun Sep 01 2019 00:00:00"," */","function addYears (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addMonths(dirtyDate, amount * 12)","}","","module.exports = addYears",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/are_ranges_overlapping/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/are_ranges_overlapping/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"areRangesOverlapping","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":141}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":31,"column":0},"end":{"line":42,"column":1}},"3":{"start":{"line":32,"column":2},"end":{"line":32,"column":68}},"4":{"start":{"line":33,"column":2},"end":{"line":33,"column":64}},"5":{"start":{"line":34,"column":2},"end":{"line":34,"column":70}},"6":{"start":{"line":35,"column":2},"end":{"line":35,"column":66}},"7":{"start":{"line":37,"column":2},"end":{"line":39,"column":3}},"8":{"start":{"line":38,"column":4},"end":{"line":38,"column":82}},"9":{"start":{"line":41,"column":2},"end":{"line":41,"column":81}},"10":{"start":{"line":44,"column":0},"end":{"line":44,"column":37}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"2":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":39}},{"start":{"line":37,"column":43},"end":{"line":37,"column":78}}]},"3":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":9},"end":{"line":41,"column":43}},{"start":{"line":41,"column":47},"end":{"line":41,"column":81}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Range Helpers"," * @summary Is the given date range overlapping with another date range?"," *"," * @description"," * Is the given date range overlapping with another date range?"," *"," * @param {Date|String|Number} initialRangeStartDate - the start of the initial range"," * @param {Date|String|Number} initialRangeEndDate - the end of the initial range"," * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with"," * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with"," * @returns {Boolean} whether the date ranges are overlapping"," * @throws {Error} startDate of a date range cannot be after its endDate"," *"," * @example"," * // For overlapping date ranges:"," * areRangesOverlapping("," *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)"," * )"," * //=> true"," *"," * @example"," * // For non-overlapping date ranges:"," * areRangesOverlapping("," *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)"," * )"," * //=> false"," */","function areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {","  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()","  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()","  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()","  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()","","  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {","    throw new Error('The start of the range cannot be after the end of the range')","  }","","  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime","}","","module.exports = areRangesOverlapping",""],"l":{"1":1,"31":1,"32":0,"33":0,"34":0,"35":0,"37":0,"38":0,"41":0,"44":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/closest_index_to/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/closest_index_to/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"closestIndexTo","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":62}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":26},"end":{"line":37,"column":54}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":26,"column":0},"end":{"line":47,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":29,"column":3}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":88}},"5":{"start":{"line":31,"column":2},"end":{"line":31,"column":47}},"6":{"start":{"line":32,"column":2},"end":{"line":32,"column":45}},"7":{"start":{"line":34,"column":2},"end":{"line":34,"column":12}},"8":{"start":{"line":35,"column":2},"end":{"line":35,"column":17}},"9":{"start":{"line":37,"column":2},"end":{"line":44,"column":4}},"10":{"start":{"line":38,"column":4},"end":{"line":38,"column":38}},"11":{"start":{"line":39,"column":4},"end":{"line":39,"column":66}},"12":{"start":{"line":40,"column":4},"end":{"line":43,"column":5}},"13":{"start":{"line":41,"column":6},"end":{"line":41,"column":20}},"14":{"start":{"line":42,"column":6},"end":{"line":42,"column":28}},"15":{"start":{"line":46,"column":2},"end":{"line":46,"column":15}},"16":{"start":{"line":49,"column":0},"end":{"line":49,"column":31}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"3":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":28}},{"start":{"line":40,"column":32},"end":{"line":40,"column":54}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Return an index of the closest date from the array comparing to the given date."," *"," * @description"," * Return an index of the closest date from the array comparing to the given date."," *"," * @param {Date|String|Number} dateToCompare - the date to compare with"," * @param {Date[]|String[]|Number[]} datesArray - the array to search"," * @returns {Number} an index of the date closest to the given date"," * @throws {TypeError} the second argument must be an instance of Array"," *"," * @example"," * // Which date is closer to 6 September 2015?"," * var dateToCompare = new Date(2015, 8, 6)"," * var datesArray = ["," *   new Date(2015, 0, 1),"," *   new Date(2016, 0, 1),"," *   new Date(2017, 0, 1)"," * ]"," * var result = closestIndexTo(dateToCompare, datesArray)"," * //=> 1"," */","function closestIndexTo (dirtyDateToCompare, dirtyDatesArray) {","  if (!(dirtyDatesArray instanceof Array)) {","    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')","  }","","  var dateToCompare = parse(dirtyDateToCompare)","  var timeToCompare = dateToCompare.getTime()","","  var result","  var minDistance","","  dirtyDatesArray.forEach(function (dirtyDate, index) {","    var currentDate = parse(dirtyDate)","    var distance = Math.abs(timeToCompare - currentDate.getTime())","    if (result === undefined || distance < minDistance) {","      result = index","      minDistance = distance","    }","  })","","  return result","}","","module.exports = closestIndexTo",""],"l":{"1":1,"26":1,"27":0,"28":0,"31":0,"32":0,"34":0,"35":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"46":0,"49":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/closest_to/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/closest_to/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"closestTo","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":57}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":26},"end":{"line":35,"column":47}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":24,"column":0},"end":{"line":45,"column":1}},"3":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":88}},"5":{"start":{"line":29,"column":2},"end":{"line":29,"column":47}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":45}},"7":{"start":{"line":32,"column":2},"end":{"line":32,"column":12}},"8":{"start":{"line":33,"column":2},"end":{"line":33,"column":17}},"9":{"start":{"line":35,"column":2},"end":{"line":42,"column":4}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":38}},"11":{"start":{"line":37,"column":4},"end":{"line":37,"column":66}},"12":{"start":{"line":38,"column":4},"end":{"line":41,"column":5}},"13":{"start":{"line":39,"column":6},"end":{"line":39,"column":26}},"14":{"start":{"line":40,"column":6},"end":{"line":40,"column":28}},"15":{"start":{"line":44,"column":2},"end":{"line":44,"column":15}},"16":{"start":{"line":47,"column":0},"end":{"line":47,"column":26}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":4}},{"start":{"line":38,"column":4},"end":{"line":38,"column":4}}]},"3":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":28}},{"start":{"line":38,"column":32},"end":{"line":38,"column":54}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Return a date from the array closest to the given date."," *"," * @description"," * Return a date from the array closest to the given date."," *"," * @param {Date|String|Number} dateToCompare - the date to compare with"," * @param {Date[]|String[]|Number[]} datesArray - the array to search"," * @returns {Date} the date from the array closest to the given date"," * @throws {TypeError} the second argument must be an instance of Array"," *"," * @example"," * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?"," * var dateToCompare = new Date(2015, 8, 6)"," * var result = closestTo(dateToCompare, ["," *   new Date(2000, 0, 1),"," *   new Date(2030, 0, 1)"," * ])"," * //=> Tue Jan 01 2030 00:00:00"," */","function closestTo (dirtyDateToCompare, dirtyDatesArray) {","  if (!(dirtyDatesArray instanceof Array)) {","    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')","  }","","  var dateToCompare = parse(dirtyDateToCompare)","  var timeToCompare = dateToCompare.getTime()","","  var result","  var minDistance","","  dirtyDatesArray.forEach(function (dirtyDate) {","    var currentDate = parse(dirtyDate)","    var distance = Math.abs(timeToCompare - currentDate.getTime())","    if (result === undefined || distance < minDistance) {","      result = currentDate","      minDistance = distance","    }","  })","","  return result","}","","module.exports = closestTo",""],"l":{"1":1,"24":1,"25":0,"26":0,"29":0,"30":0,"32":0,"33":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"44":0,"47":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/compare_asc/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/compare_asc/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"compareAsc","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":52}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":36,"column":0},"end":{"line":49,"column":1}},"3":{"start":{"line":37,"column":2},"end":{"line":37,"column":37}},"4":{"start":{"line":38,"column":2},"end":{"line":38,"column":35}},"5":{"start":{"line":39,"column":2},"end":{"line":39,"column":39}},"6":{"start":{"line":40,"column":2},"end":{"line":40,"column":37}},"7":{"start":{"line":42,"column":2},"end":{"line":48,"column":3}},"8":{"start":{"line":43,"column":4},"end":{"line":43,"column":13}},"9":{"start":{"line":44,"column":9},"end":{"line":48,"column":3}},"10":{"start":{"line":45,"column":4},"end":{"line":45,"column":12}},"11":{"start":{"line":47,"column":4},"end":{"line":47,"column":12}},"12":{"start":{"line":51,"column":0},"end":{"line":51,"column":27}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":9},"end":{"line":44,"column":9}},{"start":{"line":44,"column":9},"end":{"line":44,"column":9}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Compare the two dates and return -1, 0 or 1."," *"," * @description"," * Compare the two dates and return 1 if the first date is after the second,"," * -1 if the first date is before the second or 0 if dates are equal."," *"," * @param {Date|String|Number} dateLeft - the first date to compare"," * @param {Date|String|Number} dateRight - the second date to compare"," * @returns {Number} the result of the comparison"," *"," * @example"," * // Compare 11 February 1987 and 10 July 1989:"," * var result = compareAsc("," *   new Date(1987, 1, 11),"," *   new Date(1989, 6, 10)"," * )"," * //=> -1"," *"," * @example"," * // Sort the array of dates:"," * var result = ["," *   new Date(1995, 6, 2),"," *   new Date(1987, 1, 11),"," *   new Date(1989, 6, 10)"," * ].sort(compareAsc)"," * //=> ["," * //   Wed Feb 11 1987 00:00:00,"," * //   Mon Jul 10 1989 00:00:00,"," * //   Sun Jul 02 1995 00:00:00"," * // ]"," */","function compareAsc (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var timeLeft = dateLeft.getTime()","  var dateRight = parse(dirtyDateRight)","  var timeRight = dateRight.getTime()","","  if (timeLeft < timeRight) {","    return -1","  } else if (timeLeft > timeRight) {","    return 1","  } else {","    return 0","  }","}","","module.exports = compareAsc",""],"l":{"1":1,"36":1,"37":0,"38":0,"39":0,"40":0,"42":0,"43":0,"44":0,"45":0,"47":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/compare_desc/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/compare_desc/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"compareDesc","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":36,"column":0},"end":{"line":49,"column":1}},"3":{"start":{"line":37,"column":2},"end":{"line":37,"column":37}},"4":{"start":{"line":38,"column":2},"end":{"line":38,"column":35}},"5":{"start":{"line":39,"column":2},"end":{"line":39,"column":39}},"6":{"start":{"line":40,"column":2},"end":{"line":40,"column":37}},"7":{"start":{"line":42,"column":2},"end":{"line":48,"column":3}},"8":{"start":{"line":43,"column":4},"end":{"line":43,"column":13}},"9":{"start":{"line":44,"column":9},"end":{"line":48,"column":3}},"10":{"start":{"line":45,"column":4},"end":{"line":45,"column":12}},"11":{"start":{"line":47,"column":4},"end":{"line":47,"column":12}},"12":{"start":{"line":51,"column":0},"end":{"line":51,"column":28}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":9},"end":{"line":44,"column":9}},{"start":{"line":44,"column":9},"end":{"line":44,"column":9}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Compare the two dates reverse chronologically and return -1, 0 or 1."," *"," * @description"," * Compare the two dates and return -1 if the first date is after the second,"," * 1 if the first date is before the second or 0 if dates are equal."," *"," * @param {Date|String|Number} dateLeft - the first date to compare"," * @param {Date|String|Number} dateRight - the second date to compare"," * @returns {Number} the result of the comparison"," *"," * @example"," * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:"," * var result = compareDesc("," *   new Date(1987, 1, 11),"," *   new Date(1989, 6, 10)"," * )"," * //=> 1"," *"," * @example"," * // Sort the array of dates in reverse chronological order:"," * var result = ["," *   new Date(1995, 6, 2),"," *   new Date(1987, 1, 11),"," *   new Date(1989, 6, 10)"," * ].sort(compareDesc)"," * //=> ["," * //   Sun Jul 02 1995 00:00:00,"," * //   Mon Jul 10 1989 00:00:00,"," * //   Wed Feb 11 1987 00:00:00"," * // ]"," */","function compareDesc (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var timeLeft = dateLeft.getTime()","  var dateRight = parse(dirtyDateRight)","  var timeRight = dateRight.getTime()","","  if (timeLeft > timeRight) {","    return -1","  } else if (timeLeft < timeRight) {","    return 1","  } else {","    return 0","  }","}","","module.exports = compareDesc",""],"l":{"1":1,"36":1,"37":0,"38":0,"39":0,"40":0,"42":0,"43":0,"44":0,"45":0,"47":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_iso_weeks/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_iso_weeks/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInCalendarISOWeeks","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":70}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":36}},"4":{"start":{"line":27,"column":0},"end":{"line":40,"column":1}},"5":{"start":{"line":28,"column":2},"end":{"line":28,"column":56}},"6":{"start":{"line":29,"column":2},"end":{"line":29,"column":58}},"7":{"start":{"line":31,"column":2},"end":{"line":32,"column":67}},"8":{"start":{"line":33,"column":2},"end":{"line":34,"column":68}},"9":{"start":{"line":39,"column":2},"end":{"line":39,"column":76}},"10":{"start":{"line":42,"column":0},"end":{"line":42,"column":45}}},"branchMap":{},"code":["var startOfISOWeek = require('../start_of_iso_week/index.js')","","var MILLISECONDS_IN_MINUTE = 60000","var MILLISECONDS_IN_WEEK = 604800000","","/**"," * @category ISO Week Helpers"," * @summary Get the number of calendar ISO weeks between the given dates."," *"," * @description"," * Get the number of calendar ISO weeks between the given dates."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of calendar ISO weeks"," *"," * @example"," * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?"," * var result = differenceInCalendarISOWeeks("," *   new Date(2014, 6, 21),"," *   new Date(2014, 6, 6)"," * )"," * //=> 3"," */","function differenceInCalendarISOWeeks (dirtyDateLeft, dirtyDateRight) {","  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft)","  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight)","","  var timestampLeft = startOfISOWeekLeft.getTime() -","    startOfISOWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE","  var timestampRight = startOfISOWeekRight.getTime() -","    startOfISOWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE","","  // Round the number of days to the nearest integer","  // because the number of milliseconds in a week is not constant","  // (e.g. it's different in the week of the daylight saving time clock shift)","  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK)","}","","module.exports = differenceInCalendarISOWeeks",""],"l":{"1":1,"3":1,"4":1,"27":1,"28":0,"29":0,"31":0,"33":0,"39":0,"42":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_iso_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_iso_years/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInCalendarISOYears","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":70}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":25,"column":2},"end":{"line":25,"column":63}},"4":{"start":{"line":28,"column":0},"end":{"line":28,"column":45}}},"branchMap":{},"code":["var getISOYear = require('../get_iso_year/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Get the number of calendar ISO week-numbering years between the given dates."," *"," * @description"," * Get the number of calendar ISO week-numbering years between the given dates."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of calendar ISO week-numbering years"," *"," * @example"," * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?"," * var result = differenceInCalendarISOYears("," *   new Date(2012, 0, 1),"," *   new Date(2010, 0, 1)"," * )"," * //=> 2"," */","function differenceInCalendarISOYears (dirtyDateLeft, dirtyDateRight) {","  return getISOYear(dirtyDateLeft) - getISOYear(dirtyDateRight)","}","","module.exports = differenceInCalendarISOYears",""],"l":{"1":1,"24":1,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_months/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_months/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInCalendarMonths","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":68}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":22,"column":0},"end":{"line":30,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":37}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":39}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":65}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":60}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":34}},"8":{"start":{"line":32,"column":0},"end":{"line":32,"column":43}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Get the number of calendar months between the given dates."," *"," * @description"," * Get the number of calendar months between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of calendar months"," *"," * @example"," * // How many calendar months are between 31 January 2014 and 1 September 2014?"," * var result = differenceInCalendarMonths("," *   new Date(2014, 8, 1),"," *   new Date(2014, 0, 31)"," * )"," * //=> 8"," */","function differenceInCalendarMonths (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","","  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear()","  var monthDiff = dateLeft.getMonth() - dateRight.getMonth()","","  return yearDiff * 12 + monthDiff","}","","module.exports = differenceInCalendarMonths",""],"l":{"1":1,"22":1,"23":0,"24":0,"26":0,"27":0,"29":0,"32":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_quarters/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_quarters/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInCalendarQuarters","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":70}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":51}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":40}},"3":{"start":{"line":23,"column":0},"end":{"line":31,"column":1}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":37}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":39}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":65}},"7":{"start":{"line":28,"column":2},"end":{"line":28,"column":64}},"8":{"start":{"line":30,"column":2},"end":{"line":30,"column":35}},"9":{"start":{"line":33,"column":0},"end":{"line":33,"column":45}}},"branchMap":{},"code":["var getQuarter = require('../get_quarter/index.js')","var parse = require('../parse/index.js')","","/**"," * @category Quarter Helpers"," * @summary Get the number of calendar quarters between the given dates."," *"," * @description"," * Get the number of calendar quarters between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of calendar quarters"," *"," * @example"," * // How many calendar quarters are between 31 December 2013 and 2 July 2014?"," * var result = differenceInCalendarQuarters("," *   new Date(2014, 6, 2),"," *   new Date(2013, 11, 31)"," * )"," * //=> 3"," */","function differenceInCalendarQuarters (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","","  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear()","  var quarterDiff = getQuarter(dateLeft) - getQuarter(dateRight)","","  return yearDiff * 4 + quarterDiff","}","","module.exports = differenceInCalendarQuarters",""],"l":{"1":1,"2":1,"23":1,"24":0,"25":0,"27":0,"28":0,"30":0,"33":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_quarter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_quarter/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getQuarter","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":51}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":16}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Quarter Helpers"," * @summary Get the year quarter of the given date."," *"," * @description"," * Get the year quarter of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the quarter"," *"," * @example"," * // Which quarter is 2 July 2014?"," * var result = getQuarter(new Date(2014, 6, 2))"," * //=> 3"," */","function getQuarter (dirtyDate) {","  var date = parse(dirtyDate)","  var quarter = Math.floor(date.getMonth() / 3) + 1","  return quarter","}","","module.exports = getQuarter",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_weeks/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_weeks/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInCalendarWeeks","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":81}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":54}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":36}},"4":{"start":{"line":37,"column":0},"end":{"line":50,"column":1}},"5":{"start":{"line":38,"column":2},"end":{"line":38,"column":64}},"6":{"start":{"line":39,"column":2},"end":{"line":39,"column":66}},"7":{"start":{"line":41,"column":2},"end":{"line":42,"column":64}},"8":{"start":{"line":43,"column":2},"end":{"line":44,"column":65}},"9":{"start":{"line":49,"column":2},"end":{"line":49,"column":76}},"10":{"start":{"line":52,"column":0},"end":{"line":52,"column":42}}},"branchMap":{},"code":["var startOfWeek = require('../start_of_week/index.js')","","var MILLISECONDS_IN_MINUTE = 60000","var MILLISECONDS_IN_WEEK = 604800000","","/**"," * @category Week Helpers"," * @summary Get the number of calendar weeks between the given dates."," *"," * @description"," * Get the number of calendar weeks between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @param {Object} [options] - the object with options"," * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)"," * @returns {Number} the number of calendar weeks"," *"," * @example"," * // How many calendar weeks are between 5 July 2014 and 20 July 2014?"," * var result = differenceInCalendarWeeks("," *   new Date(2014, 6, 20),"," *   new Date(2014, 6, 5)"," * )"," * //=> 3"," *"," * @example"," * // If the week starts on Monday,"," * // how many calendar weeks are between 5 July 2014 and 20 July 2014?"," * var result = differenceInCalendarWeeks("," *   new Date(2014, 6, 20),"," *   new Date(2014, 6, 5),"," *   {weekStartsOn: 1}"," * )"," * //=> 2"," */","function differenceInCalendarWeeks (dirtyDateLeft, dirtyDateRight, dirtyOptions) {","  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions)","  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions)","","  var timestampLeft = startOfWeekLeft.getTime() -","    startOfWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE","  var timestampRight = startOfWeekRight.getTime() -","    startOfWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE","","  // Round the number of days to the nearest integer","  // because the number of milliseconds in a week is not constant","  // (e.g. it's different in the week of the daylight saving time clock shift)","  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK)","}","","module.exports = differenceInCalendarWeeks",""],"l":{"1":1,"3":1,"4":1,"37":1,"38":0,"39":0,"41":0,"43":0,"49":0,"52":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_calendar_years/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInCalendarYears","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":67}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":22,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":37}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":39}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":57}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":42}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Get the number of calendar years between the given dates."," *"," * @description"," * Get the number of calendar years between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of calendar years"," *"," * @example"," * // How many calendar years are between 31 December 2013 and 11 February 2015?"," * var result = differenceInCalendarYears("," *   new Date(2015, 1, 11),"," *   new Date(2013, 11, 31)"," * )"," * //=> 2"," */","function differenceInCalendarYears (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","","  return dateLeft.getFullYear() - dateRight.getFullYear()","}","","module.exports = differenceInCalendarYears",""],"l":{"1":1,"22":1,"23":0,"24":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_days/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_days/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInDays","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":58}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":81}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"4":{"start":{"line":25,"column":0},"end":{"line":37,"column":1}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":37}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":39}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":44}},"8":{"start":{"line":30,"column":2},"end":{"line":30,"column":74}},"9":{"start":{"line":31,"column":2},"end":{"line":31,"column":58}},"10":{"start":{"line":35,"column":2},"end":{"line":35,"column":66}},"11":{"start":{"line":36,"column":2},"end":{"line":36,"column":47}},"12":{"start":{"line":39,"column":0},"end":{"line":39,"column":33}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var differenceInCalendarDays = require('../difference_in_calendar_days/index.js')","var compareAsc = require('../compare_asc/index.js')","","/**"," * @category Day Helpers"," * @summary Get the number of full days between the given dates."," *"," * @description"," * Get the number of full days between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of full days"," *"," * @example"," * // How many full days are between"," * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?"," * var result = differenceInDays("," *   new Date(2012, 6, 2, 0, 0),"," *   new Date(2011, 6, 2, 23, 0)"," * )"," * //=> 365"," */","function differenceInDays (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","","  var sign = compareAsc(dateLeft, dateRight)","  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight))","  dateLeft.setDate(dateLeft.getDate() - sign * difference)","","  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full","  // If so, result must be decreased by 1 in absolute value","  var isLastDayNotFull = compareAsc(dateLeft, dateRight) === -sign","  return sign * (difference - isLastDayNotFull)","}","","module.exports = differenceInDays",""],"l":{"1":1,"2":1,"3":1,"25":1,"26":0,"27":0,"29":0,"30":0,"31":0,"35":0,"36":0,"39":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_hours/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_hours/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"differenceInHours","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":59}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":80}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":24,"column":0},"end":{"line":27,"column":1}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":91}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":54}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}}},"branchMap":{"1":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":20},"end":{"line":26,"column":36}},{"start":{"line":26,"column":39},"end":{"line":26,"column":54}}]}},"code":["var differenceInMilliseconds = require('../difference_in_milliseconds/index.js')","","var MILLISECONDS_IN_HOUR = 3600000","","/**"," * @category Hour Helpers"," * @summary Get the number of hours between the given dates."," *"," * @description"," * Get the number of hours between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of hours"," *"," * @example"," * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?"," * var result = differenceInHours("," *   new Date(2014, 6, 2, 19, 0),"," *   new Date(2014, 6, 2, 6, 50)"," * )"," * //=> 12"," */","function differenceInHours (dirtyDateLeft, dirtyDateRight) {","  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR","  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)","}","","module.exports = differenceInHours",""],"l":{"1":1,"3":1,"24":1,"25":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_milliseconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_milliseconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInMilliseconds","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":66}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":23,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":37}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":39}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":49}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":41}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Millisecond Helpers"," * @summary Get the number of milliseconds between the given dates."," *"," * @description"," * Get the number of milliseconds between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of milliseconds"," *"," * @example"," * // How many milliseconds are between"," * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?"," * var result = differenceInMilliseconds("," *   new Date(2014, 6, 2, 12, 30, 21, 700),"," *   new Date(2014, 6, 2, 12, 30, 20, 600)"," * )"," * //=> 1100"," */","function differenceInMilliseconds (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","  return dateLeft.getTime() - dateRight.getTime()","}","","module.exports = differenceInMilliseconds",""],"l":{"1":1,"23":1,"24":0,"25":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_iso_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_iso_years/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInISOYears","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":62}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":90}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"5":{"start":{"line":27,"column":0},"end":{"line":40,"column":1}},"6":{"start":{"line":28,"column":2},"end":{"line":28,"column":37}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":39}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":44}},"9":{"start":{"line":32,"column":2},"end":{"line":32,"column":78}},"10":{"start":{"line":33,"column":2},"end":{"line":33,"column":53}},"11":{"start":{"line":38,"column":2},"end":{"line":38,"column":70}},"12":{"start":{"line":39,"column":2},"end":{"line":39,"column":51}},"13":{"start":{"line":42,"column":0},"end":{"line":42,"column":37}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var differenceInCalendarISOYears = require('../difference_in_calendar_iso_years/index.js')","var compareAsc = require('../compare_asc/index.js')","var subISOYears = require('../sub_iso_years/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Get the number of full ISO week-numbering years between the given dates."," *"," * @description"," * Get the number of full ISO week-numbering years between the given dates."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of full ISO week-numbering years"," *"," * @example"," * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?"," * var result = differenceInISOYears("," *   new Date(2012, 0, 1),"," *   new Date(2010, 0, 1)"," * )"," * //=> 1"," */","function differenceInISOYears (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","","  var sign = compareAsc(dateLeft, dateRight)","  var difference = Math.abs(differenceInCalendarISOYears(dateLeft, dateRight))","  dateLeft = subISOYears(dateLeft, sign * difference)","","  // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1","  // if last calendar ISO year is not full","  // If so, result must be decreased by 1 in absolute value","  var isLastISOYearNotFull = compareAsc(dateLeft, dateRight) === -sign","  return sign * (difference - isLastISOYearNotFull)","}","","module.exports = differenceInISOYears",""],"l":{"1":1,"2":1,"3":1,"4":1,"27":1,"28":0,"29":0,"31":0,"32":0,"33":0,"38":0,"39":0,"42":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_iso_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_iso_years/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subISOYears","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":54}},"2":{"start":{"line":21,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":22,"column":2},"end":{"line":22,"column":34}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":40}},"5":{"start":{"line":26,"column":0},"end":{"line":26,"column":28}}},"branchMap":{},"code":["var addISOYears = require('../add_iso_years/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Subtract the specified number of ISO week-numbering years from the given date."," *"," * @description"," * Subtract the specified number of ISO week-numbering years from the given date."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of ISO week-numbering years to be subtracted"," * @returns {Date} the new date with the ISO week-numbering years subtracted"," *"," * @example"," * // Subtract 5 ISO week-numbering years from 1 September 2014:"," * var result = subISOYears(new Date(2014, 8, 1), 5)"," * //=> Mon Aug 31 2009 00:00:00"," */","function subISOYears (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addISOYears(dirtyDate, -amount)","}","","module.exports = subISOYears",""],"l":{"1":1,"21":1,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_minutes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_minutes/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"differenceInMinutes","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":61}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":80}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"3":{"start":{"line":24,"column":0},"end":{"line":27,"column":1}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":93}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":54}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}}},"branchMap":{"1":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":20},"end":{"line":26,"column":36}},{"start":{"line":26,"column":39},"end":{"line":26,"column":54}}]}},"code":["var differenceInMilliseconds = require('../difference_in_milliseconds/index.js')","","var MILLISECONDS_IN_MINUTE = 60000","","/**"," * @category Minute Helpers"," * @summary Get the number of minutes between the given dates."," *"," * @description"," * Get the number of minutes between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of minutes"," *"," * @example"," * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?"," * var result = differenceInMinutes("," *   new Date(2014, 6, 2, 12, 20, 0),"," *   new Date(2014, 6, 2, 12, 7, 59)"," * )"," * //=> 12"," */","function differenceInMinutes (dirtyDateLeft, dirtyDateRight) {","  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE","  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)","}","","module.exports = differenceInMinutes",""],"l":{"1":1,"3":1,"24":1,"25":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_months/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_months/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInMonths","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":60}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":85}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"4":{"start":{"line":24,"column":0},"end":{"line":36,"column":1}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":37}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":39}},"7":{"start":{"line":28,"column":2},"end":{"line":28,"column":44}},"8":{"start":{"line":29,"column":2},"end":{"line":29,"column":76}},"9":{"start":{"line":30,"column":2},"end":{"line":30,"column":60}},"10":{"start":{"line":34,"column":2},"end":{"line":34,"column":68}},"11":{"start":{"line":35,"column":2},"end":{"line":35,"column":49}},"12":{"start":{"line":38,"column":0},"end":{"line":38,"column":35}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var differenceInCalendarMonths = require('../difference_in_calendar_months/index.js')","var compareAsc = require('../compare_asc/index.js')","","/**"," * @category Month Helpers"," * @summary Get the number of full months between the given dates."," *"," * @description"," * Get the number of full months between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of full months"," *"," * @example"," * // How many full months are between 31 January 2014 and 1 September 2014?"," * var result = differenceInMonths("," *   new Date(2014, 8, 1),"," *   new Date(2014, 0, 31)"," * )"," * //=> 7"," */","function differenceInMonths (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","","  var sign = compareAsc(dateLeft, dateRight)","  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight))","  dateLeft.setMonth(dateLeft.getMonth() - sign * difference)","","  // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full","  // If so, result must be decreased by 1 in absolute value","  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign","  return sign * (difference - isLastMonthNotFull)","}","","module.exports = differenceInMonths",""],"l":{"1":1,"2":1,"3":1,"24":1,"25":0,"26":0,"28":0,"29":0,"30":0,"34":0,"35":0,"38":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_quarters/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_quarters/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"differenceInQuarters","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":62}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":68}},"2":{"start":{"line":22,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":66}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":54}},"5":{"start":{"line":27,"column":0},"end":{"line":27,"column":37}}},"branchMap":{"1":{"line":24,"type":"cond-expr","locations":[{"start":{"line":24,"column":20},"end":{"line":24,"column":36}},{"start":{"line":24,"column":39},"end":{"line":24,"column":54}}]}},"code":["var differenceInMonths = require('../difference_in_months/index.js')","","/**"," * @category Quarter Helpers"," * @summary Get the number of full quarters between the given dates."," *"," * @description"," * Get the number of full quarters between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of full quarters"," *"," * @example"," * // How many full quarters are between 31 December 2013 and 2 July 2014?"," * var result = differenceInQuarters("," *   new Date(2014, 6, 2),"," *   new Date(2013, 11, 31)"," * )"," * //=> 2"," */","function differenceInQuarters (dirtyDateLeft, dirtyDateRight) {","  var diff = differenceInMonths(dirtyDateLeft, dirtyDateRight) / 3","  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)","}","","module.exports = differenceInQuarters",""],"l":{"1":1,"22":1,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_seconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_seconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"differenceInSeconds","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":61}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":80}},"2":{"start":{"line":23,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":75}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":54}},"5":{"start":{"line":28,"column":0},"end":{"line":28,"column":36}}},"branchMap":{"1":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":20},"end":{"line":25,"column":36}},{"start":{"line":25,"column":39},"end":{"line":25,"column":54}}]}},"code":["var differenceInMilliseconds = require('../difference_in_milliseconds/index.js')","","/**"," * @category Second Helpers"," * @summary Get the number of seconds between the given dates."," *"," * @description"," * Get the number of seconds between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of seconds"," *"," * @example"," * // How many seconds are between"," * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?"," * var result = differenceInSeconds("," *   new Date(2014, 6, 2, 12, 30, 20, 0),"," *   new Date(2014, 6, 2, 12, 30, 7, 999)"," * )"," * //=> 12"," */","function differenceInSeconds (dirtyDateLeft, dirtyDateRight) {","  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000","  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)","}","","module.exports = differenceInSeconds",""],"l":{"1":1,"23":1,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_weeks/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_weeks/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"differenceInWeeks","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":59}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":64}},"2":{"start":{"line":22,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":64}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":54}},"5":{"start":{"line":27,"column":0},"end":{"line":27,"column":34}}},"branchMap":{"1":{"line":24,"type":"cond-expr","locations":[{"start":{"line":24,"column":20},"end":{"line":24,"column":36}},{"start":{"line":24,"column":39},"end":{"line":24,"column":54}}]}},"code":["var differenceInDays = require('../difference_in_days/index.js')","","/**"," * @category Week Helpers"," * @summary Get the number of full weeks between the given dates."," *"," * @description"," * Get the number of full weeks between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of full weeks"," *"," * @example"," * // How many full weeks are between 5 July 2014 and 20 July 2014?"," * var result = differenceInWeeks("," *   new Date(2014, 6, 20),"," *   new Date(2014, 6, 5)"," * )"," * //=> 2"," */","function differenceInWeeks (dirtyDateLeft, dirtyDateRight) {","  var diff = differenceInDays(dirtyDateLeft, dirtyDateRight) / 7","  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)","}","","module.exports = differenceInWeeks",""],"l":{"1":1,"22":1,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/difference_in_years/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"differenceInYears","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":59}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":83}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"4":{"start":{"line":24,"column":0},"end":{"line":36,"column":1}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":37}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":39}},"7":{"start":{"line":28,"column":2},"end":{"line":28,"column":44}},"8":{"start":{"line":29,"column":2},"end":{"line":29,"column":75}},"9":{"start":{"line":30,"column":2},"end":{"line":30,"column":66}},"10":{"start":{"line":34,"column":2},"end":{"line":34,"column":67}},"11":{"start":{"line":35,"column":2},"end":{"line":35,"column":48}},"12":{"start":{"line":38,"column":0},"end":{"line":38,"column":34}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var differenceInCalendarYears = require('../difference_in_calendar_years/index.js')","var compareAsc = require('../compare_asc/index.js')","","/**"," * @category Year Helpers"," * @summary Get the number of full years between the given dates."," *"," * @description"," * Get the number of full years between the given dates."," *"," * @param {Date|String|Number} dateLeft - the later date"," * @param {Date|String|Number} dateRight - the earlier date"," * @returns {Number} the number of full years"," *"," * @example"," * // How many full years are between 31 December 2013 and 11 February 2015?"," * var result = differenceInYears("," *   new Date(2015, 1, 11),"," *   new Date(2013, 11, 31)"," * )"," * //=> 1"," */","function differenceInYears (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","","  var sign = compareAsc(dateLeft, dateRight)","  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight))","  dateLeft.setFullYear(dateLeft.getFullYear() - sign * difference)","","  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full","  // If so, result must be decreased by 1 in absolute value","  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign","  return sign * (difference - isLastYearNotFull)","}","","module.exports = differenceInYears",""],"l":{"1":1,"2":1,"3":1,"24":1,"25":0,"26":0,"28":0,"29":0,"30":0,"34":0,"35":0,"38":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/distance_in_words/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/distance_in_words/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"distanceInWords","line":94,"loc":{"start":{"line":94,"column":0},"end":{"line":94,"column":71}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":53}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":40}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":70}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":25}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":37}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":28}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":33}},"10":{"start":{"line":94,"column":0},"end":{"line":201,"column":1}},"11":{"start":{"line":95,"column":2},"end":{"line":95,"column":34}},"12":{"start":{"line":97,"column":2},"end":{"line":97,"column":61}},"13":{"start":{"line":99,"column":2},"end":{"line":99,"column":29}},"14":{"start":{"line":100,"column":2},"end":{"line":100,"column":50}},"15":{"start":{"line":101,"column":2},"end":{"line":103,"column":3}},"16":{"start":{"line":102,"column":4},"end":{"line":102,"column":46}},"17":{"start":{"line":105,"column":2},"end":{"line":108,"column":3}},"18":{"start":{"line":110,"column":2},"end":{"line":110,"column":25}},"19":{"start":{"line":111,"column":2},"end":{"line":117,"column":3}},"20":{"start":{"line":112,"column":4},"end":{"line":112,"column":40}},"21":{"start":{"line":113,"column":4},"end":{"line":113,"column":32}},"22":{"start":{"line":115,"column":4},"end":{"line":115,"column":31}},"23":{"start":{"line":116,"column":4},"end":{"line":116,"column":41}},"24":{"start":{"line":119,"column":2},"end":{"line":119,"column":56}},"25":{"start":{"line":120,"column":2},"end":{"line":120,"column":75}},"26":{"start":{"line":121,"column":2},"end":{"line":121,"column":49}},"27":{"start":{"line":122,"column":2},"end":{"line":122,"column":12}},"28":{"start":{"line":125,"column":2},"end":{"line":174,"column":3}},"29":{"start":{"line":126,"column":4},"end":{"line":146,"column":5}},"30":{"start":{"line":127,"column":6},"end":{"line":139,"column":7}},"31":{"start":{"line":128,"column":8},"end":{"line":128,"column":63}},"32":{"start":{"line":129,"column":13},"end":{"line":139,"column":7}},"33":{"start":{"line":130,"column":8},"end":{"line":130,"column":64}},"34":{"start":{"line":131,"column":13},"end":{"line":139,"column":7}},"35":{"start":{"line":132,"column":8},"end":{"line":132,"column":64}},"36":{"start":{"line":133,"column":13},"end":{"line":139,"column":7}},"37":{"start":{"line":134,"column":8},"end":{"line":134,"column":61}},"38":{"start":{"line":135,"column":13},"end":{"line":139,"column":7}},"39":{"start":{"line":136,"column":8},"end":{"line":136,"column":63}},"40":{"start":{"line":138,"column":8},"end":{"line":138,"column":55}},"41":{"start":{"line":141,"column":6},"end":{"line":145,"column":7}},"42":{"start":{"line":142,"column":8},"end":{"line":142,"column":63}},"43":{"start":{"line":144,"column":8},"end":{"line":144,"column":61}},"44":{"start":{"line":149,"column":9},"end":{"line":174,"column":3}},"45":{"start":{"line":150,"column":4},"end":{"line":150,"column":57}},"46":{"start":{"line":153,"column":9},"end":{"line":174,"column":3}},"47":{"start":{"line":154,"column":4},"end":{"line":154,"column":54}},"48":{"start":{"line":157,"column":9},"end":{"line":174,"column":3}},"49":{"start":{"line":158,"column":4},"end":{"line":158,"column":40}},"50":{"start":{"line":159,"column":4},"end":{"line":159,"column":58}},"51":{"start":{"line":162,"column":9},"end":{"line":174,"column":3}},"52":{"start":{"line":163,"column":4},"end":{"line":163,"column":48}},"53":{"start":{"line":166,"column":9},"end":{"line":174,"column":3}},"54":{"start":{"line":167,"column":4},"end":{"line":167,"column":51}},"55":{"start":{"line":168,"column":4},"end":{"line":168,"column":51}},"56":{"start":{"line":171,"column":9},"end":{"line":174,"column":3}},"57":{"start":{"line":172,"column":4},"end":{"line":172,"column":51}},"58":{"start":{"line":173,"column":4},"end":{"line":173,"column":60}},"59":{"start":{"line":176,"column":2},"end":{"line":176,"column":50}},"60":{"start":{"line":179,"column":2},"end":{"line":200,"column":3}},"61":{"start":{"line":180,"column":4},"end":{"line":180,"column":61}},"62":{"start":{"line":181,"column":4},"end":{"line":181,"column":61}},"63":{"start":{"line":185,"column":4},"end":{"line":185,"column":44}},"64":{"start":{"line":186,"column":4},"end":{"line":186,"column":39}},"65":{"start":{"line":189,"column":4},"end":{"line":199,"column":5}},"66":{"start":{"line":190,"column":6},"end":{"line":190,"column":60}},"67":{"start":{"line":193,"column":11},"end":{"line":199,"column":5}},"68":{"start":{"line":194,"column":6},"end":{"line":194,"column":59}},"69":{"start":{"line":198,"column":6},"end":{"line":198,"column":65}},"70":{"start":{"line":203,"column":0},"end":{"line":203,"column":32}}},"branchMap":{"1":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":16},"end":{"line":95,"column":28}},{"start":{"line":95,"column":32},"end":{"line":95,"column":34}}]},"2":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":101,"column":2}},{"start":{"line":101,"column":2},"end":{"line":101,"column":2}}]},"3":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":6},"end":{"line":101,"column":12}},{"start":{"line":101,"column":16},"end":{"line":101,"column":38}},{"start":{"line":101,"column":42},"end":{"line":101,"column":73}}]},"4":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":2},"end":{"line":111,"column":2}},{"start":{"line":111,"column":2},"end":{"line":111,"column":2}}]},"5":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":125,"column":2}},{"start":{"line":125,"column":2},"end":{"line":125,"column":2}}]},"6":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"7":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":6},"end":{"line":127,"column":6}},{"start":{"line":127,"column":6},"end":{"line":127,"column":6}}]},"8":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":13},"end":{"line":129,"column":13}},{"start":{"line":129,"column":13},"end":{"line":129,"column":13}}]},"9":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":13},"end":{"line":131,"column":13}},{"start":{"line":131,"column":13},"end":{"line":131,"column":13}}]},"10":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":13},"end":{"line":133,"column":13}},{"start":{"line":133,"column":13},"end":{"line":133,"column":13}}]},"11":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":13},"end":{"line":135,"column":13}},{"start":{"line":135,"column":13},"end":{"line":135,"column":13}}]},"12":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":6},"end":{"line":141,"column":6}},{"start":{"line":141,"column":6},"end":{"line":141,"column":6}}]},"13":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":9},"end":{"line":149,"column":9}},{"start":{"line":149,"column":9},"end":{"line":149,"column":9}}]},"14":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":9},"end":{"line":153,"column":9}},{"start":{"line":153,"column":9},"end":{"line":153,"column":9}}]},"15":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":9},"end":{"line":157,"column":9}},{"start":{"line":157,"column":9},"end":{"line":157,"column":9}}]},"16":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":9},"end":{"line":162,"column":9}},{"start":{"line":162,"column":9},"end":{"line":162,"column":9}}]},"17":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":9},"end":{"line":166,"column":9}},{"start":{"line":166,"column":9},"end":{"line":166,"column":9}}]},"18":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":9},"end":{"line":171,"column":9}},{"start":{"line":171,"column":9},"end":{"line":171,"column":9}}]},"19":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":2},"end":{"line":179,"column":2}},{"start":{"line":179,"column":2},"end":{"line":179,"column":2}}]},"20":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":4},"end":{"line":189,"column":4}},{"start":{"line":189,"column":4},"end":{"line":189,"column":4}}]},"21":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":11},"end":{"line":193,"column":11}},{"start":{"line":193,"column":11},"end":{"line":193,"column":11}}]}},"code":["var compareDesc = require('../compare_desc/index.js')","var parse = require('../parse/index.js')","var differenceInSeconds = require('../difference_in_seconds/index.js')","var differenceInMonths = require('../difference_in_months/index.js')","var enLocale = require('../locale/en/index.js')","","var MINUTES_IN_DAY = 1440","var MINUTES_IN_ALMOST_TWO_DAYS = 2520","var MINUTES_IN_MONTH = 43200","var MINUTES_IN_TWO_MONTHS = 86400","","/**"," * @category Common Helpers"," * @summary Return the distance between the given dates in words."," *"," * @description"," * Return the distance between the given dates in words."," *"," * | Distance between dates                                            | Result              |"," * |-------------------------------------------------------------------|---------------------|"," * | 0 ... 30 secs                                                     | less than a minute  |"," * | 30 secs ... 1 min 30 secs                                         | 1 minute            |"," * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |"," * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |"," * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |"," * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |"," * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |"," * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |"," * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |"," * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |"," * | 1 yr ... 1 yr 3 months                                            | about 1 year        |"," * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |"," * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |"," * | N yrs ... N yrs 3 months                                          | about N years       |"," * | N yrs 3 months ... N yrs 9 months                                 | over N years        |"," * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |"," *"," * With `options.includeSeconds == true`:"," * | Distance between dates | Result               |"," * |------------------------|----------------------|"," * | 0 secs ... 5 secs      | less than 5 seconds  |"," * | 5 secs ... 10 secs     | less than 10 seconds |"," * | 10 secs ... 20 secs    | less than 20 seconds |"," * | 20 secs ... 40 secs    | half a minute        |"," * | 40 secs ... 60 secs    | less than a minute   |"," * | 60 secs ... 90 secs    | 1 minute             |"," *"," * @param {Date|String|Number} dateToCompare - the date to compare with"," * @param {Date|String|Number} date - the other date"," * @param {Object} [options] - the object with options"," * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed"," * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first"," * @param {Object} [options.locale=enLocale] - the locale object"," * @returns {String} the distance in words"," *"," * @example"," * // What is the distance between 2 July 2014 and 1 January 2015?"," * var result = distanceInWords("," *   new Date(2014, 6, 2),"," *   new Date(2015, 0, 1)"," * )"," * //=> '6 months'"," *"," * @example"," * // What is the distance between 1 January 2015 00:00:15"," * // and 1 January 2015 00:00:00, including seconds?"," * var result = distanceInWords("," *   new Date(2015, 0, 1, 0, 0, 15),"," *   new Date(2015, 0, 1, 0, 0, 0),"," *   {includeSeconds: true}"," * )"," * //=> 'less than 20 seconds'"," *"," * @example"," * // What is the distance from 1 January 2016"," * // to 1 January 2015, with a suffix?"," * var result = distanceInWords("," *   new Date(2016, 0, 1),"," *   new Date(2015, 0, 1),"," *   {addSuffix: true}"," * )"," * //=> 'about 1 year ago'"," *"," * @example"," * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?"," * var eoLocale = require('date-fns/locale/eo')"," * var result = distanceInWords("," *   new Date(2016, 7, 1),"," *   new Date(2015, 0, 1),"," *   {locale: eoLocale}"," * )"," * //=> 'pli ol 1 jaro'"," */","function distanceInWords (dirtyDateToCompare, dirtyDate, dirtyOptions) {","  var options = dirtyOptions || {}","","  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)","","  var locale = options.locale","  var localize = enLocale.distanceInWords.localize","  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {","    localize = locale.distanceInWords.localize","  }","","  var localizeOptions = {","    addSuffix: Boolean(options.addSuffix),","    comparison: comparison","  }","","  var dateLeft, dateRight","  if (comparison > 0) {","    dateLeft = parse(dirtyDateToCompare)","    dateRight = parse(dirtyDate)","  } else {","    dateLeft = parse(dirtyDate)","    dateRight = parse(dirtyDateToCompare)","  }","","  var seconds = differenceInSeconds(dateRight, dateLeft)","  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()","  var minutes = Math.round(seconds / 60) - offset","  var months","","  // 0 up to 2 mins","  if (minutes < 2) {","    if (options.includeSeconds) {","      if (seconds < 5) {","        return localize('lessThanXSeconds', 5, localizeOptions)","      } else if (seconds < 10) {","        return localize('lessThanXSeconds', 10, localizeOptions)","      } else if (seconds < 20) {","        return localize('lessThanXSeconds', 20, localizeOptions)","      } else if (seconds < 40) {","        return localize('halfAMinute', null, localizeOptions)","      } else if (seconds < 60) {","        return localize('lessThanXMinutes', 1, localizeOptions)","      } else {","        return localize('xMinutes', 1, localizeOptions)","      }","    } else {","      if (minutes === 0) {","        return localize('lessThanXMinutes', 1, localizeOptions)","      } else {","        return localize('xMinutes', minutes, localizeOptions)","      }","    }","","  // 2 mins up to 0.75 hrs","  } else if (minutes < 45) {","    return localize('xMinutes', minutes, localizeOptions)","","  // 0.75 hrs up to 1.5 hrs","  } else if (minutes < 90) {","    return localize('aboutXHours', 1, localizeOptions)","","  // 1.5 hrs up to 24 hrs","  } else if (minutes < MINUTES_IN_DAY) {","    var hours = Math.round(minutes / 60)","    return localize('aboutXHours', hours, localizeOptions)","","  // 1 day up to 1.75 days","  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {","    return localize('xDays', 1, localizeOptions)","","  // 1.75 days up to 30 days","  } else if (minutes < MINUTES_IN_MONTH) {","    var days = Math.round(minutes / MINUTES_IN_DAY)","    return localize('xDays', days, localizeOptions)","","  // 1 month up to 2 months","  } else if (minutes < MINUTES_IN_TWO_MONTHS) {","    months = Math.round(minutes / MINUTES_IN_MONTH)","    return localize('aboutXMonths', months, localizeOptions)","  }","","  months = differenceInMonths(dateRight, dateLeft)","","  // 2 months up to 12 months","  if (months < 12) {","    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH)","    return localize('xMonths', nearestMonth, localizeOptions)","","  // 1 year up to max Date","  } else {","    var monthsSinceStartOfYear = months % 12","    var years = Math.floor(months / 12)","","    // N years up to 1 years 3 months","    if (monthsSinceStartOfYear < 3) {","      return localize('aboutXYears', years, localizeOptions)","","    // N years 3 months up to N years 9 months","    } else if (monthsSinceStartOfYear < 9) {","      return localize('overXYears', years, localizeOptions)","","    // N years 9 months up to N year 12 months","    } else {","      return localize('almostXYears', years + 1, localizeOptions)","    }","  }","}","","module.exports = distanceInWords",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"94":1,"95":0,"97":0,"99":0,"100":0,"101":0,"102":0,"105":0,"110":0,"111":0,"112":0,"113":0,"115":0,"116":0,"119":0,"120":0,"121":0,"122":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"138":0,"141":0,"142":0,"144":0,"149":0,"150":0,"153":0,"154":0,"157":0,"158":0,"159":0,"162":0,"163":0,"166":0,"167":0,"168":0,"171":0,"172":0,"173":0,"176":0,"179":0,"180":0,"181":0,"185":0,"186":0,"189":0,"190":0,"193":0,"194":0,"198":0,"203":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/en/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/en/index.js","s":{"1":1,"2":1,"3":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":85}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":65}},"3":{"start":{"line":8,"column":0},"end":{"line":11,"column":1}}},"branchMap":{},"code":["var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')","var buildFormatLocale = require('./build_format_locale/index.js')","","/**"," * @category Locales"," * @summary English locale."," */","module.exports = {","  distanceInWords: buildDistanceInWordsLocale(),","  format: buildFormatLocale()","}",""],"l":{"1":1,"2":1,"8":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"buildDistanceInWordsLocale","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}}},"2":{"name":"localize","line":71,"loc":{"start":{"line":71,"column":2},"end":{"line":71,"column":44}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":97,"column":1}},"2":{"start":{"line":2,"column":2},"end":{"line":69,"column":3}},"3":{"start":{"line":71,"column":2},"end":{"line":92,"column":3}},"4":{"start":{"line":72,"column":4},"end":{"line":72,"column":27}},"5":{"start":{"line":74,"column":4},"end":{"line":74,"column":14}},"6":{"start":{"line":75,"column":4},"end":{"line":81,"column":5}},"7":{"start":{"line":76,"column":6},"end":{"line":76,"column":43}},"8":{"start":{"line":77,"column":11},"end":{"line":81,"column":5}},"9":{"start":{"line":78,"column":6},"end":{"line":78,"column":47}},"10":{"start":{"line":80,"column":6},"end":{"line":80,"column":77}},"11":{"start":{"line":83,"column":4},"end":{"line":89,"column":5}},"12":{"start":{"line":84,"column":6},"end":{"line":88,"column":7}},"13":{"start":{"line":85,"column":8},"end":{"line":85,"column":29}},"14":{"start":{"line":87,"column":8},"end":{"line":87,"column":30}},"15":{"start":{"line":91,"column":4},"end":{"line":91,"column":17}},"16":{"start":{"line":94,"column":2},"end":{"line":96,"column":3}},"17":{"start":{"line":99,"column":0},"end":{"line":99,"column":43}}},"branchMap":{"1":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":14},"end":{"line":72,"column":21}},{"start":{"line":72,"column":25},"end":{"line":72,"column":27}}]},"2":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"3":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":11},"end":{"line":77,"column":11}},{"start":{"line":77,"column":11},"end":{"line":77,"column":11}}]},"4":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"5":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":6}},{"start":{"line":84,"column":6},"end":{"line":84,"column":6}}]}},"code":["function buildDistanceInWordsLocale () {","  var distanceInWordsLocale = {","    lessThanXSeconds: {","      one: 'less than a second',","      other: 'less than {{count}} seconds'","    },","","    xSeconds: {","      one: '1 second',","      other: '{{count}} seconds'","    },","","    halfAMinute: 'half a minute',","","    lessThanXMinutes: {","      one: 'less than a minute',","      other: 'less than {{count}} minutes'","    },","","    xMinutes: {","      one: '1 minute',","      other: '{{count}} minutes'","    },","","    aboutXHours: {","      one: 'about 1 hour',","      other: 'about {{count}} hours'","    },","","    xHours: {","      one: '1 hour',","      other: '{{count}} hours'","    },","","    xDays: {","      one: '1 day',","      other: '{{count}} days'","    },","","    aboutXMonths: {","      one: 'about 1 month',","      other: 'about {{count}} months'","    },","","    xMonths: {","      one: '1 month',","      other: '{{count}} months'","    },","","    aboutXYears: {","      one: 'about 1 year',","      other: 'about {{count}} years'","    },","","    xYears: {","      one: '1 year',","      other: '{{count}} years'","    },","","    overXYears: {","      one: 'over 1 year',","      other: 'over {{count}} years'","    },","","    almostXYears: {","      one: 'almost 1 year',","      other: 'almost {{count}} years'","    }","  }","","  function localize (token, count, options) {","    options = options || {}","","    var result","    if (typeof distanceInWordsLocale[token] === 'string') {","      result = distanceInWordsLocale[token]","    } else if (count === 1) {","      result = distanceInWordsLocale[token].one","    } else {","      result = distanceInWordsLocale[token].other.replace('{{count}}', count)","    }","","    if (options.addSuffix) {","      if (options.comparison > 0) {","        return 'in ' + result","      } else {","        return result + ' ago'","      }","    }","","    return result","  }","","  return {","    localize: localize","  }","}","","module.exports = buildDistanceInWordsLocale",""],"l":{"1":1,"2":1,"71":1,"72":0,"74":0,"75":0,"76":0,"77":0,"78":0,"80":0,"83":0,"84":0,"85":0,"87":0,"91":0,"94":1,"99":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/en/build_format_locale/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/en/build_format_locale/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":6,"23":0,"24":1,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":6,"11":0,"12":0},"fnMap":{"1":{"name":"buildFormatLocale","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":11},"end":{"line":19,"column":27}}},"3":{"name":"(anonymous_3)","line":24,"loc":{"start":{"line":24,"column":12},"end":{"line":24,"column":28}}},"4":{"name":"(anonymous_4)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":26}}},"5":{"name":"(anonymous_5)","line":34,"loc":{"start":{"line":34,"column":11},"end":{"line":34,"column":27}}},"6":{"name":"(anonymous_6)","line":39,"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":28}}},"7":{"name":"(anonymous_7)","line":44,"loc":{"start":{"line":44,"column":9},"end":{"line":44,"column":25}}},"8":{"name":"(anonymous_8)","line":49,"loc":{"start":{"line":49,"column":9},"end":{"line":49,"column":25}}},"9":{"name":"(anonymous_9)","line":54,"loc":{"start":{"line":54,"column":10},"end":{"line":54,"column":26}}},"10":{"name":"(anonymous_10)","line":61,"loc":{"start":{"line":61,"column":28},"end":{"line":61,"column":54}}},"11":{"name":"(anonymous_11)","line":62,"loc":{"start":{"line":62,"column":39},"end":{"line":62,"column":67}}},"12":{"name":"ordinal","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":26}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":96}},"2":{"start":{"line":3,"column":0},"end":{"line":71,"column":1}},"3":{"start":{"line":8,"column":2},"end":{"line":8,"column":104}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":141}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":64}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":71}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":99}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":38}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":38}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":37}},"11":{"start":{"line":17,"column":2},"end":{"line":57,"column":3}},"12":{"start":{"line":20,"column":6},"end":{"line":20,"column":41}},"13":{"start":{"line":25,"column":6},"end":{"line":25,"column":40}},"14":{"start":{"line":30,"column":6},"end":{"line":30,"column":41}},"15":{"start":{"line":35,"column":6},"end":{"line":35,"column":41}},"16":{"start":{"line":40,"column":6},"end":{"line":40,"column":40}},"17":{"start":{"line":45,"column":6},"end":{"line":45,"column":86}},"18":{"start":{"line":50,"column":6},"end":{"line":50,"column":86}},"19":{"start":{"line":55,"column":6},"end":{"line":55,"column":76}},"20":{"start":{"line":60,"column":2},"end":{"line":60,"column":58}},"21":{"start":{"line":61,"column":2},"end":{"line":65,"column":4}},"22":{"start":{"line":62,"column":4},"end":{"line":64,"column":5}},"23":{"start":{"line":63,"column":6},"end":{"line":63,"column":54}},"24":{"start":{"line":67,"column":2},"end":{"line":70,"column":3}},"25":{"start":{"line":73,"column":0},"end":{"line":86,"column":1}},"26":{"start":{"line":74,"column":2},"end":{"line":74,"column":27}},"27":{"start":{"line":75,"column":2},"end":{"line":84,"column":3}},"28":{"start":{"line":76,"column":4},"end":{"line":83,"column":5}},"29":{"start":{"line":78,"column":8},"end":{"line":78,"column":28}},"30":{"start":{"line":80,"column":8},"end":{"line":80,"column":28}},"31":{"start":{"line":82,"column":8},"end":{"line":82,"column":28}},"32":{"start":{"line":85,"column":2},"end":{"line":85,"column":22}},"33":{"start":{"line":88,"column":0},"end":{"line":88,"column":34}}},"branchMap":{"1":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":43},"end":{"line":45,"column":63}},{"start":{"line":45,"column":66},"end":{"line":45,"column":86}}]},"2":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":43},"end":{"line":50,"column":63}},{"start":{"line":50,"column":66},"end":{"line":50,"column":86}}]},"3":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":43},"end":{"line":55,"column":58}},{"start":{"line":55,"column":61},"end":{"line":55,"column":76}}]},"4":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":75,"column":2}},{"start":{"line":75,"column":2},"end":{"line":75,"column":2}}]},"5":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":17}},{"start":{"line":75,"column":21},"end":{"line":75,"column":32}}]},"6":{"line":76,"type":"switch","locations":[{"start":{"line":77,"column":6},"end":{"line":78,"column":28}},{"start":{"line":79,"column":6},"end":{"line":80,"column":28}},{"start":{"line":81,"column":6},"end":{"line":82,"column":28}}]}},"code":["var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')","","function buildFormatLocale () {","  // Note: in English, the names of days of the week and months are capitalized.","  // If you are making a new locale based on this one, check if the same is true for the language you're working on.","  // Generally, formatted dates should look like they are in the middle of a sentence,","  // e.g. in Spanish language the weekdays and months should be in the lowercase.","  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']","  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']","  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']","  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']","  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']","  var meridiemUppercase = ['AM', 'PM']","  var meridiemLowercase = ['am', 'pm']","  var meridiemFull = ['a.m.', 'p.m.']","","  var formatters = {","    // Month: Jan, Feb, ..., Dec","    'MMM': function (date) {","      return months3char[date.getMonth()]","    },","","    // Month: January, February, ..., December","    'MMMM': function (date) {","      return monthsFull[date.getMonth()]","    },","","    // Day of week: Su, Mo, ..., Sa","    'dd': function (date) {","      return weekdays2char[date.getDay()]","    },","","    // Day of week: Sun, Mon, ..., Sat","    'ddd': function (date) {","      return weekdays3char[date.getDay()]","    },","","    // Day of week: Sunday, Monday, ..., Saturday","    'dddd': function (date) {","      return weekdaysFull[date.getDay()]","    },","","    // AM, PM","    'A': function (date) {","      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]","    },","","    // am, pm","    'a': function (date) {","      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]","    },","","    // a.m., p.m.","    'aa': function (date) {","      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]","    }","  }","","  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.","  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']","  ordinalFormatters.forEach(function (formatterToken) {","    formatters[formatterToken + 'o'] = function (date, formatters) {","      return ordinal(formatters[formatterToken](date))","    }","  })","","  return {","    formatters: formatters,","    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)","  }","}","","function ordinal (number) {","  var rem100 = number % 100","  if (rem100 > 20 || rem100 < 10) {","    switch (rem100 % 10) {","      case 1:","        return number + 'st'","      case 2:","        return number + 'nd'","      case 3:","        return number + 'rd'","    }","  }","  return number + 'th'","}","","module.exports = buildFormatLocale",""],"l":{"1":1,"3":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"17":1,"20":0,"25":0,"30":0,"35":0,"40":0,"45":0,"50":0,"55":0,"60":1,"61":1,"62":6,"63":0,"67":1,"73":1,"74":0,"75":0,"76":0,"78":0,"80":0,"82":0,"85":0,"88":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":14,"6":14,"7":1,"8":1,"9":1,"10":1},"b":{"1":[14,0]},"f":{"1":1},"fnMap":{"1":{"name":"buildFormattingTokensRegExp","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":50}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":7,"column":1}},"2":{"start":{"line":9,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":24}},"4":{"start":{"line":11,"column":2},"end":{"line":15,"column":3}},"5":{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},"6":{"start":{"line":13,"column":6},"end":{"line":13,"column":29}},"7":{"start":{"line":17,"column":2},"end":{"line":20,"column":14}},"8":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"9":{"start":{"line":25,"column":2},"end":{"line":25,"column":31}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":44}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]}},"code":["var commonFormatterKeys = [","  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',","  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',","  'H', 'HH', 'h', 'hh', 'm', 'mm',","  's', 'ss', 'S', 'SS', 'SSS',","  'Z', 'ZZ', 'X', 'x'","]","","function buildFormattingTokensRegExp (formatters) {","  var formatterKeys = []","  for (var key in formatters) {","    if (formatters.hasOwnProperty(key)) {","      formatterKeys.push(key)","    }","  }","","  var formattingTokens = commonFormatterKeys","    .concat(formatterKeys)","    .sort()","    .reverse()","  var formattingTokensRegExp = new RegExp(","    '(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'","  )","","  return formattingTokensRegExp","}","","module.exports = buildFormattingTokensRegExp",""],"l":{"1":1,"9":1,"10":1,"11":1,"12":14,"13":14,"17":1,"21":1,"25":1,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/distance_in_words_strict/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/distance_in_words_strict/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"distanceInWordsStrict","line":94,"loc":{"start":{"line":94,"column":0},"end":{"line":94,"column":77}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":53}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":40}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":70}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":47}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":25}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":28}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":28}},"8":{"start":{"line":94,"column":0},"end":{"line":174,"column":1}},"9":{"start":{"line":95,"column":2},"end":{"line":95,"column":34}},"10":{"start":{"line":97,"column":2},"end":{"line":97,"column":61}},"11":{"start":{"line":99,"column":2},"end":{"line":99,"column":29}},"12":{"start":{"line":100,"column":2},"end":{"line":100,"column":50}},"13":{"start":{"line":101,"column":2},"end":{"line":103,"column":3}},"14":{"start":{"line":102,"column":4},"end":{"line":102,"column":46}},"15":{"start":{"line":105,"column":2},"end":{"line":108,"column":3}},"16":{"start":{"line":110,"column":2},"end":{"line":110,"column":25}},"17":{"start":{"line":111,"column":2},"end":{"line":117,"column":3}},"18":{"start":{"line":112,"column":4},"end":{"line":112,"column":40}},"19":{"start":{"line":113,"column":4},"end":{"line":113,"column":32}},"20":{"start":{"line":115,"column":4},"end":{"line":115,"column":31}},"21":{"start":{"line":116,"column":4},"end":{"line":116,"column":41}},"22":{"start":{"line":119,"column":2},"end":{"line":119,"column":10}},"23":{"start":{"line":120,"column":2},"end":{"line":120,"column":89}},"24":{"start":{"line":121,"column":2},"end":{"line":121,"column":56}},"25":{"start":{"line":122,"column":2},"end":{"line":122,"column":75}},"26":{"start":{"line":123,"column":2},"end":{"line":123,"column":50}},"27":{"start":{"line":124,"column":2},"end":{"line":124,"column":32}},"28":{"start":{"line":126,"column":2},"end":{"line":142,"column":3}},"29":{"start":{"line":127,"column":4},"end":{"line":127,"column":31}},"30":{"start":{"line":129,"column":4},"end":{"line":141,"column":5}},"31":{"start":{"line":130,"column":6},"end":{"line":130,"column":16}},"32":{"start":{"line":131,"column":11},"end":{"line":141,"column":5}},"33":{"start":{"line":132,"column":6},"end":{"line":132,"column":16}},"34":{"start":{"line":133,"column":11},"end":{"line":141,"column":5}},"35":{"start":{"line":134,"column":6},"end":{"line":134,"column":16}},"36":{"start":{"line":135,"column":11},"end":{"line":141,"column":5}},"37":{"start":{"line":136,"column":6},"end":{"line":136,"column":16}},"38":{"start":{"line":137,"column":11},"end":{"line":141,"column":5}},"39":{"start":{"line":138,"column":6},"end":{"line":138,"column":16}},"40":{"start":{"line":140,"column":6},"end":{"line":140,"column":16}},"41":{"start":{"line":145,"column":2},"end":{"line":171,"column":3}},"42":{"start":{"line":146,"column":4},"end":{"line":146,"column":57}},"43":{"start":{"line":149,"column":9},"end":{"line":171,"column":3}},"44":{"start":{"line":150,"column":4},"end":{"line":150,"column":57}},"45":{"start":{"line":153,"column":9},"end":{"line":171,"column":3}},"46":{"start":{"line":154,"column":4},"end":{"line":154,"column":37}},"47":{"start":{"line":155,"column":4},"end":{"line":155,"column":53}},"48":{"start":{"line":158,"column":9},"end":{"line":171,"column":3}},"49":{"start":{"line":159,"column":4},"end":{"line":159,"column":48}},"50":{"start":{"line":160,"column":4},"end":{"line":160,"column":51}},"51":{"start":{"line":163,"column":9},"end":{"line":171,"column":3}},"52":{"start":{"line":164,"column":4},"end":{"line":164,"column":52}},"53":{"start":{"line":165,"column":4},"end":{"line":165,"column":55}},"54":{"start":{"line":168,"column":9},"end":{"line":171,"column":3}},"55":{"start":{"line":169,"column":4},"end":{"line":169,"column":50}},"56":{"start":{"line":170,"column":4},"end":{"line":170,"column":53}},"57":{"start":{"line":173,"column":2},"end":{"line":173,"column":42}},"58":{"start":{"line":176,"column":0},"end":{"line":176,"column":38}}},"branchMap":{"1":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":16},"end":{"line":95,"column":28}},{"start":{"line":95,"column":32},"end":{"line":95,"column":34}}]},"2":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":101,"column":2}},{"start":{"line":101,"column":2},"end":{"line":101,"column":2}}]},"3":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":6},"end":{"line":101,"column":12}},{"start":{"line":101,"column":16},"end":{"line":101,"column":38}},{"start":{"line":101,"column":42},"end":{"line":101,"column":73}}]},"4":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":2},"end":{"line":111,"column":2}},{"start":{"line":111,"column":2},"end":{"line":111,"column":2}}]},"5":{"line":120,"type":"cond-expr","locations":[{"start":{"line":120,"column":49},"end":{"line":120,"column":78}},{"start":{"line":120,"column":81},"end":{"line":120,"column":88}}]},"6":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":2},"end":{"line":126,"column":2}},{"start":{"line":126,"column":2},"end":{"line":126,"column":2}}]},"7":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":4},"end":{"line":129,"column":4}},{"start":{"line":129,"column":4},"end":{"line":129,"column":4}}]},"8":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":11},"end":{"line":131,"column":11}},{"start":{"line":131,"column":11},"end":{"line":131,"column":11}}]},"9":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":11},"end":{"line":133,"column":11}},{"start":{"line":133,"column":11},"end":{"line":133,"column":11}}]},"10":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":11},"end":{"line":135,"column":11}},{"start":{"line":135,"column":11},"end":{"line":135,"column":11}}]},"11":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":11},"end":{"line":137,"column":11}},{"start":{"line":137,"column":11},"end":{"line":137,"column":11}}]},"12":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":2},"end":{"line":145,"column":2}},{"start":{"line":145,"column":2},"end":{"line":145,"column":2}}]},"13":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":9},"end":{"line":149,"column":9}},{"start":{"line":149,"column":9},"end":{"line":149,"column":9}}]},"14":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":9},"end":{"line":153,"column":9}},{"start":{"line":153,"column":9},"end":{"line":153,"column":9}}]},"15":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":9},"end":{"line":158,"column":9}},{"start":{"line":158,"column":9},"end":{"line":158,"column":9}}]},"16":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":9},"end":{"line":163,"column":9}},{"start":{"line":163,"column":9},"end":{"line":163,"column":9}}]},"17":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":9},"end":{"line":168,"column":9}},{"start":{"line":168,"column":9},"end":{"line":168,"column":9}}]}},"code":["var compareDesc = require('../compare_desc/index.js')","var parse = require('../parse/index.js')","var differenceInSeconds = require('../difference_in_seconds/index.js')","var enLocale = require('../locale/en/index.js')","","var MINUTES_IN_DAY = 1440","var MINUTES_IN_MONTH = 43200","var MINUTES_IN_YEAR = 525600","","/**"," * @category Common Helpers"," * @summary Return the distance between the given dates in words."," *"," * @description"," * Return the distance between the given dates in words, using strict units."," * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',"," * 'less than' and the like."," *"," * | Distance between dates | Result              |"," * |------------------------|---------------------|"," * | 0 ... 59 secs          | [0..59] seconds     |"," * | 1 ... 59 mins          | [1..59] minutes     |"," * | 1 ... 23 hrs           | [1..23] hours       |"," * | 1 ... 29 days          | [1..29] days        |"," * | 1 ... 11 months        | [1..11] months      |"," * | 1 ... N years          | [1..N]  years       |"," *"," * @param {Date|String|Number} dateToCompare - the date to compare with"," * @param {Date|String|Number} date - the other date"," * @param {Object} [options] - the object with options"," * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first"," * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit"," * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units"," * @param {Object} [options.locale=enLocale] - the locale object"," * @returns {String} the distance in words"," *"," * @example"," * // What is the distance between 2 July 2014 and 1 January 2015?"," * var result = distanceInWordsStrict("," *   new Date(2014, 6, 2),"," *   new Date(2015, 0, 2)"," * )"," * //=> '6 months'"," *"," * @example"," * // What is the distance between 1 January 2015 00:00:15"," * // and 1 January 2015 00:00:00?"," * var result = distanceInWordsStrict("," *   new Date(2015, 0, 1, 0, 0, 15),"," *   new Date(2015, 0, 1, 0, 0, 0),"," * )"," * //=> '15 seconds'"," *"," * @example"," * // What is the distance from 1 January 2016"," * // to 1 January 2015, with a suffix?"," * var result = distanceInWordsStrict("," *   new Date(2016, 0, 1),"," *   new Date(2015, 0, 1),"," *   {addSuffix: true}"," * )"," * //=> '1 year ago'"," *"," * @example"," * // What is the distance from 1 January 2016"," * // to 1 January 2015, in minutes?"," * var result = distanceInWordsStrict("," *   new Date(2016, 0, 1),"," *   new Date(2015, 0, 1),"," *   {unit: 'm'}"," * )"," * //=> '525600 minutes'"," *"," * @example"," * // What is the distance from 1 January 2016"," * // to 28 January 2015, in months, rounded up?"," * var result = distanceInWordsStrict("," *   new Date(2015, 0, 28),"," *   new Date(2015, 0, 1),"," *   {unit: 'M', partialMethod: 'ceil'}"," * )"," * //=> '1 month'"," *"," * @example"," * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?"," * var eoLocale = require('date-fns/locale/eo')"," * var result = distanceInWordsStrict("," *   new Date(2016, 7, 1),"," *   new Date(2015, 0, 1),"," *   {locale: eoLocale}"," * )"," * //=> '1 jaro'"," */","function distanceInWordsStrict (dirtyDateToCompare, dirtyDate, dirtyOptions) {","  var options = dirtyOptions || {}","","  var comparison = compareDesc(dirtyDateToCompare, dirtyDate)","","  var locale = options.locale","  var localize = enLocale.distanceInWords.localize","  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {","    localize = locale.distanceInWords.localize","  }","","  var localizeOptions = {","    addSuffix: Boolean(options.addSuffix),","    comparison: comparison","  }","","  var dateLeft, dateRight","  if (comparison > 0) {","    dateLeft = parse(dirtyDateToCompare)","    dateRight = parse(dirtyDate)","  } else {","    dateLeft = parse(dirtyDate)","    dateRight = parse(dirtyDateToCompare)","  }","","  var unit","  var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor']","  var seconds = differenceInSeconds(dateRight, dateLeft)","  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset()","  var minutes = mathPartial(seconds / 60) - offset","  var hours, days, months, years","","  if (options.unit) {","    unit = String(options.unit)","  } else {","    if (minutes < 1) {","      unit = 's'","    } else if (minutes < 60) {","      unit = 'm'","    } else if (minutes < MINUTES_IN_DAY) {","      unit = 'h'","    } else if (minutes < MINUTES_IN_MONTH) {","      unit = 'd'","    } else if (minutes < MINUTES_IN_YEAR) {","      unit = 'M'","    } else {","      unit = 'Y'","    }","  }","","  // 0 up to 60 seconds","  if (unit === 's') {","    return localize('xSeconds', seconds, localizeOptions)","","  // 1 up to 60 mins","  } else if (unit === 'm') {","    return localize('xMinutes', minutes, localizeOptions)","","  // 1 up to 24 hours","  } else if (unit === 'h') {","    hours = mathPartial(minutes / 60)","    return localize('xHours', hours, localizeOptions)","","  // 1 up to 30 days","  } else if (unit === 'd') {","    days = mathPartial(minutes / MINUTES_IN_DAY)","    return localize('xDays', days, localizeOptions)","","  // 1 up to 12 months","  } else if (unit === 'M') {","    months = mathPartial(minutes / MINUTES_IN_MONTH)","    return localize('xMonths', months, localizeOptions)","","  // 1 year up to max Date","  } else if (unit === 'Y') {","    years = mathPartial(minutes / MINUTES_IN_YEAR)","    return localize('xYears', years, localizeOptions)","  }","","  throw new Error('Unknown unit: ' + unit)","}","","module.exports = distanceInWordsStrict",""],"l":{"1":1,"2":1,"3":1,"4":1,"6":1,"7":1,"8":1,"94":1,"95":0,"97":0,"99":0,"100":0,"101":0,"102":0,"105":0,"110":0,"111":0,"112":0,"113":0,"115":0,"116":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"126":0,"127":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"140":0,"145":0,"146":0,"149":0,"150":0,"153":0,"154":0,"155":0,"158":0,"159":0,"160":0,"163":0,"164":0,"165":0,"168":0,"169":0,"170":0,"173":0,"176":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/distance_in_words_to_now/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/distance_in_words_to_now/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"distanceInWordsToNow","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":56}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":62}},"2":{"start":{"line":81,"column":0},"end":{"line":83,"column":1}},"3":{"start":{"line":82,"column":2},"end":{"line":82,"column":61}},"4":{"start":{"line":85,"column":0},"end":{"line":85,"column":37}}},"branchMap":{},"code":["var distanceInWords = require('../distance_in_words/index.js')","","/**"," * @category Common Helpers"," * @summary Return the distance between the given date and now in words."," *"," * @description"," * Return the distance between the given date and now in words."," *"," * | Distance to now                                                   | Result              |"," * |-------------------------------------------------------------------|---------------------|"," * | 0 ... 30 secs                                                     | less than a minute  |"," * | 30 secs ... 1 min 30 secs                                         | 1 minute            |"," * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |"," * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |"," * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |"," * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |"," * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |"," * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |"," * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |"," * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |"," * | 1 yr ... 1 yr 3 months                                            | about 1 year        |"," * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |"," * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |"," * | N yrs ... N yrs 3 months                                          | about N years       |"," * | N yrs 3 months ... N yrs 9 months                                 | over N years        |"," * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |"," *"," * With `options.includeSeconds == true`:"," * | Distance to now     | Result               |"," * |---------------------|----------------------|"," * | 0 secs ... 5 secs   | less than 5 seconds  |"," * | 5 secs ... 10 secs  | less than 10 seconds |"," * | 10 secs ... 20 secs | less than 20 seconds |"," * | 20 secs ... 40 secs | half a minute        |"," * | 40 secs ... 60 secs | less than a minute   |"," * | 60 secs ... 90 secs | 1 minute             |"," *"," * @param {Date|String|Number} date - the given date"," * @param {Object} [options] - the object with options"," * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed"," * @param {Boolean} [options.addSuffix=false] - result specifies if the second date is earlier or later than the first"," * @param {Object} [options.locale=enLocale] - the locale object"," * @returns {String} the distance in words"," *"," * @example"," * // If today is 1 January 2015, what is the distance to 2 July 2014?"," * var result = distanceInWordsToNow("," *   new Date(2014, 6, 2)"," * )"," * //=> '6 months'"," *"," * @example"," * // If now is 1 January 2015 00:00:00,"," * // what is the distance to 1 January 2015 00:00:15, including seconds?"," * var result = distanceInWordsToNow("," *   new Date(2015, 0, 1, 0, 0, 15),"," *   {includeSeconds: true}"," * )"," * //=> 'less than 20 seconds'"," *"," * @example"," * // If today is 1 January 2015,"," * // what is the distance to 1 January 2016, with a suffix?"," * var result = distanceInWordsToNow("," *   new Date(2016, 0, 1),"," *   {addSuffix: true}"," * )"," * //=> 'in about 1 year'"," *"," * @example"," * // If today is 1 January 2015,"," * // what is the distance to 1 August 2016 in Esperanto?"," * var eoLocale = require('date-fns/locale/eo')"," * var result = distanceInWordsToNow("," *   new Date(2016, 7, 1),"," *   {locale: eoLocale}"," * )"," * //=> 'pli ol 1 jaro'"," */","function distanceInWordsToNow (dirtyDate, dirtyOptions) {","  return distanceInWords(Date.now(), dirtyDate, dirtyOptions)","}","","module.exports = distanceInWordsToNow",""],"l":{"1":1,"81":1,"82":0,"85":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/each_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/each_day/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"eachDay","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":48}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":29,"column":0},"end":{"line":50,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":30,"column":39}},"4":{"start":{"line":31,"column":2},"end":{"line":31,"column":35}},"5":{"start":{"line":33,"column":2},"end":{"line":33,"column":33}},"6":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"7":{"start":{"line":36,"column":4},"end":{"line":36,"column":69}},"8":{"start":{"line":39,"column":2},"end":{"line":39,"column":16}},"9":{"start":{"line":41,"column":2},"end":{"line":41,"column":29}},"10":{"start":{"line":42,"column":2},"end":{"line":42,"column":34}},"11":{"start":{"line":44,"column":2},"end":{"line":47,"column":3}},"12":{"start":{"line":45,"column":4},"end":{"line":45,"column":34}},"13":{"start":{"line":46,"column":4},"end":{"line":46,"column":50}},"14":{"start":{"line":49,"column":2},"end":{"line":49,"column":14}},"15":{"start":{"line":52,"column":0},"end":{"line":52,"column":24}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Day Helpers"," * @summary Return the array of dates within the specified range."," *"," * @description"," * Return the array of dates within the specified range."," *"," * @param {Date|String|Number} startDate - the first date"," * @param {Date|String|Number} endDate - the last date"," * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate"," * @throws {Error} startDate cannot be after endDate"," *"," * @example"," * // Each day between 6 October 2014 and 10 October 2014:"," * var result = eachDay("," *   new Date(2014, 9, 6),"," *   new Date(2014, 9, 10)"," * )"," * //=> ["," * //   Mon Oct 06 2014 00:00:00,"," * //   Tue Oct 07 2014 00:00:00,"," * //   Wed Oct 08 2014 00:00:00,"," * //   Thu Oct 09 2014 00:00:00,"," * //   Fri Oct 10 2014 00:00:00"," * // ]"," */","function eachDay (dirtyStartDate, dirtyEndDate) {","  var startDate = parse(dirtyStartDate)","  var endDate = parse(dirtyEndDate)","","  var endTime = endDate.getTime()","","  if (startDate.getTime() > endTime) {","    throw new Error('The first date cannot be after the second date')","  }","","  var dates = []","","  var currentDate = startDate","  currentDate.setHours(0, 0, 0, 0)","","  while (currentDate.getTime() <= endTime) {","    dates.push(parse(currentDate))","    currentDate.setDate(currentDate.getDate() + 1)","  }","","  return dates","}","","module.exports = eachDay",""],"l":{"1":1,"29":1,"30":0,"31":0,"33":0,"35":0,"36":0,"39":0,"41":0,"42":0,"44":0,"45":0,"46":0,"49":0,"52":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_day/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfDay","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":32}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Day Helpers"," * @summary Return the end of a day for the given date."," *"," * @description"," * Return the end of a day for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of a day"," *"," * @example"," * // The end of a day for 2 September 2014 11:55:00:"," * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Tue Sep 02 2014 23:59:59.999"," */","function endOfDay (dirtyDate) {","  var date = parse(dirtyDate)","  date.setHours(23, 59, 59, 999)","  return date","}","","module.exports = endOfDay",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_hour/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_hour/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfHour","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":31}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":30}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":26}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Hour Helpers"," * @summary Return the end of an hour for the given date."," *"," * @description"," * Return the end of an hour for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of an hour"," *"," * @example"," * // The end of an hour for 2 September 2014 11:55:00:"," * var result = endOfHour(new Date(2014, 8, 2, 11, 55))"," * //=> Tue Sep 02 2014 11:59:59.999"," */","function endOfHour (dirtyDate) {","  var date = parse(dirtyDate)","  date.setMinutes(59, 59, 999)","  return date","}","","module.exports = endOfHour",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_iso_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_iso_week/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfISOWeek","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":50}},"2":{"start":{"line":21,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":22,"column":2},"end":{"line":22,"column":48}},"4":{"start":{"line":25,"column":0},"end":{"line":25,"column":29}}},"branchMap":{},"code":["var endOfWeek = require('../end_of_week/index.js')","","/**"," * @category ISO Week Helpers"," * @summary Return the end of an ISO week for the given date."," *"," * @description"," * Return the end of an ISO week for the given date."," * The result will be in the local timezone."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of an ISO week"," *"," * @example"," * // The end of an ISO week for 2 September 2014 11:55:00:"," * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Sun Sep 07 2014 23:59:59.999"," */","function endOfISOWeek (dirtyDate) {","  return endOfWeek(dirtyDate, {weekStartsOn: 1})","}","","module.exports = endOfISOWeek",""],"l":{"1":1,"21":1,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_week/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"endOfWeek","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":45}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":26,"column":0},"end":{"line":36,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":27,"column":80}},"4":{"start":{"line":29,"column":2},"end":{"line":29,"column":29}},"5":{"start":{"line":30,"column":2},"end":{"line":30,"column":25}},"6":{"start":{"line":31,"column":2},"end":{"line":31,"column":69}},"7":{"start":{"line":33,"column":2},"end":{"line":33,"column":37}},"8":{"start":{"line":34,"column":2},"end":{"line":34,"column":32}},"9":{"start":{"line":35,"column":2},"end":{"line":35,"column":13}},"10":{"start":{"line":38,"column":0},"end":{"line":38,"column":26}}},"branchMap":{"1":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":37},"end":{"line":27,"column":75}},{"start":{"line":27,"column":79},"end":{"line":27,"column":80}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":37},"end":{"line":27,"column":70}},{"start":{"line":27,"column":74},"end":{"line":27,"column":75}}]},"3":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":35},"end":{"line":31,"column":37}},{"start":{"line":31,"column":40},"end":{"line":31,"column":41}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Week Helpers"," * @summary Return the end of a week for the given date."," *"," * @description"," * Return the end of a week for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @param {Object} [options] - the object with options"," * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)"," * @returns {Date} the end of a week"," *"," * @example"," * // The end of a week for 2 September 2014 11:55:00:"," * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Sat Sep 06 2014 23:59:59.999"," *"," * @example"," * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:"," * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})"," * //=> Sun Sep 07 2014 23:59:59.999"," */","function endOfWeek (dirtyDate, dirtyOptions) {","  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0","","  var date = parse(dirtyDate)","  var day = date.getDay()","  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn)","","  date.setDate(date.getDate() + diff)","  date.setHours(23, 59, 59, 999)","  return date","}","","module.exports = endOfWeek",""],"l":{"1":1,"26":1,"27":0,"29":0,"30":0,"31":0,"33":0,"34":0,"35":0,"38":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_iso_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_iso_year/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfISOYear","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":23,"column":0},"end":{"line":31,"column":1}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":34}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":45}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":55}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":48}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":54}},"9":{"start":{"line":29,"column":2},"end":{"line":29,"column":50}},"10":{"start":{"line":30,"column":2},"end":{"line":30,"column":13}},"11":{"start":{"line":33,"column":0},"end":{"line":33,"column":29}}},"branchMap":{},"code":["var getISOYear = require('../get_iso_year/index.js')","var startOfISOWeek = require('../start_of_iso_week/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Return the end of an ISO week-numbering year for the given date."," *"," * @description"," * Return the end of an ISO week-numbering year,"," * which always starts 3 days before the year's first Thursday."," * The result will be in the local timezone."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of an ISO week-numbering year"," *"," * @example"," * // The end of an ISO week-numbering year for 2 July 2005:"," * var result = endOfISOYear(new Date(2005, 6, 2))"," * //=> Sun Jan 01 2006 23:59:59.999"," */","function endOfISOYear (dirtyDate) {","  var year = getISOYear(dirtyDate)","  var fourthOfJanuaryOfNextYear = new Date(0)","  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)","  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)","  var date = startOfISOWeek(fourthOfJanuaryOfNextYear)","  date.setMilliseconds(date.getMilliseconds() - 1)","  return date","}","","module.exports = endOfISOYear",""],"l":{"1":1,"2":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"33":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_minute/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_minute/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfMinute","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":26}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":28}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Minute Helpers"," * @summary Return the end of a minute for the given date."," *"," * @description"," * Return the end of a minute for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of a minute"," *"," * @example"," * // The end of a minute for 1 December 2014 22:15:45.400:"," * var result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))"," * //=> Mon Dec 01 2014 22:15:59.999"," */","function endOfMinute (dirtyDate) {","  var date = parse(dirtyDate)","  date.setSeconds(59, 999)","  return date","}","","module.exports = endOfMinute",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_month/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfMonth","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":52}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":32}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Return the end of a month for the given date."," *"," * @description"," * Return the end of a month for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of a month"," *"," * @example"," * // The end of a month for 2 September 2014 11:55:00:"," * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Tue Sep 30 2014 23:59:59.999"," */","function endOfMonth (dirtyDate) {","  var date = parse(dirtyDate)","  var month = date.getMonth()","  date.setFullYear(date.getFullYear(), month + 1, 0)","  date.setHours(23, 59, 59, 999)","  return date","}","","module.exports = endOfMonth",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_quarter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_quarter/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfQuarter","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":36}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":49}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":25}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":32}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":13}},"9":{"start":{"line":28,"column":0},"end":{"line":28,"column":29}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Quarter Helpers"," * @summary Return the end of a year quarter for the given date."," *"," * @description"," * Return the end of a year quarter for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of a quarter"," *"," * @example"," * // The end of a quarter for 2 September 2014 11:55:00:"," * var result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Tue Sep 30 2014 23:59:59.999"," */","function endOfQuarter (dirtyDate) {","  var date = parse(dirtyDate)","  var currentMonth = date.getMonth()","  var month = currentMonth - currentMonth % 3 + 3","  date.setMonth(month, 0)","  date.setHours(23, 59, 59, 999)","  return date","}","","module.exports = endOfQuarter",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_second/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_second/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfSecond","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":27}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":28}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Second Helpers"," * @summary Return the end of a second for the given date."," *"," * @description"," * Return the end of a second for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of a second"," *"," * @example"," * // The end of a second for 1 December 2014 22:15:45.400:"," * var result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))"," * //=> Mon Dec 01 2014 22:15:45.999"," */","function endOfSecond (dirtyDate) {","  var date = parse(dirtyDate)","  date.setMilliseconds(999)","  return date","}","","module.exports = endOfSecond",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_today/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_today/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfToday","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":23}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}},"2":{"start":{"line":17,"column":0},"end":{"line":19,"column":1}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":29}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":27}}},"branchMap":{},"code":["var endOfDay = require('../end_of_day/index.js')","","/**"," * @category Day Helpers"," * @summary Return the end of today."," *"," * @description"," * Return the end of today."," *"," * @returns {Date} the end of today"," *"," * @example"," * // If today is 6 October 2014:"," * var result = endOfToday()"," * //=> Mon Oct 6 2014 23:59:59.999"," */","function endOfToday () {","  return endOfDay(new Date())","}","","module.exports = endOfToday",""],"l":{"1":1,"17":1,"18":0,"21":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_tomorrow/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_tomorrow/index.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfTomorrow","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":26}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":25,"column":1}},"2":{"start":{"line":16,"column":2},"end":{"line":16,"column":22}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":30}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":28}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":25}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":24}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":40}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":32}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"10":{"start":{"line":27,"column":0},"end":{"line":27,"column":30}}},"branchMap":{},"code":["/**"," * @category Day Helpers"," * @summary Return the end of tomorrow."," *"," * @description"," * Return the end of tomorrow."," *"," * @returns {Date} the end of tomorrow"," *"," * @example"," * // If today is 6 October 2014:"," * var result = endOfTomorrow()"," * //=> Tue Oct 7 2014 23:59:59.999"," */","function endOfTomorrow () {","  var now = new Date()","  var year = now.getFullYear()","  var month = now.getMonth()","  var day = now.getDate()","","  var date = new Date(0)","  date.setFullYear(year, month, day + 1)","  date.setHours(23, 59, 59, 999)","  return date","}","","module.exports = endOfTomorrow",""],"l":{"15":1,"16":0,"17":0,"18":0,"19":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfYear","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":31}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":31}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":34}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":32}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":26}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Return the end of a year for the given date."," *"," * @description"," * Return the end of a year for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of a year"," *"," * @example"," * // The end of a year for 2 September 2014 11:55:00:"," * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))"," * //=> Wed Dec 31 2014 23:59:59.999"," */","function endOfYear (dirtyDate) {","  var date = parse(dirtyDate)","  var year = date.getFullYear()","  date.setFullYear(year + 1, 0, 0)","  date.setHours(23, 59, 59, 999)","  return date","}","","module.exports = endOfYear",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_yesterday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/end_of_yesterday/index.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"endOfYesterday","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":27}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":25,"column":1}},"2":{"start":{"line":16,"column":2},"end":{"line":16,"column":22}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":30}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":28}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":25}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":24}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":40}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":32}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"10":{"start":{"line":27,"column":0},"end":{"line":27,"column":31}}},"branchMap":{},"code":["/**"," * @category Day Helpers"," * @summary Return the end of yesterday."," *"," * @description"," * Return the end of yesterday."," *"," * @returns {Date} the end of yesterday"," *"," * @example"," * // If today is 6 October 2014:"," * var result = endOfYesterday()"," * //=> Sun Oct 5 2014 23:59:59.999"," */","function endOfYesterday () {","  var now = new Date()","  var year = now.getFullYear()","  var month = now.getMonth()","  var day = now.getDate()","","  var date = new Date(0)","  date.setFullYear(year, month, day - 1)","  date.setHours(23, 59, 59, 999)","  return date","}","","module.exports = endOfYesterday",""],"l":{"15":1,"16":0,"17":0,"18":0,"19":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/format/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/format/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"fnMap":{"1":{"name":"format","line":91,"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":58}}},"2":{"name":"(anonymous_2)","line":119,"loc":{"start":{"line":119,"column":7},"end":{"line":119,"column":23}}},"3":{"name":"(anonymous_3)","line":124,"loc":{"start":{"line":124,"column":8},"end":{"line":124,"column":24}}},"4":{"name":"(anonymous_4)","line":129,"loc":{"start":{"line":129,"column":7},"end":{"line":129,"column":23}}},"5":{"name":"(anonymous_5)","line":134,"loc":{"start":{"line":134,"column":7},"end":{"line":134,"column":23}}},"6":{"name":"(anonymous_6)","line":139,"loc":{"start":{"line":139,"column":8},"end":{"line":139,"column":24}}},"7":{"name":"(anonymous_7)","line":144,"loc":{"start":{"line":144,"column":9},"end":{"line":144,"column":25}}},"8":{"name":"(anonymous_8)","line":149,"loc":{"start":{"line":149,"column":10},"end":{"line":149,"column":26}}},"9":{"name":"(anonymous_9)","line":154,"loc":{"start":{"line":154,"column":7},"end":{"line":154,"column":23}}},"10":{"name":"(anonymous_10)","line":159,"loc":{"start":{"line":159,"column":7},"end":{"line":159,"column":23}}},"11":{"name":"(anonymous_11)","line":164,"loc":{"start":{"line":164,"column":7},"end":{"line":164,"column":23}}},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":8},"end":{"line":169,"column":24}}},"13":{"name":"(anonymous_13)","line":174,"loc":{"start":{"line":174,"column":8},"end":{"line":174,"column":24}}},"14":{"name":"(anonymous_14)","line":179,"loc":{"start":{"line":179,"column":10},"end":{"line":179,"column":26}}},"15":{"name":"(anonymous_15)","line":184,"loc":{"start":{"line":184,"column":8},"end":{"line":184,"column":24}}},"16":{"name":"(anonymous_16)","line":189,"loc":{"start":{"line":189,"column":10},"end":{"line":189,"column":26}}},"17":{"name":"(anonymous_17)","line":194,"loc":{"start":{"line":194,"column":7},"end":{"line":194,"column":23}}},"18":{"name":"(anonymous_18)","line":199,"loc":{"start":{"line":199,"column":8},"end":{"line":199,"column":24}}},"19":{"name":"(anonymous_19)","line":204,"loc":{"start":{"line":204,"column":7},"end":{"line":204,"column":23}}},"20":{"name":"(anonymous_20)","line":216,"loc":{"start":{"line":216,"column":8},"end":{"line":216,"column":24}}},"21":{"name":"(anonymous_21)","line":221,"loc":{"start":{"line":221,"column":7},"end":{"line":221,"column":23}}},"22":{"name":"(anonymous_22)","line":226,"loc":{"start":{"line":226,"column":8},"end":{"line":226,"column":24}}},"23":{"name":"(anonymous_23)","line":231,"loc":{"start":{"line":231,"column":7},"end":{"line":231,"column":23}}},"24":{"name":"(anonymous_24)","line":236,"loc":{"start":{"line":236,"column":8},"end":{"line":236,"column":24}}},"25":{"name":"(anonymous_25)","line":241,"loc":{"start":{"line":241,"column":7},"end":{"line":241,"column":23}}},"26":{"name":"(anonymous_26)","line":246,"loc":{"start":{"line":246,"column":8},"end":{"line":246,"column":24}}},"27":{"name":"(anonymous_27)","line":251,"loc":{"start":{"line":251,"column":9},"end":{"line":251,"column":25}}},"28":{"name":"(anonymous_28)","line":256,"loc":{"start":{"line":256,"column":7},"end":{"line":256,"column":23}}},"29":{"name":"(anonymous_29)","line":261,"loc":{"start":{"line":261,"column":8},"end":{"line":261,"column":24}}},"30":{"name":"(anonymous_30)","line":266,"loc":{"start":{"line":266,"column":7},"end":{"line":266,"column":23}}},"31":{"name":"(anonymous_31)","line":271,"loc":{"start":{"line":271,"column":7},"end":{"line":271,"column":23}}},"32":{"name":"buildFormatFn","line":276,"loc":{"start":{"line":276,"column":0},"end":{"line":276,"column":77}}},"33":{"name":"(anonymous_33)","line":291,"loc":{"start":{"line":291,"column":9},"end":{"line":291,"column":25}}},"34":{"name":"removeFormattingTokens","line":304,"loc":{"start":{"line":304,"column":0},"end":{"line":304,"column":40}}},"35":{"name":"formatTimezone","line":311,"loc":{"start":{"line":311,"column":0},"end":{"line":311,"column":44}}},"36":{"name":"addLeadingZeros","line":320,"loc":{"start":{"line":320,"column":0},"end":{"line":320,"column":48}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":57}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":52}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":52}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":47}},"7":{"start":{"line":91,"column":0},"end":{"line":115,"column":1}},"8":{"start":{"line":92,"column":2},"end":{"line":92,"column":86}},"9":{"start":{"line":93,"column":2},"end":{"line":93,"column":34}},"10":{"start":{"line":95,"column":2},"end":{"line":95,"column":29}},"11":{"start":{"line":96,"column":2},"end":{"line":96,"column":51}},"12":{"start":{"line":97,"column":2},"end":{"line":97,"column":69}},"13":{"start":{"line":98,"column":2},"end":{"line":104,"column":3}},"14":{"start":{"line":99,"column":4},"end":{"line":99,"column":47}},"15":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"16":{"start":{"line":102,"column":6},"end":{"line":102,"column":67}},"17":{"start":{"line":106,"column":2},"end":{"line":106,"column":29}},"18":{"start":{"line":108,"column":2},"end":{"line":110,"column":3}},"19":{"start":{"line":109,"column":4},"end":{"line":109,"column":25}},"20":{"start":{"line":112,"column":2},"end":{"line":112,"column":83}},"21":{"start":{"line":114,"column":2},"end":{"line":114,"column":23}},"22":{"start":{"line":117,"column":0},"end":{"line":274,"column":1}},"23":{"start":{"line":120,"column":4},"end":{"line":120,"column":30}},"24":{"start":{"line":125,"column":4},"end":{"line":125,"column":50}},"25":{"start":{"line":130,"column":4},"end":{"line":130,"column":47}},"26":{"start":{"line":135,"column":4},"end":{"line":135,"column":25}},"27":{"start":{"line":140,"column":4},"end":{"line":140,"column":45}},"28":{"start":{"line":145,"column":4},"end":{"line":145,"column":29}},"29":{"start":{"line":150,"column":4},"end":{"line":150,"column":49}},"30":{"start":{"line":155,"column":4},"end":{"line":155,"column":24}},"31":{"start":{"line":160,"column":4},"end":{"line":160,"column":29}},"32":{"start":{"line":165,"column":4},"end":{"line":165,"column":27}},"33":{"start":{"line":170,"column":4},"end":{"line":170,"column":47}},"34":{"start":{"line":175,"column":4},"end":{"line":175,"column":59}},"35":{"start":{"line":180,"column":4},"end":{"line":180,"column":49}},"36":{"start":{"line":185,"column":4},"end":{"line":185,"column":45}},"37":{"start":{"line":190,"column":4},"end":{"line":190,"column":27}},"38":{"start":{"line":195,"column":4},"end":{"line":195,"column":26}},"39":{"start":{"line":200,"column":4},"end":{"line":200,"column":46}},"40":{"start":{"line":205,"column":4},"end":{"line":205,"column":31}},"41":{"start":{"line":206,"column":4},"end":{"line":212,"column":5}},"42":{"start":{"line":207,"column":6},"end":{"line":207,"column":15}},"43":{"start":{"line":208,"column":11},"end":{"line":212,"column":5}},"44":{"start":{"line":209,"column":6},"end":{"line":209,"column":23}},"45":{"start":{"line":211,"column":6},"end":{"line":211,"column":18}},"46":{"start":{"line":217,"column":4},"end":{"line":217,"column":52}},"47":{"start":{"line":222,"column":4},"end":{"line":222,"column":28}},"48":{"start":{"line":227,"column":4},"end":{"line":227,"column":48}},"49":{"start":{"line":232,"column":4},"end":{"line":232,"column":28}},"50":{"start":{"line":237,"column":4},"end":{"line":237,"column":48}},"51":{"start":{"line":242,"column":4},"end":{"line":242,"column":51}},"52":{"start":{"line":247,"column":4},"end":{"line":247,"column":70}},"53":{"start":{"line":252,"column":4},"end":{"line":252,"column":53}},"54":{"start":{"line":257,"column":4},"end":{"line":257,"column":56}},"55":{"start":{"line":262,"column":4},"end":{"line":262,"column":51}},"56":{"start":{"line":267,"column":4},"end":{"line":267,"column":44}},"57":{"start":{"line":272,"column":4},"end":{"line":272,"column":25}},"58":{"start":{"line":276,"column":0},"end":{"line":302,"column":1}},"59":{"start":{"line":277,"column":2},"end":{"line":277,"column":53}},"60":{"start":{"line":278,"column":2},"end":{"line":278,"column":27}},"61":{"start":{"line":280,"column":2},"end":{"line":280,"column":7}},"62":{"start":{"line":281,"column":2},"end":{"line":281,"column":15}},"63":{"start":{"line":282,"column":2},"end":{"line":289,"column":3}},"64":{"start":{"line":283,"column":4},"end":{"line":283,"column":66}},"65":{"start":{"line":284,"column":4},"end":{"line":288,"column":5}},"66":{"start":{"line":285,"column":6},"end":{"line":285,"column":26}},"67":{"start":{"line":287,"column":6},"end":{"line":287,"column":49}},"68":{"start":{"line":291,"column":2},"end":{"line":301,"column":3}},"69":{"start":{"line":292,"column":4},"end":{"line":292,"column":19}},"70":{"start":{"line":293,"column":4},"end":{"line":299,"column":5}},"71":{"start":{"line":294,"column":6},"end":{"line":298,"column":7}},"72":{"start":{"line":295,"column":8},"end":{"line":295,"column":44}},"73":{"start":{"line":297,"column":8},"end":{"line":297,"column":26}},"74":{"start":{"line":300,"column":4},"end":{"line":300,"column":17}},"75":{"start":{"line":304,"column":0},"end":{"line":309,"column":1}},"76":{"start":{"line":305,"column":2},"end":{"line":307,"column":3}},"77":{"start":{"line":306,"column":4},"end":{"line":306,"column":39}},"78":{"start":{"line":308,"column":2},"end":{"line":308,"column":33}},"79":{"start":{"line":311,"column":0},"end":{"line":318,"column":1}},"80":{"start":{"line":312,"column":2},"end":{"line":312,"column":29}},"81":{"start":{"line":313,"column":2},"end":{"line":313,"column":35}},"82":{"start":{"line":314,"column":2},"end":{"line":314,"column":34}},"83":{"start":{"line":315,"column":2},"end":{"line":315,"column":40}},"84":{"start":{"line":316,"column":2},"end":{"line":316,"column":30}},"85":{"start":{"line":317,"column":2},"end":{"line":317,"column":83}},"86":{"start":{"line":320,"column":0},"end":{"line":326,"column":1}},"87":{"start":{"line":321,"column":2},"end":{"line":321,"column":42}},"88":{"start":{"line":322,"column":2},"end":{"line":324,"column":3}},"89":{"start":{"line":323,"column":4},"end":{"line":323,"column":25}},"90":{"start":{"line":325,"column":2},"end":{"line":325,"column":15}},"91":{"start":{"line":328,"column":0},"end":{"line":328,"column":23}}},"branchMap":{"1":{"line":92,"type":"cond-expr","locations":[{"start":{"line":92,"column":35},"end":{"line":92,"column":57}},{"start":{"line":92,"column":60},"end":{"line":92,"column":86}}]},"2":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":28}},{"start":{"line":93,"column":32},"end":{"line":93,"column":34}}]},"3":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":2},"end":{"line":98,"column":2}},{"start":{"line":98,"column":2},"end":{"line":98,"column":2}}]},"4":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":6},"end":{"line":98,"column":12}},{"start":{"line":98,"column":16},"end":{"line":98,"column":29}},{"start":{"line":98,"column":33},"end":{"line":98,"column":57}}]},"5":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":101,"column":4}},{"start":{"line":101,"column":4},"end":{"line":101,"column":4}}]},"6":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":2},"end":{"line":108,"column":2}},{"start":{"line":108,"column":2},"end":{"line":108,"column":2}}]},"7":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":11},"end":{"line":160,"column":24}},{"start":{"line":160,"column":28},"end":{"line":160,"column":29}}]},"8":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":4},"end":{"line":206,"column":4}},{"start":{"line":206,"column":4},"end":{"line":206,"column":4}}]},"9":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":11},"end":{"line":208,"column":11}},{"start":{"line":208,"column":11},"end":{"line":208,"column":11}}]},"10":{"line":283,"type":"binary-expr","locations":[{"start":{"line":283,"column":16},"end":{"line":283,"column":42}},{"start":{"line":283,"column":46},"end":{"line":283,"column":66}}]},"11":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":4},"end":{"line":284,"column":4}},{"start":{"line":284,"column":4},"end":{"line":284,"column":4}}]},"12":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":6},"end":{"line":294,"column":6}},{"start":{"line":294,"column":6},"end":{"line":294,"column":6}}]},"13":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":2},"end":{"line":305,"column":2}},{"start":{"line":305,"column":2},"end":{"line":305,"column":2}}]},"14":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":14},"end":{"line":312,"column":23}},{"start":{"line":312,"column":27},"end":{"line":312,"column":29}}]},"15":{"line":313,"type":"cond-expr","locations":[{"start":{"line":313,"column":26},"end":{"line":313,"column":29}},{"start":{"line":313,"column":32},"end":{"line":313,"column":35}}]}},"code":["var getDayOfYear = require('../get_day_of_year/index.js')","var getISOWeek = require('../get_iso_week/index.js')","var getISOYear = require('../get_iso_year/index.js')","var parse = require('../parse/index.js')","var isValid = require('../is_valid/index.js')","var enLocale = require('../locale/en/index.js')","","/**"," * @category Common Helpers"," * @summary Format the date."," *"," * @description"," * Return the formatted date string in the given format."," *"," * Accepted tokens:"," * | Unit                    | Token | Result examples                  |"," * |-------------------------|-------|----------------------------------|"," * | Month                   | M     | 1, 2, ..., 12                    |"," * |                         | Mo    | 1st, 2nd, ..., 12th              |"," * |                         | MM    | 01, 02, ..., 12                  |"," * |                         | MMM   | Jan, Feb, ..., Dec               |"," * |                         | MMMM  | January, February, ..., December |"," * | Quarter                 | Q     | 1, 2, 3, 4                       |"," * |                         | Qo    | 1st, 2nd, 3rd, 4th               |"," * | Day of month            | D     | 1, 2, ..., 31                    |"," * |                         | Do    | 1st, 2nd, ..., 31st              |"," * |                         | DD    | 01, 02, ..., 31                  |"," * | Day of year             | DDD   | 1, 2, ..., 366                   |"," * |                         | DDDo  | 1st, 2nd, ..., 366th             |"," * |                         | DDDD  | 001, 002, ..., 366               |"," * | Day of week             | d     | 0, 1, ..., 6                     |"," * |                         | do    | 0th, 1st, ..., 6th               |"," * |                         | dd    | Su, Mo, ..., Sa                  |"," * |                         | ddd   | Sun, Mon, ..., Sat               |"," * |                         | dddd  | Sunday, Monday, ..., Saturday    |"," * | Day of ISO week         | E     | 1, 2, ..., 7                     |"," * | ISO week                | W     | 1, 2, ..., 53                    |"," * |                         | Wo    | 1st, 2nd, ..., 53rd              |"," * |                         | WW    | 01, 02, ..., 53                  |"," * | Year                    | YY    | 00, 01, ..., 99                  |"," * |                         | YYYY  | 1900, 1901, ..., 2099            |"," * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |"," * |                         | GGGG  | 1900, 1901, ..., 2099            |"," * | AM/PM                   | A     | AM, PM                           |"," * |                         | a     | am, pm                           |"," * |                         | aa    | a.m., p.m.                       |"," * | Hour                    | H     | 0, 1, ... 23                     |"," * |                         | HH    | 00, 01, ... 23                   |"," * |                         | h     | 1, 2, ..., 12                    |"," * |                         | hh    | 01, 02, ..., 12                  |"," * | Minute                  | m     | 0, 1, ..., 59                    |"," * |                         | mm    | 00, 01, ..., 59                  |"," * | Second                  | s     | 0, 1, ..., 59                    |"," * |                         | ss    | 00, 01, ..., 59                  |"," * | 1/10 of second          | S     | 0, 1, ..., 9                     |"," * | 1/100 of second         | SS    | 00, 01, ..., 99                  |"," * | Millisecond             | SSS   | 000, 001, ..., 999               |"," * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |"," * |                         | ZZ    | -0100, +0000, ..., +1200         |"," * | Seconds timestamp       | X     | 512969520                        |"," * | Milliseconds timestamp  | x     | 512969520900                     |"," *"," * The characters wrapped in square brackets are escaped."," *"," * The result may vary by locale."," *"," * @param {Date|String|Number} date - the original date"," * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens"," * @param {Object} [options] - the object with options"," * @param {Object} [options.locale=enLocale] - the locale object"," * @returns {String} the formatted date string"," *"," * @example"," * // Represent 11 February 2014 in middle-endian format:"," * var result = format("," *   new Date(2014, 1, 11),"," *   'MM/DD/YYYY'"," * )"," * //=> '02/11/2014'"," *"," * @example"," * // Represent 2 July 2014 in Esperanto:"," * var eoLocale = require('date-fns/locale/eo')"," * var result = format("," *   new Date(2014, 6, 2),"," *   'Do [de] MMMM YYYY',"," *   {locale: eoLocale}"," * )"," * //=> '2-a de julio 2014'"," */","function format (dirtyDate, dirtyFormatStr, dirtyOptions) {","  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ'","  var options = dirtyOptions || {}","","  var locale = options.locale","  var localeFormatters = enLocale.format.formatters","  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp","  if (locale && locale.format && locale.format.formatters) {","    localeFormatters = locale.format.formatters","","    if (locale.format.formattingTokensRegExp) {","      formattingTokensRegExp = locale.format.formattingTokensRegExp","    }","  }","","  var date = parse(dirtyDate)","","  if (!isValid(date)) {","    return 'Invalid Date'","  }","","  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp)","","  return formatFn(date)","}","","var formatters = {","  // Month: 1, 2, ..., 12","  'M': function (date) {","    return date.getMonth() + 1","  },","","  // Month: 01, 02, ..., 12","  'MM': function (date) {","    return addLeadingZeros(date.getMonth() + 1, 2)","  },","","  // Quarter: 1, 2, 3, 4","  'Q': function (date) {","    return Math.ceil((date.getMonth() + 1) / 3)","  },","","  // Day of month: 1, 2, ..., 31","  'D': function (date) {","    return date.getDate()","  },","","  // Day of month: 01, 02, ..., 31","  'DD': function (date) {","    return addLeadingZeros(date.getDate(), 2)","  },","","  // Day of year: 1, 2, ..., 366","  'DDD': function (date) {","    return getDayOfYear(date)","  },","","  // Day of year: 001, 002, ..., 366","  'DDDD': function (date) {","    return addLeadingZeros(getDayOfYear(date), 3)","  },","","  // Day of week: 0, 1, ..., 6","  'd': function (date) {","    return date.getDay()","  },","","  // Day of ISO week: 1, 2, ..., 7","  'E': function (date) {","    return date.getDay() || 7","  },","","  // ISO week: 1, 2, ..., 53","  'W': function (date) {","    return getISOWeek(date)","  },","","  // ISO week: 01, 02, ..., 53","  'WW': function (date) {","    return addLeadingZeros(getISOWeek(date), 2)","  },","","  // Year: 00, 01, ..., 99","  'YY': function (date) {","    return addLeadingZeros(date.getFullYear(), 4).substr(2)","  },","","  // Year: 1900, 1901, ..., 2099","  'YYYY': function (date) {","    return addLeadingZeros(date.getFullYear(), 4)","  },","","  // ISO week-numbering year: 00, 01, ..., 99","  'GG': function (date) {","    return String(getISOYear(date)).substr(2)","  },","","  // ISO week-numbering year: 1900, 1901, ..., 2099","  'GGGG': function (date) {","    return getISOYear(date)","  },","","  // Hour: 0, 1, ... 23","  'H': function (date) {","    return date.getHours()","  },","","  // Hour: 00, 01, ..., 23","  'HH': function (date) {","    return addLeadingZeros(date.getHours(), 2)","  },","","  // Hour: 1, 2, ..., 12","  'h': function (date) {","    var hours = date.getHours()","    if (hours === 0) {","      return 12","    } else if (hours > 12) {","      return hours % 12","    } else {","      return hours","    }","  },","","  // Hour: 01, 02, ..., 12","  'hh': function (date) {","    return addLeadingZeros(formatters['h'](date), 2)","  },","","  // Minute: 0, 1, ..., 59","  'm': function (date) {","    return date.getMinutes()","  },","","  // Minute: 00, 01, ..., 59","  'mm': function (date) {","    return addLeadingZeros(date.getMinutes(), 2)","  },","","  // Second: 0, 1, ..., 59","  's': function (date) {","    return date.getSeconds()","  },","","  // Second: 00, 01, ..., 59","  'ss': function (date) {","    return addLeadingZeros(date.getSeconds(), 2)","  },","","  // 1/10 of second: 0, 1, ..., 9","  'S': function (date) {","    return Math.floor(date.getMilliseconds() / 100)","  },","","  // 1/100 of second: 00, 01, ..., 99","  'SS': function (date) {","    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)","  },","","  // Millisecond: 000, 001, ..., 999","  'SSS': function (date) {","    return addLeadingZeros(date.getMilliseconds(), 3)","  },","","  // Timezone: -01:00, +00:00, ... +12:00","  'Z': function (date) {","    return formatTimezone(date.getTimezoneOffset(), ':')","  },","","  // Timezone: -0100, +0000, ... +1200","  'ZZ': function (date) {","    return formatTimezone(date.getTimezoneOffset())","  },","","  // Seconds timestamp: 512969520","  'X': function (date) {","    return Math.floor(date.getTime() / 1000)","  },","","  // Milliseconds timestamp: 512969520900","  'x': function (date) {","    return date.getTime()","  }","}","","function buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {","  var array = formatStr.match(formattingTokensRegExp)","  var length = array.length","","  var i","  var formatter","  for (i = 0; i < length; i++) {","    formatter = localeFormatters[array[i]] || formatters[array[i]]","    if (formatter) {","      array[i] = formatter","    } else {","      array[i] = removeFormattingTokens(array[i])","    }","  }","","  return function (date) {","    var output = ''","    for (var i = 0; i < length; i++) {","      if (array[i] instanceof Function) {","        output += array[i](date, formatters)","      } else {","        output += array[i]","      }","    }","    return output","  }","}","","function removeFormattingTokens (input) {","  if (input.match(/\\[[\\s\\S]/)) {","    return input.replace(/^\\[|]$/g, '')","  }","  return input.replace(/\\\\/g, '')","}","","function formatTimezone (offset, delimeter) {","  delimeter = delimeter || ''","  var sign = offset > 0 ? '-' : '+'","  var absOffset = Math.abs(offset)","  var hours = Math.floor(absOffset / 60)","  var minutes = absOffset % 60","  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)","}","","function addLeadingZeros (number, targetLength) {","  var output = Math.abs(number).toString()","  while (output.length < targetLength) {","    output = '0' + output","  }","  return output","}","","module.exports = format",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"91":1,"92":0,"93":0,"95":0,"96":0,"97":0,"98":0,"99":0,"101":0,"102":0,"106":0,"108":0,"109":0,"112":0,"114":0,"117":1,"120":0,"125":0,"130":0,"135":0,"140":0,"145":0,"150":0,"155":0,"160":0,"165":0,"170":0,"175":0,"180":0,"185":0,"190":0,"195":0,"200":0,"205":0,"206":0,"207":0,"208":0,"209":0,"211":0,"217":0,"222":0,"227":0,"232":0,"237":0,"242":0,"247":0,"252":0,"257":0,"262":0,"267":0,"272":0,"276":1,"277":0,"278":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"287":0,"291":0,"292":0,"293":0,"294":0,"295":0,"297":0,"300":0,"304":1,"305":0,"306":0,"308":0,"311":1,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"320":1,"321":0,"322":0,"323":0,"325":0,"328":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_day_of_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_day_of_year/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getDayOfYear","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":54}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":81}},"4":{"start":{"line":20,"column":0},"end":{"line":25,"column":1}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"6":{"start":{"line":22,"column":2},"end":{"line":22,"column":62}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":26}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":18}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":29}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var startOfYear = require('../start_of_year/index.js')","var differenceInCalendarDays = require('../difference_in_calendar_days/index.js')","","/**"," * @category Day Helpers"," * @summary Get the day of the year of the given date."," *"," * @description"," * Get the day of the year of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the day of year"," *"," * @example"," * // Which day of the year is 2 July 2014?"," * var result = getDayOfYear(new Date(2014, 6, 2))"," * //=> 183"," */","function getDayOfYear (dirtyDate) {","  var date = parse(dirtyDate)","  var diff = differenceInCalendarDays(date, startOfYear(date))","  var dayOfYear = diff + 1","  return dayOfYear","}","","module.exports = getDayOfYear",""],"l":{"1":1,"2":1,"3":1,"20":1,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfYear","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":24}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":49}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":27}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":28}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Return the start of a year for the given date."," *"," * @description"," * Return the start of a year for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of a year"," *"," * @example"," * // The start of a year for 2 September 2014 11:55:00:"," * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))"," * //=> Wed Jan 01 2014 00:00:00"," */","function startOfYear (dirtyDate) {","  var cleanDate = parse(dirtyDate)","  var date = new Date(0)","  date.setFullYear(cleanDate.getFullYear(), 0, 1)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = startOfYear",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_week/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getISOWeek","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":61}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":36}},"5":{"start":{"line":24,"column":0},"end":{"line":32,"column":1}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":29}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":76}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":52}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var startOfISOWeek = require('../start_of_iso_week/index.js')","var startOfISOYear = require('../start_of_iso_year/index.js')","","var MILLISECONDS_IN_WEEK = 604800000","","/**"," * @category ISO Week Helpers"," * @summary Get the ISO week of the given date."," *"," * @description"," * Get the ISO week of the given date."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the ISO week"," *"," * @example"," * // Which week of the ISO-week numbering year is 2 January 2005?"," * var result = getISOWeek(new Date(2005, 0, 2))"," * //=> 53"," */","function getISOWeek (dirtyDate) {","  var date = parse(dirtyDate)","  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime()","","  // Round the number of days to the nearest integer","  // because the number of milliseconds in a week is not constant","  // (e.g. it's different in the week of the daylight saving time clock shift)","  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1","}","","module.exports = getISOWeek",""],"l":{"1":1,"2":1,"3":1,"5":1,"24":1,"25":0,"26":0,"31":0,"34":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_valid/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_valid/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"isValid","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":29}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":43}},"2":{"start":{"line":27,"column":0},"end":{"line":33,"column":1}},"3":{"start":{"line":28,"column":2},"end":{"line":32,"column":3}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":28}},"5":{"start":{"line":31,"column":4},"end":{"line":31,"column":81}},"6":{"start":{"line":35,"column":0},"end":{"line":35,"column":24}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]}},"code":["var isDate = require('../is_date/index.js')","","/**"," * @category Common Helpers"," * @summary Is the given date valid?"," *"," * @description"," * Returns false if argument is Invalid Date and true otherwise."," * Invalid Date is a Date, whose time value is NaN."," *"," * Time value of Date: http://es5.github.io/#x15.9.1.1"," *"," * @param {Date} date - the date to check"," * @returns {Boolean} the date is valid"," * @throws {TypeError} argument must be an instance of Date"," *"," * @example"," * // For the valid date:"," * var result = isValid(new Date(2014, 1, 31))"," * //=> true"," *"," * @example"," * // For the invalid date:"," * var result = isValid(new Date(''))"," * //=> false"," */","function isValid (dirtyDate) {","  if (isDate(dirtyDate)) {","    return !isNaN(dirtyDate)","  } else {","    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')","  }","}","","module.exports = isValid",""],"l":{"1":1,"27":1,"28":0,"29":0,"31":0,"35":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_date/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_date/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getDate","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":29}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":33}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":19}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Day Helpers"," * @summary Get the day of the month of the given date."," *"," * @description"," * Get the day of the month of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the day of month"," *"," * @example"," * // Which day of the month is 29 February 2012?"," * var result = getDate(new Date(2012, 1, 29))"," * //=> 29"," */","function getDate (dirtyDate) {","  var date = parse(dirtyDate)","  var dayOfMonth = date.getDate()","  return dayOfMonth","}","","module.exports = getDate",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_day/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getDay","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":25}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":12}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":23}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Get the day of the week of the given date."," *"," * @description"," * Get the day of the week of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the day of week"," *"," * @example"," * // Which day of the week is 29 February 2012?"," * var result = getDay(new Date(2012, 1, 29))"," * //=> 3"," */","function getDay (dirtyDate) {","  var date = parse(dirtyDate)","  var day = date.getDay()","  return day","}","","module.exports = getDay",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_days_in_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_days_in_year/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"getDaysInYear","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":42}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":30}}},"branchMap":{"1":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":33},"end":{"line":19,"column":36}},{"start":{"line":19,"column":39},"end":{"line":19,"column":42}}]}},"code":["var isLeapYear = require('../is_leap_year/index.js')","","/**"," * @category Year Helpers"," * @summary Get the number of days in a year of the given date."," *"," * @description"," * Get the number of days in a year of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the number of days in a year"," *"," * @example"," * // How many days are in 2012?"," * var result = getDaysInYear(new Date(2012, 0, 1))"," * //=> 366"," */","function getDaysInYear (dirtyDate) {","  return isLeapYear(dirtyDate) ? 366 : 365","}","","module.exports = getDaysInYear",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_leap_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_leap_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"isLeapYear","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":31}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":63}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":9},"end":{"line":21,"column":25}},{"start":{"line":21,"column":29},"end":{"line":21,"column":43}},{"start":{"line":21,"column":47},"end":{"line":21,"column":63}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Is the given date in the leap year?"," *"," * @description"," * Is the given date in the leap year?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in the leap year"," *"," * @example"," * // Is 1 September 2012 in the leap year?"," * var result = isLeapYear(new Date(2012, 8, 1))"," * //=> true"," */","function isLeapYear (dirtyDate) {","  var date = parse(dirtyDate)","  var year = date.getFullYear()","  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0","}","","module.exports = isLeapYear",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_hours/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_hours/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getHours","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":14}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Hour Helpers"," * @summary Get the hours of the given date."," *"," * @description"," * Get the hours of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the hours"," *"," * @example"," * // Get the hours of 29 February 2012 11:45:00:"," * var result = getHours(new Date(2012, 1, 29, 11, 45))"," * //=> 11"," */","function getHours (dirtyDate) {","  var date = parse(dirtyDate)","  var hours = date.getHours()","  return hours","}","","module.exports = getHours",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_day/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"getISODay","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":31}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":21,"column":0},"end":{"line":30,"column":1}},"3":{"start":{"line":22,"column":2},"end":{"line":22,"column":29}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":25}},"5":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"6":{"start":{"line":26,"column":4},"end":{"line":26,"column":11}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":12}},"8":{"start":{"line":32,"column":0},"end":{"line":32,"column":26}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Get the day of the ISO week of the given date."," *"," * @description"," * Get the day of the ISO week of the given date,"," * which is 7 for Sunday, 1 for Monday etc."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the day of ISO week"," *"," * @example"," * // Which day of the ISO week is 26 February 2012?"," * var result = getISODay(new Date(2012, 1, 26))"," * //=> 7"," */","function getISODay (dirtyDate) {","  var date = parse(dirtyDate)","  var day = date.getDay()","","  if (day === 0) {","    day = 7","  }","","  return day","}","","module.exports = getISODay",""],"l":{"1":1,"21":1,"22":0,"23":0,"25":0,"26":0,"29":0,"32":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_weeks_in_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_iso_weeks_in_year/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getISOWeeksInYear","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":39}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":47}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":36}},"4":{"start":{"line":23,"column":0},"end":{"line":31,"column":1}},"5":{"start":{"line":24,"column":2},"end":{"line":24,"column":42}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":55}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":52}},"8":{"start":{"line":30,"column":2},"end":{"line":30,"column":48}},"9":{"start":{"line":33,"column":0},"end":{"line":33,"column":34}}},"branchMap":{},"code":["var startOfISOYear = require('../start_of_iso_year/index.js')","var addWeeks = require('../add_weeks/index.js')","","var MILLISECONDS_IN_WEEK = 604800000","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Get the number of weeks in an ISO week-numbering year of the given date."," *"," * @description"," * Get the number of weeks in an ISO week-numbering year of the given date."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the number of ISO weeks in a year"," *"," * @example"," * // How many weeks are in ISO week-numbering year 2015?"," * var result = getISOWeeksInYear(new Date(2015, 1, 11))"," * //=> 53"," */","function getISOWeeksInYear (dirtyDate) {","  var thisYear = startOfISOYear(dirtyDate)","  var nextYear = startOfISOYear(addWeeks(thisYear, 60))","  var diff = nextYear.valueOf() - thisYear.valueOf()","  // Round the number of weeks to the nearest integer","  // because the number of milliseconds in a week is not constant","  // (e.g. it's different in the week of the daylight saving time clock shift)","  return Math.round(diff / MILLISECONDS_IN_WEEK)","}","","module.exports = getISOWeeksInYear",""],"l":{"1":1,"2":1,"4":1,"23":1,"24":0,"25":0,"26":0,"30":0,"33":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_milliseconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_milliseconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getMilliseconds","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":37}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":43}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":21}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Millisecond Helpers"," * @summary Get the milliseconds of the given date."," *"," * @description"," * Get the milliseconds of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the milliseconds"," *"," * @example"," * // Get the milliseconds of 29 February 2012 11:45:05.123:"," * var result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))"," * //=> 123"," */","function getMilliseconds (dirtyDate) {","  var date = parse(dirtyDate)","  var milliseconds = date.getMilliseconds()","  return milliseconds","}","","module.exports = getMilliseconds",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_minutes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_minutes/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getMinutes","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":33}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":16}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Minute Helpers"," * @summary Get the minutes of the given date."," *"," * @description"," * Get the minutes of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the minutes"," *"," * @example"," * // Get the minutes of 29 February 2012 11:45:05:"," * var result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))"," * //=> 45"," */","function getMinutes (dirtyDate) {","  var date = parse(dirtyDate)","  var minutes = date.getMinutes()","  return minutes","}","","module.exports = getMinutes",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_month/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getMonth","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":14}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Get the month of the given date."," *"," * @description"," * Get the month of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the month"," *"," * @example"," * // Which month is 29 February 2012?"," * var result = getMonth(new Date(2012, 1, 29))"," * //=> 1"," */","function getMonth (dirtyDate) {","  var date = parse(dirtyDate)","  var month = date.getMonth()","  return month","}","","module.exports = getMonth",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_overlapping_days_in_ranges/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_overlapping_days_in_ranges/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"getOverlappingDaysInRanges","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":147}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"3":{"start":{"line":33,"column":0},"end":{"line":60,"column":1}},"4":{"start":{"line":34,"column":2},"end":{"line":34,"column":68}},"5":{"start":{"line":35,"column":2},"end":{"line":35,"column":64}},"6":{"start":{"line":36,"column":2},"end":{"line":36,"column":70}},"7":{"start":{"line":37,"column":2},"end":{"line":37,"column":66}},"8":{"start":{"line":39,"column":2},"end":{"line":41,"column":3}},"9":{"start":{"line":40,"column":4},"end":{"line":40,"column":82}},"10":{"start":{"line":43,"column":2},"end":{"line":43,"column":94}},"11":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"12":{"start":{"line":46,"column":4},"end":{"line":46,"column":12}},"13":{"start":{"line":49,"column":2},"end":{"line":51,"column":23}},"14":{"start":{"line":53,"column":2},"end":{"line":55,"column":21}},"15":{"start":{"line":57,"column":2},"end":{"line":57,"column":56}},"16":{"start":{"line":59,"column":2},"end":{"line":59,"column":56}},"17":{"start":{"line":62,"column":0},"end":{"line":62,"column":43}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"2":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":39}},{"start":{"line":39,"column":43},"end":{"line":39,"column":78}}]},"3":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":22},"end":{"line":43,"column":56}},{"start":{"line":43,"column":60},"end":{"line":43,"column":94}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"5":{"line":49,"type":"cond-expr","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":22}},{"start":{"line":51,"column":6},"end":{"line":51,"column":23}}]},"6":{"line":53,"type":"cond-expr","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":20}},{"start":{"line":55,"column":6},"end":{"line":55,"column":21}}]}},"code":["var parse = require('../parse/index.js')","","var MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000","","/**"," * @category Range Helpers"," * @summary Get the number of days that overlap in two date ranges"," *"," * @description"," * Get the number of days that overlap in two date ranges"," *"," * @param {Date|String|Number} initialRangeStartDate - the start of the initial range"," * @param {Date|String|Number} initialRangeEndDate - the end of the initial range"," * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with"," * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with"," * @returns {Number} the number of days that overlap in two date ranges"," * @throws {Error} startDate of a date range cannot be after its endDate"," *"," * @example"," * // For overlapping date ranges adds 1 for each started overlapping day:"," * getOverlappingDaysInRanges("," *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)"," * )"," * //=> 3"," *"," * @example"," * // For non-overlapping date ranges returns 0:"," * getOverlappingDaysInRanges("," *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)"," * )"," * //=> 0"," */","function getOverlappingDaysInRanges (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {","  var initialStartTime = parse(dirtyInitialRangeStartDate).getTime()","  var initialEndTime = parse(dirtyInitialRangeEndDate).getTime()","  var comparedStartTime = parse(dirtyComparedRangeStartDate).getTime()","  var comparedEndTime = parse(dirtyComparedRangeEndDate).getTime()","","  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {","    throw new Error('The start of the range cannot be after the end of the range')","  }","","  var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime","","  if (!isOverlapping) {","    return 0","  }","","  var overlapStartDate = comparedStartTime < initialStartTime","    ? initialStartTime","    : comparedStartTime","","  var overlapEndDate = comparedEndTime > initialEndTime","    ? initialEndTime","    : comparedEndTime","","  var differenceInMs = overlapEndDate - overlapStartDate","","  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY)","}","","module.exports = getOverlappingDaysInRanges",""],"l":{"1":1,"3":1,"33":1,"34":0,"35":0,"36":0,"37":0,"39":0,"40":0,"43":0,"45":0,"46":0,"49":0,"53":0,"57":0,"59":0,"62":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_seconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_seconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getSeconds","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":33}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":16}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Second Helpers"," * @summary Get the seconds of the given date."," *"," * @description"," * Get the seconds of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the seconds"," *"," * @example"," * // Get the seconds of 29 February 2012 11:45:05.123:"," * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))"," * //=> 5"," */","function getSeconds (dirtyDate) {","  var date = parse(dirtyDate)","  var seconds = date.getSeconds()","  return seconds","}","","module.exports = getSeconds",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_time/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_time/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getTime","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":29}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":32}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":18}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Timestamp Helpers"," * @summary Get the milliseconds timestamp of the given date."," *"," * @description"," * Get the milliseconds timestamp of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the timestamp"," *"," * @example"," * // Get the timestamp of 29 February 2012 11:45:05.123:"," * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))"," * //=> 1330515905123"," */","function getTime (dirtyDate) {","  var date = parse(dirtyDate)","  var timestamp = date.getTime()","  return timestamp","}","","module.exports = getTime",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/get_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"getYear","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":29}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":31}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":13}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Get the year of the given date."," *"," * @description"," * Get the year of the given date."," *"," * @param {Date|String|Number} date - the given date"," * @returns {Number} the year"," *"," * @example"," * // Which year is 2 July 2014?"," * var result = getYear(new Date(2014, 6, 2))"," * //=> 2014"," */","function getYear (dirtyDate) {","  var date = parse(dirtyDate)","  var year = date.getFullYear()","  return year","}","","module.exports = getYear",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_after/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isAfter","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":49}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":47}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":49}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Is the first date after the second one?"," *"," * @description"," * Is the first date after the second one?"," *"," * @param {Date|String|Number} date - the date that should be after the other one to return true"," * @param {Date|String|Number} dateToCompare - the date to compare with"," * @returns {Boolean} the first date is after the second date"," *"," * @example"," * // Is 10 July 1989 after 11 February 1987?"," * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))"," * //=> true"," */","function isAfter (dirtyDate, dirtyDateToCompare) {","  var date = parse(dirtyDate)","  var dateToCompare = parse(dirtyDateToCompare)","  return date.getTime() > dateToCompare.getTime()","}","","module.exports = isAfter",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_before/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isBefore","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":50}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":47}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":49}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Is the first date before the second one?"," *"," * @description"," * Is the first date before the second one?"," *"," * @param {Date|String|Number} date - the date that should be before the other one to return true"," * @param {Date|String|Number} dateToCompare - the date to compare with"," * @returns {Boolean} the first date is before the second date"," *"," * @example"," * // Is 10 July 1989 before 11 February 1987?"," * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))"," * //=> false"," */","function isBefore (dirtyDate, dirtyDateToCompare) {","  var date = parse(dirtyDate)","  var dateToCompare = parse(dirtyDateToCompare)","  return date.getTime() < dateToCompare.getTime()","}","","module.exports = isBefore",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_equal/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_equal/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isEqual","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":49}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":22,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":37}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":39}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":51}},"6":{"start":{"line":28,"column":0},"end":{"line":28,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Are the given dates equal?"," *"," * @description"," * Are the given dates equal?"," *"," * @param {Date|String|Number} dateLeft - the first date to compare"," * @param {Date|String|Number} dateRight - the second date to compare"," * @returns {Boolean} the dates are equal"," *"," * @example"," * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?"," * var result = isEqual("," *   new Date(2014, 6, 2, 6, 30, 45, 0)"," *   new Date(2014, 6, 2, 6, 30, 45, 500)"," * )"," * //=> false"," */","function isEqual (dirtyLeftDate, dirtyRightDate) {","  var dateLeft = parse(dirtyLeftDate)","  var dateRight = parse(dirtyRightDate)","  return dateLeft.getTime() === dateRight.getTime()","}","","module.exports = isEqual",""],"l":{"1":1,"22":1,"23":0,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_first_day_of_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_first_day_of_month/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isFirstDayOfMonth","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":39}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":41}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":34}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Is the given date the first day of a month?"," *"," * @description"," * Is the given date the first day of a month?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is the first day of a month"," *"," * @example"," * // Is 1 September 2014 the first day of a month?"," * var result = isFirstDayOfMonth(new Date(2014, 8, 1))"," * //=> true"," */","function isFirstDayOfMonth (dirtyDate) {","  return parse(dirtyDate).getDate() === 1","}","","module.exports = isFirstDayOfMonth",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_friday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_friday/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isFriday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Is the given date Friday?"," *"," * @description"," * Is the given date Friday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is Friday"," *"," * @example"," * // Is 26 September 2014 Friday?"," * var result = isFriday(new Date(2014, 8, 26))"," * //=> true"," */","function isFriday (dirtyDate) {","  return parse(dirtyDate).getDay() === 5","}","","module.exports = isFriday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_future/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_future/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isFuture","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":58}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Is the given date in the future?"," *"," * @description"," * Is the given date in the future?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in the future"," *"," * @example"," * // If today is 6 October 2014, is 31 December 2014 in the future?"," * var result = isFuture(new Date(2014, 11, 31))"," * //=> true"," */","function isFuture (dirtyDate) {","  return parse(dirtyDate).getTime() > new Date().getTime()","}","","module.exports = isFuture",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_last_day_of_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_last_day_of_month/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isLastDayOfMonth","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":38}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":48}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":52}},"4":{"start":{"line":20,"column":0},"end":{"line":23,"column":1}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"6":{"start":{"line":22,"column":2},"end":{"line":22,"column":64}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":33}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var endOfDay = require('../end_of_day/index.js')","var endOfMonth = require('../end_of_month/index.js')","","/**"," * @category Month Helpers"," * @summary Is the given date the last day of a month?"," *"," * @description"," * Is the given date the last day of a month?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is the last day of a month"," *"," * @example"," * // Is 28 February 2014 the last day of a month?"," * var result = isLastDayOfMonth(new Date(2014, 1, 28))"," * //=> true"," */","function isLastDayOfMonth (dirtyDate) {","  var date = parse(dirtyDate)","  return endOfDay(date).getTime() === endOfMonth(date).getTime()","}","","module.exports = isLastDayOfMonth",""],"l":{"1":1,"2":1,"3":1,"20":1,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_monday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_monday/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isMonday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Is the given date Monday?"," *"," * @description"," * Is the given date Monday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is Monday"," *"," * @example"," * // Is 22 September 2014 Monday?"," * var result = isMonday(new Date(2014, 8, 22))"," * //=> true"," */","function isMonday (dirtyDate) {","  return parse(dirtyDate).getDay() === 1","}","","module.exports = isMonday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_past/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_past/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isPast","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":58}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":23}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Is the given date in the past?"," *"," * @description"," * Is the given date in the past?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in the past"," *"," * @example"," * // If today is 6 October 2014, is 2 July 2014 in the past?"," * var result = isPast(new Date(2014, 6, 2))"," * //=> true"," */","function isPast (dirtyDate) {","  return parse(dirtyDate).getTime() < new Date().getTime()","}","","module.exports = isPast",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_day/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameDay","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":51}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":22,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":52}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":54}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":71}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":26}}},"branchMap":{},"code":["var startOfDay = require('../start_of_day/index.js')","","/**"," * @category Day Helpers"," * @summary Are the given dates in the same day?"," *"," * @description"," * Are the given dates in the same day?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same day"," *"," * @example"," * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?"," * var result = isSameDay("," *   new Date(2014, 8, 4, 6, 0),"," *   new Date(2014, 8, 4, 18, 0)"," * )"," * //=> true"," */","function isSameDay (dirtyDateLeft, dirtyDateRight) {","  var dateLeftStartOfDay = startOfDay(dirtyDateLeft)","  var dateRightStartOfDay = startOfDay(dirtyDateRight)","","  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime()","}","","module.exports = isSameDay",""],"l":{"1":1,"22":1,"23":0,"24":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_hour/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_hour/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameHour","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":52}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":54}},"2":{"start":{"line":22,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":54}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":56}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":73}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":27}}},"branchMap":{},"code":["var startOfHour = require('../start_of_hour/index.js')","","/**"," * @category Hour Helpers"," * @summary Are the given dates in the same hour?"," *"," * @description"," * Are the given dates in the same hour?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same hour"," *"," * @example"," * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?"," * var result = isSameHour("," *   new Date(2014, 8, 4, 6, 0),"," *   new Date(2014, 8, 4, 6, 30)"," * )"," * //=> true"," */","function isSameHour (dirtyDateLeft, dirtyDateRight) {","  var dateLeftStartOfHour = startOfHour(dirtyDateLeft)","  var dateRightStartOfHour = startOfHour(dirtyDateRight)","","  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime()","}","","module.exports = isSameHour",""],"l":{"1":1,"22":1,"23":0,"24":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_hour/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_hour/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfHour","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":26}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":28}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Hour Helpers"," * @summary Return the start of an hour for the given date."," *"," * @description"," * Return the start of an hour for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of an hour"," *"," * @example"," * // The start of an hour for 2 September 2014 11:55:00:"," * var result = startOfHour(new Date(2014, 8, 2, 11, 55))"," * //=> Tue Sep 02 2014 11:00:00"," */","function startOfHour (dirtyDate) {","  var date = parse(dirtyDate)","  date.setMinutes(0, 0, 0)","  return date","}","","module.exports = startOfHour",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_iso_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_iso_week/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameISOWeek","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":55}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":25,"column":2},"end":{"line":25,"column":69}},"4":{"start":{"line":28,"column":0},"end":{"line":28,"column":30}}},"branchMap":{},"code":["var isSameWeek = require('../is_same_week/index.js')","","/**"," * @category ISO Week Helpers"," * @summary Are the given dates in the same ISO week?"," *"," * @description"," * Are the given dates in the same ISO week?"," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same ISO week"," *"," * @example"," * // Are 1 September 2014 and 7 September 2014 in the same ISO week?"," * var result = isSameISOWeek("," *   new Date(2014, 8, 1),"," *   new Date(2014, 8, 7)"," * )"," * //=> true"," */","function isSameISOWeek (dirtyDateLeft, dirtyDateRight) {","  return isSameWeek(dirtyDateLeft, dirtyDateRight, {weekStartsOn: 1})","}","","module.exports = isSameISOWeek",""],"l":{"1":1,"24":1,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_week/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameWeek","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":66}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":54}},"2":{"start":{"line":34,"column":0},"end":{"line":39,"column":1}},"3":{"start":{"line":35,"column":2},"end":{"line":35,"column":68}},"4":{"start":{"line":36,"column":2},"end":{"line":36,"column":70}},"5":{"start":{"line":38,"column":2},"end":{"line":38,"column":73}},"6":{"start":{"line":41,"column":0},"end":{"line":41,"column":27}}},"branchMap":{},"code":["var startOfWeek = require('../start_of_week/index.js')","","/**"," * @category Week Helpers"," * @summary Are the given dates in the same week?"," *"," * @description"," * Are the given dates in the same week?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @param {Object} [options] - the object with options"," * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)"," * @returns {Boolean} the dates are in the same week"," *"," * @example"," * // Are 31 August 2014 and 4 September 2014 in the same week?"," * var result = isSameWeek("," *   new Date(2014, 7, 31),"," *   new Date(2014, 8, 4)"," * )"," * //=> true"," *"," * @example"," * // If week starts with Monday,"," * // are 31 August 2014 and 4 September 2014 in the same week?"," * var result = isSameWeek("," *   new Date(2014, 7, 31),"," *   new Date(2014, 8, 4),"," *   {weekStartsOn: 1}"," * )"," * //=> false"," */","function isSameWeek (dirtyDateLeft, dirtyDateRight, dirtyOptions) {","  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions)","  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions)","","  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime()","}","","module.exports = isSameWeek",""],"l":{"1":1,"34":1,"35":0,"36":0,"38":0,"41":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_iso_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_iso_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameISOYear","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":55}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":24,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":25,"column":2},"end":{"line":25,"column":57}},"4":{"start":{"line":26,"column":2},"end":{"line":26,"column":59}},"5":{"start":{"line":28,"column":2},"end":{"line":28,"column":73}},"6":{"start":{"line":31,"column":0},"end":{"line":31,"column":30}}},"branchMap":{},"code":["var startOfISOYear = require('../start_of_iso_year/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Are the given dates in the same ISO week-numbering year?"," *"," * @description"," * Are the given dates in the same ISO week-numbering year?"," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same ISO week-numbering year"," *"," * @example"," * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?"," * var result = isSameISOYear("," *   new Date(2003, 11, 29),"," *   new Date(2005, 0, 2)"," * )"," * //=> true"," */","function isSameISOYear (dirtyDateLeft, dirtyDateRight) {","  var dateLeftStartOfYear = startOfISOYear(dirtyDateLeft)","  var dateRightStartOfYear = startOfISOYear(dirtyDateRight)","","  return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime()","}","","module.exports = isSameISOYear",""],"l":{"1":1,"24":1,"25":0,"26":0,"28":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_minute/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_minute/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameMinute","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":54}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":58}},"2":{"start":{"line":23,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":58}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":60}},"5":{"start":{"line":27,"column":2},"end":{"line":27,"column":77}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":29}}},"branchMap":{},"code":["var startOfMinute = require('../start_of_minute/index.js')","","/**"," * @category Minute Helpers"," * @summary Are the given dates in the same minute?"," *"," * @description"," * Are the given dates in the same minute?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same minute"," *"," * @example"," * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15"," * // in the same minute?"," * var result = isSameMinute("," *   new Date(2014, 8, 4, 6, 30),"," *   new Date(2014, 8, 4, 6, 30, 15)"," * )"," * //=> true"," */","function isSameMinute (dirtyDateLeft, dirtyDateRight) {","  var dateLeftStartOfMinute = startOfMinute(dirtyDateLeft)","  var dateRightStartOfMinute = startOfMinute(dirtyDateRight)","","  return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime()","}","","module.exports = isSameMinute",""],"l":{"1":1,"23":1,"24":0,"25":0,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_minute/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_minute/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfMinute","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":23}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":30}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Minute Helpers"," * @summary Return the start of a minute for the given date."," *"," * @description"," * Return the start of a minute for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of a minute"," *"," * @example"," * // The start of a minute for 1 December 2014 22:15:45.400:"," * var result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))"," * //=> Mon Dec 01 2014 22:15:00"," */","function startOfMinute (dirtyDate) {","  var date = parse(dirtyDate)","  date.setSeconds(0, 0)","  return date","}","","module.exports = startOfMinute",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_month/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"isSameMonth","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":22,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":37}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":39}},"5":{"start":{"line":25,"column":2},"end":{"line":26,"column":48}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":28}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":9},"end":{"line":25,"column":59}},{"start":{"line":26,"column":4},"end":{"line":26,"column":48}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Are the given dates in the same month?"," *"," * @description"," * Are the given dates in the same month?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same month"," *"," * @example"," * // Are 2 September 2014 and 25 September 2014 in the same month?"," * var result = isSameMonth("," *   new Date(2014, 8, 2),"," *   new Date(2014, 8, 25)"," * )"," * //=> true"," */","function isSameMonth (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","  return dateLeft.getFullYear() === dateRight.getFullYear() &&","    dateLeft.getMonth() === dateRight.getMonth()","}","","module.exports = isSameMonth",""],"l":{"1":1,"22":1,"23":0,"24":0,"25":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_quarter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_quarter/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameQuarter","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":55}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":60}},"2":{"start":{"line":22,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":60}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":62}},"5":{"start":{"line":26,"column":2},"end":{"line":26,"column":79}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":30}}},"branchMap":{},"code":["var startOfQuarter = require('../start_of_quarter/index.js')","","/**"," * @category Quarter Helpers"," * @summary Are the given dates in the same year quarter?"," *"," * @description"," * Are the given dates in the same year quarter?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same quarter"," *"," * @example"," * // Are 1 January 2014 and 8 March 2014 in the same quarter?"," * var result = isSameQuarter("," *   new Date(2014, 0, 1),"," *   new Date(2014, 2, 8)"," * )"," * //=> true"," */","function isSameQuarter (dirtyDateLeft, dirtyDateRight) {","  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft)","  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight)","","  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime()","}","","module.exports = isSameQuarter",""],"l":{"1":1,"22":1,"23":0,"24":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_quarter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_quarter/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfQuarter","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":36}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":36}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":45}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":25}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":27}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":13}},"9":{"start":{"line":28,"column":0},"end":{"line":28,"column":31}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Quarter Helpers"," * @summary Return the start of a year quarter for the given date."," *"," * @description"," * Return the start of a year quarter for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of a quarter"," *"," * @example"," * // The start of a quarter for 2 September 2014 11:55:00:"," * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Tue Jul 01 2014 00:00:00"," */","function startOfQuarter (dirtyDate) {","  var date = parse(dirtyDate)","  var currentMonth = date.getMonth()","  var month = currentMonth - currentMonth % 3","  date.setMonth(month, 1)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = startOfQuarter",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_second/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_second/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameSecond","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":54}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":58}},"2":{"start":{"line":23,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":58}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":60}},"5":{"start":{"line":27,"column":2},"end":{"line":27,"column":77}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":29}}},"branchMap":{},"code":["var startOfSecond = require('../start_of_second/index.js')","","/**"," * @category Second Helpers"," * @summary Are the given dates in the same second?"," *"," * @description"," * Are the given dates in the same second?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same second"," *"," * @example"," * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500"," * // in the same second?"," * var result = isSameSecond("," *   new Date(2014, 8, 4, 6, 30, 15),"," *   new Date(2014, 8, 4, 6, 30, 15, 500)"," * )"," * //=> true"," */","function isSameSecond (dirtyDateLeft, dirtyDateRight) {","  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft)","  var dateRightStartOfSecond = startOfSecond(dirtyDateRight)","","  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime()","}","","module.exports = isSameSecond",""],"l":{"1":1,"23":1,"24":0,"25":0,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_second/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_second/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfSecond","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":25}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":30}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Second Helpers"," * @summary Return the start of a second for the given date."," *"," * @description"," * Return the start of a second for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of a second"," *"," * @example"," * // The start of a second for 1 December 2014 22:15:45.400:"," * var result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))"," * //=> Mon Dec 01 2014 22:15:45.000"," */","function startOfSecond (dirtyDate) {","  var date = parse(dirtyDate)","  date.setMilliseconds(0)","  return date","}","","module.exports = startOfSecond",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_same_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSameYear","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":52}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":22,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":23,"column":2},"end":{"line":23,"column":37}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":39}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":59}},"6":{"start":{"line":28,"column":0},"end":{"line":28,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Are the given dates in the same year?"," *"," * @description"," * Are the given dates in the same year?"," *"," * @param {Date|String|Number} dateLeft - the first date to check"," * @param {Date|String|Number} dateRight - the second date to check"," * @returns {Boolean} the dates are in the same year"," *"," * @example"," * // Are 2 September 2014 and 25 September 2014 in the same year?"," * var result = isSameYear("," *   new Date(2014, 8, 2),"," *   new Date(2014, 8, 25)"," * )"," * //=> true"," */","function isSameYear (dirtyDateLeft, dirtyDateRight) {","  var dateLeft = parse(dirtyDateLeft)","  var dateRight = parse(dirtyDateRight)","  return dateLeft.getFullYear() === dateRight.getFullYear()","}","","module.exports = isSameYear",""],"l":{"1":1,"22":1,"23":0,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_saturday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_saturday/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSaturday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Is the given date Saturday?"," *"," * @description"," * Is the given date Saturday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is Saturday"," *"," * @example"," * // Is 27 September 2014 Saturday?"," * var result = isSaturday(new Date(2014, 8, 27))"," * //=> true"," */","function isSaturday (dirtyDate) {","  return parse(dirtyDate).getDay() === 6","}","","module.exports = isSaturday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_sunday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_sunday/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isSunday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Is the given date Sunday?"," *"," * @description"," * Is the given date Sunday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is Sunday"," *"," * @example"," * // Is 21 September 2014 Sunday?"," * var result = isSunday(new Date(2014, 8, 21))"," * //=> true"," */","function isSunday (dirtyDate) {","  return parse(dirtyDate).getDay() === 0","}","","module.exports = isSunday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_hour/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_hour/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisHour","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":19,"column":0},"end":{"line":21,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":42}},"4":{"start":{"line":23,"column":0},"end":{"line":23,"column":27}}},"branchMap":{},"code":["var isSameHour = require('../is_same_hour/index.js')","","/**"," * @category Hour Helpers"," * @summary Is the given date in the same hour as the current date?"," *"," * @description"," * Is the given date in the same hour as the current date?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this hour"," *"," * @example"," * // If now is 25 September 2014 18:30:15.500,"," * // is 25 September 2014 18:00:00 in this hour?"," * var result = isThisHour(new Date(2014, 8, 25, 18))"," * //=> true"," */","function isThisHour (dirtyDate) {","  return isSameHour(new Date(), dirtyDate)","}","","module.exports = isThisHour",""],"l":{"1":1,"19":1,"20":0,"23":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_iso_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_iso_week/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisISOWeek","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":59}},"2":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":21,"column":2},"end":{"line":21,"column":45}},"4":{"start":{"line":24,"column":0},"end":{"line":24,"column":30}}},"branchMap":{},"code":["var isSameISOWeek = require('../is_same_iso_week/index.js')","","/**"," * @category ISO Week Helpers"," * @summary Is the given date in the same ISO week as the current date?"," *"," * @description"," * Is the given date in the same ISO week as the current date?"," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this ISO week"," *"," * @example"," * // If today is 25 September 2014, is 22 September 2014 in this ISO week?"," * var result = isThisISOWeek(new Date(2014, 8, 22))"," * //=> true"," */","function isThisISOWeek (dirtyDate) {","  return isSameISOWeek(new Date(), dirtyDate)","}","","module.exports = isThisISOWeek",""],"l":{"1":1,"20":1,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_iso_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_iso_year/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisISOYear","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":59}},"2":{"start":{"line":21,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":22,"column":2},"end":{"line":22,"column":45}},"4":{"start":{"line":25,"column":0},"end":{"line":25,"column":30}}},"branchMap":{},"code":["var isSameISOYear = require('../is_same_iso_year/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Is the given date in the same ISO week-numbering year as the current date?"," *"," * @description"," * Is the given date in the same ISO week-numbering year as the current date?"," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this ISO week-numbering year"," *"," * @example"," * // If today is 25 September 2014,"," * // is 30 December 2013 in this ISO week-numbering year?"," * var result = isThisISOYear(new Date(2013, 11, 30))"," * //=> true"," */","function isThisISOYear (dirtyDate) {","  return isSameISOYear(new Date(), dirtyDate)","}","","module.exports = isThisISOYear",""],"l":{"1":1,"21":1,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_minute/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_minute/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisMinute","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":56}},"2":{"start":{"line":19,"column":0},"end":{"line":21,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":44}},"4":{"start":{"line":23,"column":0},"end":{"line":23,"column":29}}},"branchMap":{},"code":["var isSameMinute = require('../is_same_minute/index.js')","","/**"," * @category Minute Helpers"," * @summary Is the given date in the same minute as the current date?"," *"," * @description"," * Is the given date in the same minute as the current date?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this minute"," *"," * @example"," * // If now is 25 September 2014 18:30:15.500,"," * // is 25 September 2014 18:30:00 in this minute?"," * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))"," * //=> true"," */","function isThisMinute (dirtyDate) {","  return isSameMinute(new Date(), dirtyDate)","}","","module.exports = isThisMinute",""],"l":{"1":1,"19":1,"20":0,"23":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_month/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisMonth","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":54}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":43}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":28}}},"branchMap":{},"code":["var isSameMonth = require('../is_same_month/index.js')","","/**"," * @category Month Helpers"," * @summary Is the given date in the same month as the current date?"," *"," * @description"," * Is the given date in the same month as the current date?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this month"," *"," * @example"," * // If today is 25 September 2014, is 15 September 2014 in this month?"," * var result = isThisMonth(new Date(2014, 8, 15))"," * //=> true"," */","function isThisMonth (dirtyDate) {","  return isSameMonth(new Date(), dirtyDate)","}","","module.exports = isThisMonth",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_quarter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_quarter/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisQuarter","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":58}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":45}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":30}}},"branchMap":{},"code":["var isSameQuarter = require('../is_same_quarter/index.js')","","/**"," * @category Quarter Helpers"," * @summary Is the given date in the same quarter as the current date?"," *"," * @description"," * Is the given date in the same quarter as the current date?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this quarter"," *"," * @example"," * // If today is 25 September 2014, is 2 July 2014 in this quarter?"," * var result = isThisQuarter(new Date(2014, 6, 2))"," * //=> true"," */","function isThisQuarter (dirtyDate) {","  return isSameQuarter(new Date(), dirtyDate)","}","","module.exports = isThisQuarter",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_second/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_second/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisSecond","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":56}},"2":{"start":{"line":19,"column":0},"end":{"line":21,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":44}},"4":{"start":{"line":23,"column":0},"end":{"line":23,"column":29}}},"branchMap":{},"code":["var isSameSecond = require('../is_same_second/index.js')","","/**"," * @category Second Helpers"," * @summary Is the given date in the same second as the current date?"," *"," * @description"," * Is the given date in the same second as the current date?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this second"," *"," * @example"," * // If now is 25 September 2014 18:30:15.500,"," * // is 25 September 2014 18:30:15.000 in this second?"," * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))"," * //=> true"," */","function isThisSecond (dirtyDate) {","  return isSameSecond(new Date(), dirtyDate)","}","","module.exports = isThisSecond",""],"l":{"1":1,"19":1,"20":0,"23":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_week/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisWeek","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":26,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":27,"column":56}},"4":{"start":{"line":30,"column":0},"end":{"line":30,"column":27}}},"branchMap":{},"code":["var isSameWeek = require('../is_same_week/index.js')","","/**"," * @category Week Helpers"," * @summary Is the given date in the same week as the current date?"," *"," * @description"," * Is the given date in the same week as the current date?"," *"," * @param {Date|String|Number} date - the date to check"," * @param {Object} [options] - the object with options"," * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)"," * @returns {Boolean} the date is in this week"," *"," * @example"," * // If today is 25 September 2014, is 21 September 2014 in this week?"," * var result = isThisWeek(new Date(2014, 8, 21))"," * //=> true"," *"," * @example"," * // If today is 25 September 2014 and week starts with Monday"," * // is 21 September 2014 in this week?"," * var result = isThisWeek(new Date(2014, 8, 21), {weekStartsOn: 1})"," * //=> false"," */","function isThisWeek (dirtyDate, dirtyOptions) {","  return isSameWeek(new Date(), dirtyDate, dirtyOptions)","}","","module.exports = isThisWeek",""],"l":{"1":1,"26":1,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_this_year/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThisYear","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":42}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":27}}},"branchMap":{},"code":["var isSameYear = require('../is_same_year/index.js')","","/**"," * @category Year Helpers"," * @summary Is the given date in the same year as the current date?"," *"," * @description"," * Is the given date in the same year as the current date?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is in this year"," *"," * @example"," * // If today is 25 September 2014, is 2 July 2014 in this year?"," * var result = isThisYear(new Date(2014, 6, 2))"," * //=> true"," */","function isThisYear (dirtyDate) {","  return isSameYear(new Date(), dirtyDate)","}","","module.exports = isThisYear",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_thursday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_thursday/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isThursday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Is the given date Thursday?"," *"," * @description"," * Is the given date Thursday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is Thursday"," *"," * @example"," * // Is 25 September 2014 Thursday?"," * var result = isThursday(new Date(2014, 8, 25))"," * //=> true"," */","function isThursday (dirtyDate) {","  return parse(dirtyDate).getDay() === 4","}","","module.exports = isThursday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_today/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_today/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isToday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":29}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":77}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":24}}},"branchMap":{},"code":["var startOfDay = require('../start_of_day/index.js')","","/**"," * @category Day Helpers"," * @summary Is the given date today?"," *"," * @description"," * Is the given date today?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is today"," *"," * @example"," * // If today is 6 October 2014, is 6 October 14:00:00 today?"," * var result = isToday(new Date(2014, 9, 6, 14, 0))"," * //=> true"," */","function isToday (dirtyDate) {","  return startOfDay(dirtyDate).getTime() === startOfDay(new Date()).getTime()","}","","module.exports = isToday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_tomorrow/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_tomorrow/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isTomorrow","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":27}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":42}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":75}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{},"code":["var startOfDay = require('../start_of_day/index.js')","","/**"," * @category Day Helpers"," * @summary Is the given date tomorrow?"," *"," * @description"," * Is the given date tomorrow?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is tomorrow"," *"," * @example"," * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?"," * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))"," * //=> true"," */","function isTomorrow (dirtyDate) {","  var tomorrow = new Date()","  tomorrow.setDate(tomorrow.getDate() + 1)","  return startOfDay(dirtyDate).getTime() === startOfDay(tomorrow).getTime()","}","","module.exports = isTomorrow",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_tuesday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_tuesday/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isTuesday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":31}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":26}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Is the given date Tuesday?"," *"," * @description"," * Is the given date Tuesday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is Tuesday"," *"," * @example"," * // Is 23 September 2014 Tuesday?"," * var result = isTuesday(new Date(2014, 8, 23))"," * //=> true"," */","function isTuesday (dirtyDate) {","  return parse(dirtyDate).getDay() === 2","}","","module.exports = isTuesday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_wednesday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_wednesday/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isWednesday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":28}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Is the given date Wednesday?"," *"," * @description"," * Is the given date Wednesday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is Wednesday"," *"," * @example"," * // Is 24 September 2014 Wednesday?"," * var result = isWednesday(new Date(2014, 8, 24))"," * //=> true"," */","function isWednesday (dirtyDate) {","  return parse(dirtyDate).getDay() === 3","}","","module.exports = isWednesday",""],"l":{"1":1,"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_weekend/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_weekend/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"isWeekend","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":31}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":25}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":31}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":26}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":9},"end":{"line":21,"column":18}},{"start":{"line":21,"column":22},"end":{"line":21,"column":31}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Weekday Helpers"," * @summary Does the given date fall on a weekend?"," *"," * @description"," * Does the given date fall on a weekend?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date falls on a weekend"," *"," * @example"," * // Does 5 October 2014 fall on a weekend?"," * var result = isWeekend(new Date(2014, 9, 5))"," * //=> true"," */","function isWeekend (dirtyDate) {","  var date = parse(dirtyDate)","  var day = date.getDay()","  return day === 0 || day === 6","}","","module.exports = isWeekend",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_within_range/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_within_range/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"isWithinRange","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":65}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":30,"column":0},"end":{"line":40,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":31,"column":39}},"4":{"start":{"line":32,"column":2},"end":{"line":32,"column":49}},"5":{"start":{"line":33,"column":2},"end":{"line":33,"column":45}},"6":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"7":{"start":{"line":36,"column":4},"end":{"line":36,"column":82}},"8":{"start":{"line":39,"column":2},"end":{"line":39,"column":45}},"9":{"start":{"line":42,"column":0},"end":{"line":42,"column":30}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"2":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":9},"end":{"line":39,"column":26}},{"start":{"line":39,"column":30},"end":{"line":39,"column":45}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Range Helpers"," * @summary Is the given date within the range?"," *"," * @description"," * Is the given date within the range?"," *"," * @param {Date|String|Number} date - the date to check"," * @param {Date|String|Number} startDate - the start of range"," * @param {Date|String|Number} endDate - the end of range"," * @returns {Boolean} the date is within the range"," * @throws {Error} startDate cannot be after endDate"," *"," * @example"," * // For the date within the range:"," * isWithinRange("," *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)"," * )"," * //=> true"," *"," * @example"," * // For the date outside of the range:"," * isWithinRange("," *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)"," * )"," * //=> false"," */","function isWithinRange (dirtyDate, dirtyStartDate, dirtyEndDate) {","  var time = parse(dirtyDate).getTime()","  var startTime = parse(dirtyStartDate).getTime()","  var endTime = parse(dirtyEndDate).getTime()","","  if (startTime > endTime) {","    throw new Error('The start of the range cannot be after the end of the range')","  }","","  return time >= startTime && time <= endTime","}","","module.exports = isWithinRange",""],"l":{"1":1,"30":1,"31":0,"32":0,"33":0,"35":0,"36":0,"39":0,"42":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_yesterday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/is_yesterday/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"isYesterday","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":19,"column":2},"end":{"line":19,"column":28}},"4":{"start":{"line":20,"column":2},"end":{"line":20,"column":44}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":76}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":28}}},"branchMap":{},"code":["var startOfDay = require('../start_of_day/index.js')","","/**"," * @category Day Helpers"," * @summary Is the given date yesterday?"," *"," * @description"," * Is the given date yesterday?"," *"," * @param {Date|String|Number} date - the date to check"," * @returns {Boolean} the date is yesterday"," *"," * @example"," * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?"," * var result = isYesterday(new Date(2014, 9, 5, 14, 0))"," * //=> true"," */","function isYesterday (dirtyDate) {","  var yesterday = new Date()","  yesterday.setDate(yesterday.getDate() - 1)","  return startOfDay(dirtyDate).getTime() === startOfDay(yesterday).getTime()","}","","module.exports = isYesterday",""],"l":{"1":1,"18":1,"19":0,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_iso_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_iso_week/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"lastDayOfISOWeek","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":38}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":59}},"2":{"start":{"line":21,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":22,"column":2},"end":{"line":22,"column":52}},"4":{"start":{"line":25,"column":0},"end":{"line":25,"column":33}}},"branchMap":{},"code":["var lastDayOfWeek = require('../last_day_of_week/index.js')","","/**"," * @category ISO Week Helpers"," * @summary Return the last day of an ISO week for the given date."," *"," * @description"," * Return the last day of an ISO week for the given date."," * The result will be in the local timezone."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the last day of an ISO week"," *"," * @example"," * // The last day of an ISO week for 2 September 2014 11:55:00:"," * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Sun Sep 07 2014 00:00:00"," */","function lastDayOfISOWeek (dirtyDate) {","  return lastDayOfWeek(dirtyDate, {weekStartsOn: 1})","}","","module.exports = lastDayOfISOWeek",""],"l":{"1":1,"21":1,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_week/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"lastDayOfWeek","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":49}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":26,"column":0},"end":{"line":36,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":27,"column":80}},"4":{"start":{"line":29,"column":2},"end":{"line":29,"column":29}},"5":{"start":{"line":30,"column":2},"end":{"line":30,"column":25}},"6":{"start":{"line":31,"column":2},"end":{"line":31,"column":69}},"7":{"start":{"line":33,"column":2},"end":{"line":33,"column":27}},"8":{"start":{"line":34,"column":2},"end":{"line":34,"column":37}},"9":{"start":{"line":35,"column":2},"end":{"line":35,"column":13}},"10":{"start":{"line":38,"column":0},"end":{"line":38,"column":30}}},"branchMap":{"1":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":37},"end":{"line":27,"column":75}},{"start":{"line":27,"column":79},"end":{"line":27,"column":80}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":37},"end":{"line":27,"column":70}},{"start":{"line":27,"column":74},"end":{"line":27,"column":75}}]},"3":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":35},"end":{"line":31,"column":37}},{"start":{"line":31,"column":40},"end":{"line":31,"column":41}}]}},"code":["var parse = require('../parse/index.js')","","/**"," * @category Week Helpers"," * @summary Return the last day of a week for the given date."," *"," * @description"," * Return the last day of a week for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @param {Object} [options] - the object with options"," * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)"," * @returns {Date} the last day of a week"," *"," * @example"," * // The last day of a week for 2 September 2014 11:55:00:"," * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Sat Sep 06 2014 00:00:00"," *"," * @example"," * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:"," * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})"," * //=> Sun Sep 07 2014 00:00:00"," */","function lastDayOfWeek (dirtyDate, dirtyOptions) {","  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0","","  var date = parse(dirtyDate)","  var day = date.getDay()","  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn)","","  date.setHours(0, 0, 0, 0)","  date.setDate(date.getDate() + diff)","  return date","}","","module.exports = lastDayOfWeek",""],"l":{"1":1,"26":1,"27":0,"29":0,"30":0,"31":0,"33":0,"34":0,"35":0,"38":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_iso_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_iso_year/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"lastDayOfISOYear","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":38}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":23,"column":0},"end":{"line":31,"column":1}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":34}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":35}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":45}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":38}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":44}},"9":{"start":{"line":29,"column":2},"end":{"line":29,"column":34}},"10":{"start":{"line":30,"column":2},"end":{"line":30,"column":13}},"11":{"start":{"line":33,"column":0},"end":{"line":33,"column":33}}},"branchMap":{},"code":["var getISOYear = require('../get_iso_year/index.js')","var startOfISOWeek = require('../start_of_iso_week/index.js')","","/**"," * @category ISO Week-Numbering Year Helpers"," * @summary Return the last day of an ISO week-numbering year for the given date."," *"," * @description"," * Return the last day of an ISO week-numbering year,"," * which always starts 3 days before the year's first Thursday."," * The result will be in the local timezone."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the end of an ISO week-numbering year"," *"," * @example"," * // The last day of an ISO week-numbering year for 2 July 2005:"," * var result = lastDayOfISOYear(new Date(2005, 6, 2))"," * //=> Sun Jan 01 2006 00:00:00"," */","function lastDayOfISOYear (dirtyDate) {","  var year = getISOYear(dirtyDate)","  var fourthOfJanuary = new Date(0)","  fourthOfJanuary.setFullYear(year + 1, 0, 4)","  fourthOfJanuary.setHours(0, 0, 0, 0)","  var date = startOfISOWeek(fourthOfJanuary)","  date.setDate(date.getDate() - 1)","  return date","}","","module.exports = lastDayOfISOYear",""],"l":{"1":1,"2":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"33":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_month/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"lastDayOfMonth","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":36}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":52}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":27}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":31}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Return the last day of a month for the given date."," *"," * @description"," * Return the last day of a month for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the last day of a month"," *"," * @example"," * // The last day of a month for 2 September 2014 11:55:00:"," * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Tue Sep 30 2014 00:00:00"," */","function lastDayOfMonth (dirtyDate) {","  var date = parse(dirtyDate)","  var month = date.getMonth()","  date.setFullYear(date.getFullYear(), month + 1, 0)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = lastDayOfMonth",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_quarter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_quarter/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"lastDayOfQuarter","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":38}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":36}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":49}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":25}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":27}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":13}},"9":{"start":{"line":28,"column":0},"end":{"line":28,"column":33}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Quarter Helpers"," * @summary Return the last day of a year quarter for the given date."," *"," * @description"," * Return the last day of a year quarter for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the last day of a quarter"," *"," * @example"," * // The last day of a quarter for 2 September 2014 11:55:00:"," * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Tue Sep 30 2014 00:00:00"," */","function lastDayOfQuarter (dirtyDate) {","  var date = parse(dirtyDate)","  var currentMonth = date.getMonth()","  var month = currentMonth - currentMonth % 3 + 3","  date.setMonth(month, 0)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = lastDayOfQuarter",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/last_day_of_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"lastDayOfYear","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":31}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":34}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":27}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":30}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Return the last day of a year for the given date."," *"," * @description"," * Return the last day of a year for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the last day of a year"," *"," * @example"," * // The last day of a year for 2 September 2014 11:55:00:"," * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))"," * //=> Wed Dec 31 2014 00:00:00"," */","function lastDayOfYear (dirtyDate) {","  var date = parse(dirtyDate)","  var year = date.getFullYear()","  date.setFullYear(year + 1, 0, 0)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = lastDayOfYear",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/max/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/max/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"max","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":16}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":29},"end":{"line":25,"column":50}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":23,"column":0},"end":{"line":30,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":56}},"4":{"start":{"line":25,"column":2},"end":{"line":27,"column":4}},"5":{"start":{"line":26,"column":4},"end":{"line":26,"column":27}},"6":{"start":{"line":28,"column":2},"end":{"line":28,"column":51}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":34}},"8":{"start":{"line":32,"column":0},"end":{"line":32,"column":20}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Return the latest of the given dates."," *"," * @description"," * Return the latest of the given dates."," *"," * @param {...(Date|String|Number)} dates - the dates to compare"," * @returns {Date} the latest of the dates"," *"," * @example"," * // Which of these dates is the latest?"," * var result = max("," *   new Date(1989, 6, 10),"," *   new Date(1987, 1, 11),"," *   new Date(1995, 6, 2),"," *   new Date(1990, 0, 1)"," * )"," * //=> Sun Jul 02 1995 00:00:00"," */","function max () {","  var dirtyDates = Array.prototype.slice.call(arguments)","  var dates = dirtyDates.map(function (dirtyDate) {","    return parse(dirtyDate)","  })","  var latestTimestamp = Math.max.apply(null, dates)","  return new Date(latestTimestamp)","}","","module.exports = max",""],"l":{"1":1,"23":1,"24":0,"25":0,"26":0,"28":0,"29":0,"32":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/min/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/min/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"min","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":16}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":29},"end":{"line":25,"column":50}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":23,"column":0},"end":{"line":30,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":56}},"4":{"start":{"line":25,"column":2},"end":{"line":27,"column":4}},"5":{"start":{"line":26,"column":4},"end":{"line":26,"column":27}},"6":{"start":{"line":28,"column":2},"end":{"line":28,"column":53}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":36}},"8":{"start":{"line":32,"column":0},"end":{"line":32,"column":20}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Common Helpers"," * @summary Return the earliest of the given dates."," *"," * @description"," * Return the earliest of the given dates."," *"," * @param {...(Date|String|Number)} dates - the dates to compare"," * @returns {Date} the earliest of the dates"," *"," * @example"," * // Which of these dates is the earliest?"," * var result = min("," *   new Date(1989, 6, 10),"," *   new Date(1987, 1, 11),"," *   new Date(1995, 6, 2),"," *   new Date(1990, 0, 1)"," * )"," * //=> Wed Feb 11 1987 00:00:00"," */","function min () {","  var dirtyDates = Array.prototype.slice.call(arguments)","  var dates = dirtyDates.map(function (dirtyDate) {","    return parse(dirtyDate)","  })","  var earliestTimestamp = Math.min.apply(null, dates)","  return new Date(earliestTimestamp)","}","","module.exports = min",""],"l":{"1":1,"23":1,"24":0,"25":0,"26":0,"28":0,"29":0,"32":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_date/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_date/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setDate","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":42}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":26}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Day Helpers"," * @summary Set the day of the month to the given date."," *"," * @description"," * Set the day of the month to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} dayOfMonth - the day of the month of the new date"," * @returns {Date} the new date with the day of the month setted"," *"," * @example"," * // Set the 30th day of the month to 1 September 2014:"," * var result = setDate(new Date(2014, 8, 1), 30)"," * //=> Tue Sep 30 2014 00:00:00"," */","function setDate (dirtyDate, dirtyDayOfMonth) {","  var date = parse(dirtyDate)","  var dayOfMonth = Number(dirtyDayOfMonth)","  date.setDate(dayOfMonth)","  return date","}","","module.exports = setDate",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_day/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"setDay","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":52}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":27,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":28,"column":2},"end":{"line":28,"column":80}},"5":{"start":{"line":29,"column":2},"end":{"line":29,"column":29}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":28}},"7":{"start":{"line":31,"column":2},"end":{"line":31,"column":32}},"8":{"start":{"line":33,"column":2},"end":{"line":33,"column":25}},"9":{"start":{"line":34,"column":2},"end":{"line":34,"column":36}},"10":{"start":{"line":36,"column":2},"end":{"line":36,"column":65}},"11":{"start":{"line":37,"column":2},"end":{"line":37,"column":28}},"12":{"start":{"line":40,"column":0},"end":{"line":40,"column":23}}},"branchMap":{"1":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":37},"end":{"line":28,"column":75}},{"start":{"line":28,"column":79},"end":{"line":28,"column":80}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":37},"end":{"line":28,"column":70}},{"start":{"line":28,"column":74},"end":{"line":28,"column":75}}]},"3":{"line":36,"type":"cond-expr","locations":[{"start":{"line":36,"column":40},"end":{"line":36,"column":41}},{"start":{"line":36,"column":44},"end":{"line":36,"column":45}}]}},"code":["var parse = require('../parse/index.js')","var addDays = require('../add_days/index.js')","","/**"," * @category Weekday Helpers"," * @summary Set the day of the week to the given date."," *"," * @description"," * Set the day of the week to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} day - the day of the week of the new date"," * @param {Object} [options] - the object with options"," * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)"," * @returns {Date} the new date with the day of the week setted"," *"," * @example"," * // Set Sunday to 1 September 2014:"," * var result = setDay(new Date(2014, 8, 1), 0)"," * //=> Sun Aug 31 2014 00:00:00"," *"," * @example"," * // If week starts with Monday, set Sunday to 1 September 2014:"," * var result = setDay(new Date(2014, 8, 1), 0, {weekStartsOn: 1})"," * //=> Sun Sep 07 2014 00:00:00"," */","function setDay (dirtyDate, dirtyDay, dirtyOptions) {","  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0","  var date = parse(dirtyDate)","  var day = Number(dirtyDay)","  var currentDay = date.getDay()","","  var remainder = day % 7","  var dayIndex = (remainder + 7) % 7","","  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay","  return addDays(date, diff)","}","","module.exports = setDay",""],"l":{"1":1,"2":1,"27":1,"28":0,"29":0,"30":0,"31":0,"33":0,"34":0,"36":0,"37":0,"40":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_day_of_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_day_of_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setDayOfYear","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":50}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":40}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":18}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":25}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":29}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Day Helpers"," * @summary Set the day of the year to the given date."," *"," * @description"," * Set the day of the year to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} dayOfYear - the day of the year of the new date"," * @returns {Date} the new date with the day of the year setted"," *"," * @example"," * // Set the 2nd day of the year to 2 July 2014:"," * var result = setDayOfYear(new Date(2014, 6, 2), 2)"," * //=> Thu Jan 02 2014 00:00:00"," */","function setDayOfYear (dirtyDate, dirtyDayOfYear) {","  var date = parse(dirtyDate)","  var dayOfYear = Number(dirtyDayOfYear)","  date.setMonth(0)","  date.setDate(dayOfYear)","  return date","}","","module.exports = setDayOfYear",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_hours/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_hours/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setHours","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":32}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":22}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Hour Helpers"," * @summary Set the hours to the given date."," *"," * @description"," * Set the hours to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} hours - the hours of the new date"," * @returns {Date} the new date with the hours setted"," *"," * @example"," * // Set 4 hours to 1 September 2014 11:30:00:"," * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)"," * //=> Mon Sep 01 2014 04:30:00"," */","function setHours (dirtyDate, dirtyHours) {","  var date = parse(dirtyDate)","  var hours = Number(dirtyHours)","  date.setHours(hours)","  return date","}","","module.exports = setHours",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_iso_day/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_iso_day/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setISODay","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":41}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"4":{"start":{"line":23,"column":0},"end":{"line":29,"column":1}},"5":{"start":{"line":24,"column":2},"end":{"line":24,"column":29}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":28}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":34}},"8":{"start":{"line":27,"column":2},"end":{"line":27,"column":29}},"9":{"start":{"line":28,"column":2},"end":{"line":28,"column":28}},"10":{"start":{"line":31,"column":0},"end":{"line":31,"column":26}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var addDays = require('../add_days/index.js')","var getISODay = require('../get_iso_day/index.js')","","/**"," * @category Weekday Helpers"," * @summary Set the day of the ISO week to the given date."," *"," * @description"," * Set the day of the ISO week to the given date."," * ISO week starts with Monday."," * 7 is the index of Sunday, 1 is the index of Monday etc."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} day - the day of the ISO week of the new date"," * @returns {Date} the new date with the day of the ISO week setted"," *"," * @example"," * // Set Sunday to 1 September 2014:"," * var result = setISODay(new Date(2014, 8, 1), 7)"," * //=> Sun Sep 07 2014 00:00:00"," */","function setISODay (dirtyDate, dirtyDay) {","  var date = parse(dirtyDate)","  var day = Number(dirtyDay)","  var currentDay = getISODay(date)","  var diff = day - currentDay","  return addDays(date, diff)","}","","module.exports = setISODay",""],"l":{"1":1,"2":1,"3":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_iso_week/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_iso_week/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setISOWeek","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":52}},"3":{"start":{"line":22,"column":0},"end":{"line":28,"column":1}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":29}},"5":{"start":{"line":24,"column":2},"end":{"line":24,"column":36}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":39}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":41}},"8":{"start":{"line":27,"column":2},"end":{"line":27,"column":13}},"9":{"start":{"line":30,"column":0},"end":{"line":30,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var getISOWeek = require('../get_iso_week/index.js')","","/**"," * @category ISO Week Helpers"," * @summary Set the ISO week to the given date."," *"," * @description"," * Set the ISO week to the given date, saving the weekday number."," *"," * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date"," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} isoWeek - the ISO week of the new date"," * @returns {Date} the new date with the ISO week setted"," *"," * @example"," * // Set the 53rd ISO week to 7 August 2004:"," * var result = setISOWeek(new Date(2004, 7, 7), 53)"," * //=> Sat Jan 01 2005 00:00:00"," */","function setISOWeek (dirtyDate, dirtyISOWeek) {","  var date = parse(dirtyDate)","  var isoWeek = Number(dirtyISOWeek)","  var diff = getISOWeek(date) - isoWeek","  date.setDate(date.getDate() - diff * 7)","  return date","}","","module.exports = setISOWeek",""],"l":{"1":1,"2":1,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_milliseconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_milliseconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setMilliseconds","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":46}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":36}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":32}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Millisecond Helpers"," * @summary Set the milliseconds to the given date."," *"," * @description"," * Set the milliseconds to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} milliseconds - the milliseconds of the new date"," * @returns {Date} the new date with the milliseconds setted"," *"," * @example"," * // Set 300 milliseconds to 1 September 2014 11:30:40.500:"," * var result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)"," * //=> Mon Sep 01 2014 11:30:40.300"," */","function setMilliseconds (dirtyDate, dirtyMilliseconds) {","  var date = parse(dirtyDate)","  var milliseconds = Number(dirtyMilliseconds)","  date.setMilliseconds(milliseconds)","  return date","}","","module.exports = setMilliseconds",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_minutes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_minutes/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setMinutes","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":36}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":26}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Minute Helpers"," * @summary Set the minutes to the given date."," *"," * @description"," * Set the minutes to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} minutes - the minutes of the new date"," * @returns {Date} the new date with the minutes setted"," *"," * @example"," * // Set 45 minutes to 1 September 2014 11:30:40:"," * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)"," * //=> Mon Sep 01 2014 11:45:40"," */","function setMinutes (dirtyDate, dirtyMinutes) {","  var date = parse(dirtyDate)","  var minutes = Number(dirtyMinutes)","  date.setMinutes(minutes)","  return date","}","","module.exports = setMinutes",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_month/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setMonth","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":20,"column":0},"end":{"line":34,"column":1}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":32}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":31}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":26}},"8":{"start":{"line":26,"column":2},"end":{"line":26,"column":40}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":51}},"10":{"start":{"line":28,"column":2},"end":{"line":28,"column":43}},"11":{"start":{"line":29,"column":2},"end":{"line":29,"column":56}},"12":{"start":{"line":32,"column":2},"end":{"line":32,"column":50}},"13":{"start":{"line":33,"column":2},"end":{"line":33,"column":13}},"14":{"start":{"line":36,"column":0},"end":{"line":36,"column":25}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var getDaysInMonth = require('../get_days_in_month/index.js')","","/**"," * @category Month Helpers"," * @summary Set the month to the given date."," *"," * @description"," * Set the month to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} month - the month of the new date"," * @returns {Date} the new date with the month setted"," *"," * @example"," * // Set February to 1 September 2014:"," * var result = setMonth(new Date(2014, 8, 1), 1)"," * //=> Sat Feb 01 2014 00:00:00"," */","function setMonth (dirtyDate, dirtyMonth) {","  var date = parse(dirtyDate)","  var month = Number(dirtyMonth)","  var year = date.getFullYear()","  var day = date.getDate()","","  var dateWithDesiredMonth = new Date(0)","  dateWithDesiredMonth.setFullYear(year, month, 15)","  dateWithDesiredMonth.setHours(0, 0, 0, 0)","  var daysInMonth = getDaysInMonth(dateWithDesiredMonth)","  // Set the last day of the new month","  // if the original date was the last day of the longer month","  date.setMonth(month, Math.min(day, daysInMonth))","  return date","}","","module.exports = setMonth",""],"l":{"1":1,"2":1,"20":1,"21":0,"22":0,"23":0,"24":0,"26":0,"27":0,"28":0,"29":0,"32":0,"33":0,"36":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_quarter/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_quarter/index.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setQuarter","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":47}},"3":{"start":{"line":20,"column":0},"end":{"line":26,"column":1}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":29}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":36}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":54}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":33}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":51}},"9":{"start":{"line":28,"column":0},"end":{"line":28,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","var setMonth = require('../set_month/index.js')","","/**"," * @category Quarter Helpers"," * @summary Set the year quarter to the given date."," *"," * @description"," * Set the year quarter to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} quarter - the quarter of the new date"," * @returns {Date} the new date with the quarter setted"," *"," * @example"," * // Set the 2nd quarter to 2 July 2014:"," * var result = setQuarter(new Date(2014, 6, 2), 2)"," * //=> Wed Apr 02 2014 00:00:00"," */","function setQuarter (dirtyDate, dirtyQuarter) {","  var date = parse(dirtyDate)","  var quarter = Number(dirtyQuarter)","  var oldQuarter = Math.floor(date.getMonth() / 3) + 1","  var diff = quarter - oldQuarter","  return setMonth(date, date.getMonth() + diff * 3)","}","","module.exports = setQuarter",""],"l":{"1":1,"2":1,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_seconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_seconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setSeconds","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":36}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":26}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":27}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Second Helpers"," * @summary Set the seconds to the given date."," *"," * @description"," * Set the seconds to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} seconds - the seconds of the new date"," * @returns {Date} the new date with the seconds setted"," *"," * @example"," * // Set 45 seconds to 1 September 2014 11:30:40:"," * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)"," * //=> Mon Sep 01 2014 11:30:45"," */","function setSeconds (dirtyDate, dirtySeconds) {","  var date = parse(dirtyDate)","  var seconds = Number(dirtySeconds)","  date.setSeconds(seconds)","  return date","}","","module.exports = setSeconds",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_year/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/set_year/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"setYear","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":40}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":30}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":24}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":24}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Year Helpers"," * @summary Set the year to the given date."," *"," * @description"," * Set the year to the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} year - the year of the new date"," * @returns {Date} the new date with the year setted"," *"," * @example"," * // Set year 2013 to 1 September 2014:"," * var result = setYear(new Date(2014, 8, 1), 2013)"," * //=> Sun Sep 01 2013 00:00:00"," */","function setYear (dirtyDate, dirtyYear) {","  var date = parse(dirtyDate)","  var year = Number(dirtyYear)","  date.setFullYear(year)","  return date","}","","module.exports = setYear",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_month/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_month/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfMonth","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":40}},"2":{"start":{"line":19,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":29}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":17}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":27}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":29}}},"branchMap":{},"code":["var parse = require('../parse/index.js')","","/**"," * @category Month Helpers"," * @summary Return the start of a month for the given date."," *"," * @description"," * Return the start of a month for the given date."," * The result will be in the local timezone."," *"," * @param {Date|String|Number} date - the original date"," * @returns {Date} the start of a month"," *"," * @example"," * // The start of a month for 2 September 2014 11:55:00:"," * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))"," * //=> Mon Sep 01 2014 00:00:00"," */","function startOfMonth (dirtyDate) {","  var date = parse(dirtyDate)","  date.setDate(1)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = startOfMonth",""],"l":{"1":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_today/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_today/index.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfToday","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":25}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":17,"column":0},"end":{"line":19,"column":1}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":31}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":29}}},"branchMap":{},"code":["var startOfDay = require('../start_of_day/index.js')","","/**"," * @category Day Helpers"," * @summary Return the start of today."," *"," * @description"," * Return the start of today."," *"," * @returns {Date} the start of today"," *"," * @example"," * // If today is 6 October 2014:"," * var result = startOfToday()"," * //=> Mon Oct 6 2014 00:00:00"," */","function startOfToday () {","  return startOfDay(new Date())","}","","module.exports = startOfToday",""],"l":{"1":1,"17":1,"18":0,"21":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_tomorrow/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_tomorrow/index.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfTomorrow","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":28}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":25,"column":1}},"2":{"start":{"line":16,"column":2},"end":{"line":16,"column":22}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":30}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":28}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":25}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":24}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":40}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":27}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"10":{"start":{"line":27,"column":0},"end":{"line":27,"column":32}}},"branchMap":{},"code":["/**"," * @category Day Helpers"," * @summary Return the start of tomorrow."," *"," * @description"," * Return the start of tomorrow."," *"," * @returns {Date} the start of tomorrow"," *"," * @example"," * // If today is 6 October 2014:"," * var result = startOfTomorrow()"," * //=> Tue Oct 7 2014 00:00:00"," */","function startOfTomorrow () {","  var now = new Date()","  var year = now.getFullYear()","  var month = now.getMonth()","  var day = now.getDate()","","  var date = new Date(0)","  date.setFullYear(year, month, day + 1)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = startOfTomorrow",""],"l":{"15":1,"16":0,"17":0,"18":0,"19":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_yesterday/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/start_of_yesterday/index.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"startOfYesterday","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":29}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":25,"column":1}},"2":{"start":{"line":16,"column":2},"end":{"line":16,"column":22}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":30}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":28}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":25}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":24}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":40}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":27}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}},"10":{"start":{"line":27,"column":0},"end":{"line":27,"column":33}}},"branchMap":{},"code":["/**"," * @category Day Helpers"," * @summary Return the start of yesterday."," *"," * @description"," * Return the start of yesterday."," *"," * @returns {Date} the start of yesterday"," *"," * @example"," * // If today is 6 October 2014:"," * var result = startOfYesterday()"," * //=> Sun Oct 5 2014 00:00:00"," */","function startOfYesterday () {","  var now = new Date()","  var year = now.getFullYear()","  var month = now.getMonth()","  var day = now.getDate()","","  var date = new Date(0)","  date.setFullYear(year, month, day - 1)","  date.setHours(0, 0, 0, 0)","  return date","}","","module.exports = startOfYesterday",""],"l":{"15":1,"16":0,"17":0,"18":0,"19":0,"21":0,"22":0,"23":0,"24":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_days/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_days/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subDays","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":36}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":24}}},"branchMap":{},"code":["var addDays = require('../add_days/index.js')","","/**"," * @category Day Helpers"," * @summary Subtract the specified number of days from the given date."," *"," * @description"," * Subtract the specified number of days from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of days to be subtracted"," * @returns {Date} the new date with the days subtracted"," *"," * @example"," * // Subtract 10 days from 1 September 2014:"," * var result = subDays(new Date(2014, 8, 1), 10)"," * //=> Fri Aug 22 2014 00:00:00"," */","function subDays (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addDays(dirtyDate, -amount)","}","","module.exports = subDays",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_hours/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_hours/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subHours","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":37}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":25}}},"branchMap":{},"code":["var addHours = require('../add_hours/index.js')","","/**"," * @category Hour Helpers"," * @summary Subtract the specified number of hours from the given date."," *"," * @description"," * Subtract the specified number of hours from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of hours to be subtracted"," * @returns {Date} the new date with the hours subtracted"," *"," * @example"," * // Subtract 2 hours from 11 July 2014 01:00:00:"," * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)"," * //=> Thu Jul 10 2014 23:00:00"," */","function subHours (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addHours(dirtyDate, -amount)","}","","module.exports = subHours",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_milliseconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_milliseconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subMilliseconds","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":50}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":61}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":44}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}}},"branchMap":{},"code":["var addMilliseconds = require('../add_milliseconds/index.js')","","/**"," * @category Millisecond Helpers"," * @summary Subtract the specified number of milliseconds from the given date."," *"," * @description"," * Subtract the specified number of milliseconds from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of milliseconds to be subtracted"," * @returns {Date} the new date with the milliseconds subtracted"," *"," * @example"," * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:"," * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)"," * //=> Thu Jul 10 2014 12:45:29.250"," */","function subMilliseconds (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addMilliseconds(dirtyDate, -amount)","}","","module.exports = subMilliseconds",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_minutes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_minutes/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subMinutes","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":45}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":51}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":39}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{},"code":["var addMinutes = require('../add_minutes/index.js')","","/**"," * @category Minute Helpers"," * @summary Subtract the specified number of minutes from the given date."," *"," * @description"," * Subtract the specified number of minutes from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of minutes to be subtracted"," * @returns {Date} the new date with the mintues subtracted"," *"," * @example"," * // Subtract 30 minutes from 10 July 2014 12:00:00:"," * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)"," * //=> Thu Jul 10 2014 11:30:00"," */","function subMinutes (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addMinutes(dirtyDate, -amount)","}","","module.exports = subMinutes",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_months/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_months/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subMonths","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":44}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":49}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":38}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":26}}},"branchMap":{},"code":["var addMonths = require('../add_months/index.js')","","/**"," * @category Month Helpers"," * @summary Subtract the specified number of months from the given date."," *"," * @description"," * Subtract the specified number of months from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of months to be subtracted"," * @returns {Date} the new date with the months subtracted"," *"," * @example"," * // Subtract 5 months from 1 February 2015:"," * var result = subMonths(new Date(2015, 1, 1), 5)"," * //=> Mon Sep 01 2014 00:00:00"," */","function subMonths (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addMonths(dirtyDate, -amount)","}","","module.exports = subMonths",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_quarters/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_quarters/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subQuarters","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":53}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":40}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":28}}},"branchMap":{},"code":["var addQuarters = require('../add_quarters/index.js')","","/**"," * @category Quarter Helpers"," * @summary Subtract the specified number of year quarters from the given date."," *"," * @description"," * Subtract the specified number of year quarters from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of quarters to be subtracted"," * @returns {Date} the new date with the quarters subtracted"," *"," * @example"," * // Subtract 3 quarters from 1 September 2014:"," * var result = subQuarters(new Date(2014, 8, 1), 3)"," * //=> Sun Dec 01 2013 00:00:00"," */","function subQuarters (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addQuarters(dirtyDate, -amount)","}","","module.exports = subQuarters",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_seconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_seconds/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subSeconds","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":45}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":51}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":39}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"branchMap":{},"code":["var addSeconds = require('../add_seconds/index.js')","","/**"," * @category Second Helpers"," * @summary Subtract the specified number of seconds from the given date."," *"," * @description"," * Subtract the specified number of seconds from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of seconds to be subtracted"," * @returns {Date} the new date with the seconds subtracted"," *"," * @example"," * // Subtract 30 seconds from 10 July 2014 12:45:00:"," * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)"," * //=> Thu Jul 10 2014 12:44:30"," */","function subSeconds (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addSeconds(dirtyDate, -amount)","}","","module.exports = subSeconds",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_weeks/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_weeks/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subWeeks","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":37}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":25}}},"branchMap":{},"code":["var addWeeks = require('../add_weeks/index.js')","","/**"," * @category Week Helpers"," * @summary Subtract the specified number of weeks from the given date."," *"," * @description"," * Subtract the specified number of weeks from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of weeks to be subtracted"," * @returns {Date} the new date with the weeks subtracted"," *"," * @example"," * // Subtract 4 weeks from 1 September 2014:"," * var result = subWeeks(new Date(2014, 8, 1), 4)"," * //=> Mon Aug 04 2014 00:00:00"," */","function subWeeks (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addWeeks(dirtyDate, -amount)","}","","module.exports = subWeeks",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_years/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-date-fns/node_modules/date-fns/sub_years/index.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subYears","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":37}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":25}}},"branchMap":{},"code":["var addYears = require('../add_years/index.js')","","/**"," * @category Year Helpers"," * @summary Subtract the specified number of years from the given date."," *"," * @description"," * Subtract the specified number of years from the given date."," *"," * @param {Date|String|Number} date - the date to be changed"," * @param {Number} amount - the amount of years to be subtracted"," * @returns {Date} the new date with the years subtracted"," *"," * @example"," * // Subtract 5 years from 1 September 2014:"," * var result = subYears(new Date(2014, 8, 1), 5)"," * //=> Tue Sep 01 2009 00:00:00"," */","function subYears (dirtyDate, dirtyAmount) {","  var amount = Number(dirtyAmount)","  return addYears(dirtyDate, -amount)","}","","module.exports = subYears",""],"l":{"1":1,"19":1,"20":0,"21":0,"24":1}}}